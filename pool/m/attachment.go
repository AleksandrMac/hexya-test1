// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package m

import (
	"github.com/beevik/etree"
	"github.com/hexya-addons/web/domains"
	"github.com/hexya-addons/web/webtypes"
	"github.com/hexya-erp/hexya/src/actions"
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types"
	"github.com/hexya-erp/hexya/src/models/types/dates"
	"github.com/hexya-erp/pool/q"
)

// AttachmentSet is an autogenerated type to handle Attachment objects.
type AttachmentSet interface {
	models.RecordSet
	// AttachmentSetHexyaFunc is a dummy function to uniquely match interfaces.
	AttachmentSetHexyaFunc()
	// ForceLoad reloads the cache for the given fields and updates the ids of this AttachmentSet.
	//
	// If no fields are given, all DB columns of the Attachment model are retrieved.
	//
	// It also returns this AttachmentSet.
	ForceLoad(fields ...models.FieldName) AttachmentSet
	// AccessToken is a getter for the value of the "AccessToken" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	AccessToken() string
	// SetAccessToken is a setter for the value of the "AccessToken" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetAccessToken panics if the RecordSet is empty.
	SetAccessToken(value string)
	// CheckSum is a getter for the value of the "CheckSum" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CheckSum() string
	// SetCheckSum is a setter for the value of the "CheckSum" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCheckSum panics if the RecordSet is empty.
	SetCheckSum(value string)
	// Company is a getter for the value of the "Company" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Company() CompanySet
	// SetCompany is a setter for the value of the "Company" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCompany panics if the RecordSet is empty.
	SetCompany(value CompanySet)
	// CreateDate is a getter for the value of the "CreateDate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreateDate() dates.DateTime
	// SetCreateDate is a setter for the value of the "CreateDate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreateDate panics if the RecordSet is empty.
	SetCreateDate(value dates.DateTime)
	// CreateUID is a getter for the value of the "CreateUID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreateUID() int64
	// SetCreateUID is a setter for the value of the "CreateUID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreateUID panics if the RecordSet is empty.
	SetCreateUID(value int64)
	// DBDatas is a getter for the value of the "DBDatas" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	DBDatas() string
	// SetDBDatas is a setter for the value of the "DBDatas" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDBDatas panics if the RecordSet is empty.
	SetDBDatas(value string)
	// Datas is a getter for the value of the "Datas" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Datas() string
	// SetDatas is a setter for the value of the "Datas" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDatas panics if the RecordSet is empty.
	SetDatas(value string)
	// Description is a getter for the value of the "Description" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Description() string
	// SetDescription is a setter for the value of the "Description" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDescription panics if the RecordSet is empty.
	SetDescription(value string)
	// DisplayName is a getter for the value of the "DisplayName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	DisplayName() string
	// SetDisplayName is a setter for the value of the "DisplayName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDisplayName panics if the RecordSet is empty.
	SetDisplayName(value string)
	// FileSize is a getter for the value of the "FileSize" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	FileSize() int
	// SetFileSize is a setter for the value of the "FileSize" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetFileSize panics if the RecordSet is empty.
	SetFileSize(value int)
	// HexyaExternalID is a getter for the value of the "HexyaExternalID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	HexyaExternalID() string
	// SetHexyaExternalID is a setter for the value of the "HexyaExternalID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetHexyaExternalID panics if the RecordSet is empty.
	SetHexyaExternalID(value string)
	// HexyaVersion is a getter for the value of the "HexyaVersion" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	HexyaVersion() int
	// SetHexyaVersion is a setter for the value of the "HexyaVersion" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetHexyaVersion panics if the RecordSet is empty.
	SetHexyaVersion(value int)
	// ID is a getter for the value of the "ID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ID() int64
	// SetID is a setter for the value of the "ID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetID panics if the RecordSet is empty.
	SetID(value int64)
	// IndexContent is a getter for the value of the "IndexContent" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	IndexContent() string
	// SetIndexContent is a setter for the value of the "IndexContent" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetIndexContent panics if the RecordSet is empty.
	SetIndexContent(value string)
	// LastUpdate is a getter for the value of the "LastUpdate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	LastUpdate() dates.DateTime
	// SetLastUpdate is a setter for the value of the "LastUpdate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLastUpdate panics if the RecordSet is empty.
	SetLastUpdate(value dates.DateTime)
	// MimeType is a getter for the value of the "MimeType" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	MimeType() string
	// SetMimeType is a setter for the value of the "MimeType" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetMimeType panics if the RecordSet is empty.
	SetMimeType(value string)
	// Name is a getter for the value of the "Name" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Name() string
	// SetName is a setter for the value of the "Name" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetName panics if the RecordSet is empty.
	SetName(value string)
	// Public is a getter for the value of the "Public" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Public() bool
	// SetPublic is a setter for the value of the "Public" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetPublic panics if the RecordSet is empty.
	SetPublic(value bool)
	// ResField is a getter for the value of the "ResField" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ResField() string
	// SetResField is a setter for the value of the "ResField" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetResField panics if the RecordSet is empty.
	SetResField(value string)
	// ResID is a getter for the value of the "ResID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ResID() int64
	// SetResID is a setter for the value of the "ResID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetResID panics if the RecordSet is empty.
	SetResID(value int64)
	// ResModel is a getter for the value of the "ResModel" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ResModel() string
	// SetResModel is a setter for the value of the "ResModel" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetResModel panics if the RecordSet is empty.
	SetResModel(value string)
	// ResName is a getter for the value of the "ResName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ResName() string
	// SetResName is a setter for the value of the "ResName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetResName panics if the RecordSet is empty.
	SetResName(value string)
	// StoreFname is a getter for the value of the "StoreFname" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	StoreFname() string
	// SetStoreFname is a setter for the value of the "StoreFname" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetStoreFname panics if the RecordSet is empty.
	SetStoreFname(value string)
	// Type is a getter for the value of the "Type" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Type() string
	// SetType is a setter for the value of the "Type" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetType panics if the RecordSet is empty.
	SetType(value string)
	// URL is a getter for the value of the "URL" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	URL() string
	// SetURL is a setter for the value of the "URL" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetURL panics if the RecordSet is empty.
	SetURL(value string)
	// WriteDate is a getter for the value of the "WriteDate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	WriteDate() dates.DateTime
	// SetWriteDate is a setter for the value of the "WriteDate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWriteDate panics if the RecordSet is empty.
	SetWriteDate(value dates.DateTime)
	// WriteUID is a getter for the value of the "WriteUID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	WriteUID() int64
	// SetWriteUID is a setter for the value of the "WriteUID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWriteUID panics if the RecordSet is empty.
	SetWriteUID(value int64)
	// ActionArchive sets Active=false on a recordset, by calling ToggleActive to take the
	// corresponding actions according to the model
	ActionArchive()
	// ActionGet returns the action for displaying attachments
	ActionGet() *actions.Action
	// ActionUnarchive sets Active=true on a recordset, by calling ToggleActive to take the
	// corresponding actions according to the model
	ActionUnarchive()
	// AddDomainLimitOffset adds the given domain, limit, offset
	// and order to the current RecordSet query.
	AddDomainLimitOffset(domain domains.Domain, limit int, offset int, order string) AttachmentSet
	// AddModifiers adds the modifiers attribute nodes to given xml doc.
	AddModifiers(doc *etree.Document, fieldInfos map[string]*models.FieldInfo)
	// AddNameToRelations returns the given RecordData after getting the name of all 2one relation ids
	AddNamesToRelations(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData

	Aggregates(fieldNames ...models.FieldName) []AttachmentGroupAggregateRow
	// Browse returns a new RecordSet with only the records with the given ids.
	// Note that this function is just a shorcut for Search on a list of ids.
	Browse(ids []int64) AttachmentSet
	// BrowseOne returns a new RecordSet with only the record with the given id.
	// Note that this function is just a shorcut for Search on a given id.
	BrowseOne(id int64) AttachmentSet

	CartesianProduct(others ...AttachmentSet) []AttachmentSet
	// Check restricts the access to an ir.attachment, according to referred model
	// In the 'document' module, it is overridden to relax this hard rule, since
	// more complex ones apply there.
	//
	// This method panics if the user does not have the access rights.
	Check(mode string, values AttachmentData)
	// CheckAccessRights verifies that the operation given by "operation" is allowed for
	// the current user according to the access rights.
	//
	// operation must be one of "read", "create", "unlink", "write".
	CheckAccessRights(args webtypes.CheckAccessRightsArgs) bool
	// CheckContents updates the given values
	CheckContents(values AttachmentData) AttachmentData
	// CheckExecutionPermission panics if the current user is not allowed to execute the given method.
	//
	// If dontPanic is false, this function will panic, otherwise it returns true
	// if the user has the execution permission and false otherwise.
	CheckExecutionPermission(method *models.Method, dontPanic ...bool) bool
	// CheckRecursion verifies that there is no loop in a hierarchical structure of records,
	// by following the parent relationship using the 'Parent' field until a loop is detected or
	// until a top-level record is found.
	//
	// It returns true if no loop was found, false otherwise`,
	CheckRecursion() bool
	// CheckServingAttachment limits creation and modification of served attachments
	// to the members of the serving groups.
	CheckServingAttachments()
	// ComputeCheckSum computes the SHA1 checksum of the given data
	ComputeCheckSum(data string) string
	// ComputeDatas returns the data of the attachment, reading either from file or database
	ComputeDatas() AttachmentData
	// ComputeDisplayName updates the DisplayName field with the result of NameGet
	ComputeDisplayName() *models.ModelData
	// ComputeLastUpdate returns the last datetime at which the record has been updated.
	ComputeLastUpdate() *models.ModelData
	// ComputeMimeType of the given values
	ComputeMimeType(values AttachmentData) string
	// ComputeResName computes the display name of the ressource this document is attached to.
	ComputeResName() AttachmentData

	Copy(overrides AttachmentData) AttachmentSet

	CopyData(overrides AttachmentData) AttachmentData

	Create(data AttachmentData) AttachmentSet

	DefaultGet() AttachmentData
	// Enqueue queues the execution of the given method with the given arguments on this recordset.
	// description will be the name given to the job.
	Enqueue(description string, method models.Methoder, arguments ...interface{}) QueueJobSet
	// Equals returns true if this RecordSet is the same as other
	// i.e. they are of the same model and have the same ids
	Equals(other AttachmentSet) bool
	// ExecuteO2MActions executes the actions on one2many fields given by
	// the list of triplets received from the client
	ExecuteO2MActions(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{}
	// Fetch query the database with the current filter and returns a RecordSet
	// with the queries ids.
	//
	// Fetch is lazy and only return ids. Use Load() instead if you want to fetch all fields.
	Fetch() AttachmentSet
	// FieldGet returns the definition of the given field.
	// The string, help, and selection (if present) attributes are translated.
	FieldGet(field models.FieldName) *models.FieldInfo
	// FieldsGet returns the definition of each field.
	// The embedded fields are included.
	// The string, help, and selection (if present) attributes are translated.
	//
	// The result map is indexed by the fields JSON names.
	FieldsGet(args models.FieldsGetArgs) map[string]*models.FieldInfo
	// FieldsViewGet is the base implementation of the 'FieldsViewGet' method which
	// gets the detailed composition of the requested view like fields, mixin,
	// view architecture.
	FieldsViewGet(args webtypes.FieldsViewGetParams) *webtypes.FieldsViewData
	// FileDelete adds the given file name to the checklist for the garbage collector
	FileDelete(fName string)
	// FileGC performs the garbage collection of the filestore.`,
	FileGC()
	// FileRead returns the base64 encoded content of the given fileName (relative path).
	// If binSize is true, it returns the file size instead as a human readable string`,
	FileRead(fileName string, binSize bool) string
	// FileStore returns the directory in which the attachment files are saved.
	FileStore() string
	// FileWrite writes value into the file given by sha. If the file already exists, nothing is done.
	//
	// It returns the filename of the written file.`,
	FileWrite(value string, sha string) string

	Filtered(test func(AttachmentSet) bool) AttachmentSet
	// ForceStorage forces all attachments to be stored in the currently configured storage
	ForceStorage() bool
	// FormatRelationFields returns the given data with all relation fields converted to int64 or []int64
	FormatRelationFields(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData
	// FullPath returns the given relative path as a full sanitized path
	FullPath(path string) string
	// GenerateAccessToken generates and store a random access token for these attachments
	GenerateAccessToken() []string
	// GenerateToken generates and return a single random accessToken.
	// Base implementation returns a UUID.
	GenerateToken() string
	// GetAttachmentByKey returns the attachment with the given key
	GetAttachmentByKey(key string, extraCond q.AttachmentCondition, orders []string) AttachmentSet
	// GetDatasRelatedValues compute the fields that depend on data
	GetDatasRelatedValues(data string, mimeType string) AttachmentData
	// GetFormviewAction returns an action to open the document.
	// This method is meant to be overridden in addons that want
	// to give specific view ids for example.`,
	GetFormviewAction() *actions.Action
	// GetFormviewID returns an view id to open the document with.
	// This method is meant to be overridden in addons that want
	// to give specific view ids for example.
	GetFormviewId() string
	// GetPath returns the relative and full paths of the file with the given sha.
	// This methods creates the directory if it does not exist.`,
	GetPath(sha string) (string, string)
	// GetRecord returns the Recordset with the given externalID. It panics if the externalID does not exist.
	GetRecord(externalID string) AttachmentSet
	// GetServeAttachment returns the serve attachments
	GetServeAttachment(url string, extraCond q.AttachmentCondition, extraFields models.FieldNames, orders []string) []models.RecordData
	// GetServingGroups returns groups allowed tp create and write serving attachments.
	//
	// An attachment record may be used as a fallback in the
	// http dispatch if its type field is set to "binary" and its url
	// field is set as the request's url. Only the groups returned by
	// this method are allowed to create and write on such records.
	GetServingGroups() GroupSet
	// GetToolbar returns a toolbar populated with the actions linked to this model
	GetToolbar() webtypes.Toolbar
	// GroupBy returns a new RecordSet grouped with the given GROUP BY expressions.
	GroupBy(exprs ...models.FieldName) AttachmentSet
	// Index computes the index content of the given filename, or binary data.
	Index(binData string, fileType string) string
	// Intersect returns a new RecordCollection with only the records that are both
	// in this RecordCollection and in the other RecordSet.
	Intersect(other AttachmentSet) AttachmentSet
	// InverseDatas stores the given data either in database or in file.
	InverseDatas(val string)
	// Limit returns a new RecordSet with only the first 'limit' records.
	Limit(limit int) AttachmentSet
	// Load looks up cache for fields of the RecordCollection and
	// query database for missing values.
	// fields are the fields to retrieve in the expression format,
	// i.e. "User.Profile.Age" or "user_id.profile_id.age".
	// If no fields are given, all DB columns of the RecordCollection's
	// model are retrieved.
	Load(fields ...models.FieldName) AttachmentSet
	// LoadViews returns the data for all the views and filters required in the parameters.
	LoadViews(args webtypes.LoadViewsArgs) *webtypes.LoadViewsData
	// ManageGroupsOnFields adds the invisible attribute to fields nodes if the current
	// user does not belong to one of the groups of the 'groups' attribute
	ManageGroupsOnFields(doc *etree.Document, fieldInfos map[string]*models.FieldInfo)
	// MarkForGC adds fName in a checklist for filestore garbage collection.
	MarkForGC(fName string)
	// NameGet retrieves the human readable name of this record.`,
	NameGet() string
	// NameSearch searches for records that have a display name matching the given
	// "name" pattern when compared with the given "operator", while also
	// matching the optional search domain ("args").
	//
	// This is used for example to provide suggestions based on a partial
	// value for a relational field. Sometimes be seen as the inverse
	// function of NameGet but it is not guaranteed to be.
	NameSearch(params webtypes.NameSearchParams) []webtypes.RecordIDWithName

	New(data AttachmentData) AttachmentSet
	// NormalizeM2MData converts the list of triplets received from the client into the final list of ids
	// to keep in the Many2Many relationship of this model through the given field.
	NormalizeM2MData(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{}
	// Offset returns a new RecordSet with only the records starting at offset
	Offset(offset int) AttachmentSet
	// Onchange returns the values that must be modified according to each field's Onchange
	// method in the pseudo-record given as params.Values`,
	Onchange(params models.OnchangeParams) models.OnchangeResult
	// OrderBy returns a new RecordSet ordered by the given ORDER BY expressions.
	// Each expression contains a field name and optionally one of "asc" or "desc", such as:
	//
	// rs.OrderBy("Company", "Name desc")
	OrderBy(exprs ...string) AttachmentSet
	// PostAddCreate is called after an attachment is uploaded.
	// It can be overridden to implement specific behaviour after attachment creation.
	PostAddCreate()
	// PostProcessCreateValues updates FK of related records created at the same time.
	//
	// This method is meant to be called with the second returned value of ProcessCreateValues
	// after record creation.
	PostProcessCreateValues(data models.RecordData)
	// PostProcessFilters transforms a map[models.FieldName]models.Conditioner
	// in a map[string][]interface{} which acts as a map of domains.
	PostProcessFilters(in map[models.FieldName]models.Conditioner) map[string][]interface{}
	// ProcessCreateValues updates the given data values for Create method to be
	// compatible with the ORM, in particular for relation fields.
	//
	// It returns a first FieldMap to be used as argument to the Create method, and
	// a second map to be used with a subsequent call to PostProcessCreateValues (for
	// updating FKs pointing to the newly created record).
	ProcessCreateValues(data models.RecordData) (models.RecordData, models.RecordData)
	// ProcessElementAttrs returns a modifiers map according to the domain
	// in attrs of the given element
	ProcessElementAttrs(element *etree.Element, fieldInfos map[string]*models.FieldInfo) map[string]interface{}
	// ProcessFieldElementModifiers modifies the given modifiers map by taking into account:
	// - 'invisible', 'readonly' and 'required' attributes in field tags
	// - 'ReadOnly' and 'Required' parameters of the model's field'
	// It returns the modified map.
	ProcessFieldElementModifiers(element *etree.Element, fieldInfos map[string]*models.FieldInfo, modifiers map[string]interface{}) map[string]interface{}
	// ProcessView makes all the necessary modifications to the view
	// arch and returns the new xml string.`,
	ProcessView(arch *etree.Document, fieldInfos map[string]*models.FieldInfo) string
	// ProcessWriteValues updates the given data values for Write method to be
	// compatible with the ORM, in particular for relation fields
	ProcessWriteValues(data models.RecordData) models.RecordData
	// Read reads the database and returns a slice of FieldMap of the given model.
	Read(fields models.FieldNames) []models.RecordData
	// ReadGroup gets a list of record aggregates according to the given parameters.
	ReadGroup(params webtypes.ReadGroupParams) []models.FieldMap
	// ReadGroupAllowedFields returns the fields by which a non-admin user is allowed to group by
	ReadGroupAllowedFields() models.FieldNames
	// SQLFromCondition returns the WHERE clause sql and arguments corresponding to
	// the given condition.`,
	SQLFromCondition(c *models.Condition) (string, models.SQLParams)

	Search(condition q.AttachmentCondition) AttachmentSet
	// SearchAll returns a RecordSet with all items of the table, regardless of the
	// current RecordSet query. It is mainly meant to be used on an empty RecordSet.
	SearchAll() AttachmentSet

	SearchByName(name string, op operator.Operator, additionalCond q.AttachmentCondition, limit int) AttachmentSet
	// SearchCount fetch from the database the number of records that match the RecordSet conditions.
	SearchCount() int
	// SearchDomain execute a search on the given domain.
	SearchDomain(domain domains.Domain) CommonMixinSet
	// SearchRead retrieves database records according to the filters defined in params.
	SearchRead(params webtypes.SearchParams) []models.RecordData

	Sorted(less func(AttachmentSet, AttachmentSet) bool) AttachmentSet
	// SortedByField returns a new record set with the same records as rc but sorted by the given field.
	// If reverse is true, the sort is done in reversed order
	SortedByField(namer models.FieldName, reverse bool) AttachmentSet
	// SortedDefault returns a new record set with the same records as rc but sorted according
	// to the default order of this model
	SortedDefault() AttachmentSet
	// Storage returns the configured storage mechanism for attachments (e.g. database, file, etc.)
	Storage() string
	// Subtract returns a RecordSet with the Records that are in this
	// RecordCollection but not in the given 'other' one.
	// The result is guaranteed to be a set of unique records.
	Subtract(other AttachmentSet) AttachmentSet
	// Sudo returns a new RecordSet with the given userID
	// or the superuser ID if not specified
	Sudo(userID ...int64) AttachmentSet
	// ToggleActive toggles the Active field of this object if it exists.
	ToggleActive()
	// Union returns a new RecordSet that is the union of this RecordSet and the given
	// "other" RecordSet. The result is guaranteed to be a set of unique records.
	Union(other AttachmentSet) AttachmentSet
	// Unlink deletes the given records in the database.
	Unlink() int64
	// WebReadGroup returns the result of a read_group (and optionally search for and read records inside each
	// group), and the total number of groups matching the search domain.
	WebReadGroup(params webtypes.WebReadGroupParams) webtypes.WebReadGroupResult
	// WebReadGroupPrivate performs a read_group and optionally a web_search_read for each group.
	WebReadGroupPrivate(params webtypes.WebReadGroupParams) []models.FieldMap
	// WebSearchRead performs a search_read and a search_count.
	WebSearchRead(params webtypes.SearchParams) webtypes.SearchReadResult
	// WithContext returns a copy of the current RecordSet with
	// its context extended by the given key and value.
	WithContext(key string, value interface{}) AttachmentSet
	// WithEnv returns a copy of the current RecordSet with the given Environment.
	WithEnv(env models.Environment) AttachmentSet
	// WithNewContext returns a copy of the current RecordSet with its context
	// replaced by the given one.
	WithNewContext(context *types.Context) AttachmentSet

	Write(data AttachmentData) bool
	// Super returns a RecordSet with a modified callstack so that call to the current
	// method will execute the next method layer.
	//
	// This method is meant to be used inside a method layer function to call its parent,
	// such as:
	//
	//    func (rs h.MyRecordSet) MyMethod() string {
	//        res := rs.Super().MyMethod()
	//        res += " ok!"
	//        return res
	//    }
	//
	// Calls to a different method than the current method will call its next layer only
	// if the current method has been called from a layer of the other method. Otherwise,
	// it will be the same as calling the other method directly.
	Super() AttachmentSet
	// ModelData returns a new AttachmentData object populated with the values
	// of the given FieldMap.
	ModelData(fMap models.FieldMap) AttachmentData
	// Records returns a slice with all the records of this RecordSet, as singleton RecordSets
	Records() []AttachmentSet
	// First returns the values of the first Record of the RecordSet as a pointer to a AttachmentData.
	//
	// If this RecordSet is empty, it returns an empty AttachmentData.
	First() AttachmentData
	// All returns the values of all Records of the RecordCollection as a slice of AttachmentData pointers.
	All() []AttachmentData
}

// AttachmentData is used to hold values of an Attachment object instance
// when creating or updating a AttachmentSet.
type AttachmentData interface {
	models.RecordData
	// Get returns the value of the given field.
	//
	// The field can be either its name or is JSON name.
	Get(field models.FieldName) interface{}
	// Has returns true if a value is set for the given field.
	//
	// The field can be either its name or is JSON name.
	Has(field models.FieldName) bool
	// Set sets the given field with the given value.
	// If the field already exists, then it is updated with value.
	// Otherwise, a new entry is inserted.
	//
	// It returns the given AttachmentData so that calls can be chained
	Set(field models.FieldName, value interface{}) AttachmentData
	// Unset removes the value of the given field if it exists.
	//
	// It returns the given ModelData so that calls can be chained
	Unset(field models.FieldName) AttachmentData
	// Copy returns a copy of this AttachmentData
	Copy() AttachmentData
	// MergeWith updates this AttachmentData with the given other AttachmentData
	// If a field of the other AttachmentData already exists here, the value is overridden,
	// otherwise, the field is inserted.
	MergeWith(other AttachmentData)
	// Keys returns the AttachmentData keys as a slice of strings
	Keys() (res []string)
	// OrderedKeys returns the keys of this AttachmentData ordered.
	//
	// This has the convenient side effect of having shorter paths come before longer paths,
	// which is particularly useful when creating or updating related records.
	OrderedKeys() []string
	// FieldNames returns the AttachmentData keys as a slice of FieldNames.
	FieldNames() models.FieldNames
	// AccessToken returns the value of the AccessToken field.
	// If this AccessToken is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	AccessToken() string
	// HasAccessToken returns true if AccessToken is set in this AttachmentData
	HasAccessToken() bool
	// SetAccessToken sets the AccessToken field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetAccessToken(value string) AttachmentData
	// UnsetAccessToken removes the value of the AccessToken field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetAccessToken() AttachmentData

	// CheckSum returns the value of the CheckSum field.
	// If this CheckSum is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	CheckSum() string
	// HasCheckSum returns true if CheckSum is set in this AttachmentData
	HasCheckSum() bool
	// SetCheckSum sets the CheckSum field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetCheckSum(value string) AttachmentData
	// UnsetCheckSum removes the value of the CheckSum field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetCheckSum() AttachmentData

	// Company returns the value of the Company field.
	// If this Company is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	Company() CompanySet
	// HasCompany returns true if Company is set in this AttachmentData
	HasCompany() bool
	// SetCompany sets the Company field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetCompany(value CompanySet) AttachmentData
	// UnsetCompany removes the value of the Company field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetCompany() AttachmentData

	// CreateCompany stores the related CompanyData to be used to create
	// a related record on the fly for Company.
	//
	// This method can be called multiple times to create multiple records
	CreateCompany(related CompanyData) AttachmentData
	// CreateDate returns the value of the CreateDate field.
	// If this CreateDate is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	CreateDate() dates.DateTime
	// HasCreateDate returns true if CreateDate is set in this AttachmentData
	HasCreateDate() bool
	// SetCreateDate sets the CreateDate field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetCreateDate(value dates.DateTime) AttachmentData
	// UnsetCreateDate removes the value of the CreateDate field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetCreateDate() AttachmentData

	// CreateUID returns the value of the CreateUID field.
	// If this CreateUID is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	CreateUID() int64
	// HasCreateUID returns true if CreateUID is set in this AttachmentData
	HasCreateUID() bool
	// SetCreateUID sets the CreateUID field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetCreateUID(value int64) AttachmentData
	// UnsetCreateUID removes the value of the CreateUID field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetCreateUID() AttachmentData

	// DBDatas returns the value of the DBDatas field.
	// If this DBDatas is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	DBDatas() string
	// HasDBDatas returns true if DBDatas is set in this AttachmentData
	HasDBDatas() bool
	// SetDBDatas sets the DBDatas field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetDBDatas(value string) AttachmentData
	// UnsetDBDatas removes the value of the DBDatas field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetDBDatas() AttachmentData

	// Datas returns the value of the Datas field.
	// If this Datas is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	Datas() string
	// HasDatas returns true if Datas is set in this AttachmentData
	HasDatas() bool
	// SetDatas sets the Datas field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetDatas(value string) AttachmentData
	// UnsetDatas removes the value of the Datas field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetDatas() AttachmentData

	// Description returns the value of the Description field.
	// If this Description is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	Description() string
	// HasDescription returns true if Description is set in this AttachmentData
	HasDescription() bool
	// SetDescription sets the Description field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetDescription(value string) AttachmentData
	// UnsetDescription removes the value of the Description field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetDescription() AttachmentData

	// DisplayName returns the value of the DisplayName field.
	// If this DisplayName is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	DisplayName() string
	// HasDisplayName returns true if DisplayName is set in this AttachmentData
	HasDisplayName() bool
	// SetDisplayName sets the DisplayName field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetDisplayName(value string) AttachmentData
	// UnsetDisplayName removes the value of the DisplayName field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetDisplayName() AttachmentData

	// FileSize returns the value of the FileSize field.
	// If this FileSize is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	FileSize() int
	// HasFileSize returns true if FileSize is set in this AttachmentData
	HasFileSize() bool
	// SetFileSize sets the FileSize field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetFileSize(value int) AttachmentData
	// UnsetFileSize removes the value of the FileSize field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetFileSize() AttachmentData

	// HexyaExternalID returns the value of the HexyaExternalID field.
	// If this HexyaExternalID is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	HexyaExternalID() string
	// HasHexyaExternalID returns true if HexyaExternalID is set in this AttachmentData
	HasHexyaExternalID() bool
	// SetHexyaExternalID sets the HexyaExternalID field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetHexyaExternalID(value string) AttachmentData
	// UnsetHexyaExternalID removes the value of the HexyaExternalID field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetHexyaExternalID() AttachmentData

	// HexyaVersion returns the value of the HexyaVersion field.
	// If this HexyaVersion is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	HexyaVersion() int
	// HasHexyaVersion returns true if HexyaVersion is set in this AttachmentData
	HasHexyaVersion() bool
	// SetHexyaVersion sets the HexyaVersion field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetHexyaVersion(value int) AttachmentData
	// UnsetHexyaVersion removes the value of the HexyaVersion field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetHexyaVersion() AttachmentData

	// ID returns the value of the ID field.
	// If this ID is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	ID() int64
	// HasID returns true if ID is set in this AttachmentData
	HasID() bool
	// SetID sets the ID field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetID(value int64) AttachmentData
	// UnsetID removes the value of the ID field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetID() AttachmentData

	// IndexContent returns the value of the IndexContent field.
	// If this IndexContent is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	IndexContent() string
	// HasIndexContent returns true if IndexContent is set in this AttachmentData
	HasIndexContent() bool
	// SetIndexContent sets the IndexContent field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetIndexContent(value string) AttachmentData
	// UnsetIndexContent removes the value of the IndexContent field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetIndexContent() AttachmentData

	// LastUpdate returns the value of the LastUpdate field.
	// If this LastUpdate is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	LastUpdate() dates.DateTime
	// HasLastUpdate returns true if LastUpdate is set in this AttachmentData
	HasLastUpdate() bool
	// SetLastUpdate sets the LastUpdate field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetLastUpdate(value dates.DateTime) AttachmentData
	// UnsetLastUpdate removes the value of the LastUpdate field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetLastUpdate() AttachmentData

	// MimeType returns the value of the MimeType field.
	// If this MimeType is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	MimeType() string
	// HasMimeType returns true if MimeType is set in this AttachmentData
	HasMimeType() bool
	// SetMimeType sets the MimeType field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetMimeType(value string) AttachmentData
	// UnsetMimeType removes the value of the MimeType field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetMimeType() AttachmentData

	// Name returns the value of the Name field.
	// If this Name is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	Name() string
	// HasName returns true if Name is set in this AttachmentData
	HasName() bool
	// SetName sets the Name field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetName(value string) AttachmentData
	// UnsetName removes the value of the Name field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetName() AttachmentData

	// Public returns the value of the Public field.
	// If this Public is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	Public() bool
	// HasPublic returns true if Public is set in this AttachmentData
	HasPublic() bool
	// SetPublic sets the Public field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetPublic(value bool) AttachmentData
	// UnsetPublic removes the value of the Public field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetPublic() AttachmentData

	// ResField returns the value of the ResField field.
	// If this ResField is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	ResField() string
	// HasResField returns true if ResField is set in this AttachmentData
	HasResField() bool
	// SetResField sets the ResField field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetResField(value string) AttachmentData
	// UnsetResField removes the value of the ResField field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetResField() AttachmentData

	// ResID returns the value of the ResID field.
	// If this ResID is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	ResID() int64
	// HasResID returns true if ResID is set in this AttachmentData
	HasResID() bool
	// SetResID sets the ResID field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetResID(value int64) AttachmentData
	// UnsetResID removes the value of the ResID field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetResID() AttachmentData

	// ResModel returns the value of the ResModel field.
	// If this ResModel is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	ResModel() string
	// HasResModel returns true if ResModel is set in this AttachmentData
	HasResModel() bool
	// SetResModel sets the ResModel field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetResModel(value string) AttachmentData
	// UnsetResModel removes the value of the ResModel field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetResModel() AttachmentData

	// ResName returns the value of the ResName field.
	// If this ResName is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	ResName() string
	// HasResName returns true if ResName is set in this AttachmentData
	HasResName() bool
	// SetResName sets the ResName field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetResName(value string) AttachmentData
	// UnsetResName removes the value of the ResName field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetResName() AttachmentData

	// StoreFname returns the value of the StoreFname field.
	// If this StoreFname is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	StoreFname() string
	// HasStoreFname returns true if StoreFname is set in this AttachmentData
	HasStoreFname() bool
	// SetStoreFname sets the StoreFname field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetStoreFname(value string) AttachmentData
	// UnsetStoreFname removes the value of the StoreFname field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetStoreFname() AttachmentData

	// Type returns the value of the Type field.
	// If this Type is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	Type() string
	// HasType returns true if Type is set in this AttachmentData
	HasType() bool
	// SetType sets the Type field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetType(value string) AttachmentData
	// UnsetType removes the value of the Type field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetType() AttachmentData

	// URL returns the value of the URL field.
	// If this URL is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	URL() string
	// HasURL returns true if URL is set in this AttachmentData
	HasURL() bool
	// SetURL sets the URL field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetURL(value string) AttachmentData
	// UnsetURL removes the value of the URL field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetURL() AttachmentData

	// WriteDate returns the value of the WriteDate field.
	// If this WriteDate is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	WriteDate() dates.DateTime
	// HasWriteDate returns true if WriteDate is set in this AttachmentData
	HasWriteDate() bool
	// SetWriteDate sets the WriteDate field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetWriteDate(value dates.DateTime) AttachmentData
	// UnsetWriteDate removes the value of the WriteDate field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetWriteDate() AttachmentData

	// WriteUID returns the value of the WriteUID field.
	// If this WriteUID is not set in this AttachmentData, then
	// the Go zero value for the type is returned.
	WriteUID() int64
	// HasWriteUID returns true if WriteUID is set in this AttachmentData
	HasWriteUID() bool
	// SetWriteUID sets the WriteUID field with the given value.
	// It returns this AttachmentData so that calls can be chained.
	SetWriteUID(value int64) AttachmentData
	// UnsetWriteUID removes the value of the WriteUID field if it exists.
	// It returns this AttachmentData so that calls can be chained.
	UnsetWriteUID() AttachmentData
}

// A AttachmentGroupAggregateRow holds a row of results of a query with a group by clause
type AttachmentGroupAggregateRow interface {
	// Values() returns the values of the actual query
	Values() AttachmentData
	// Count is the number of lines aggregated into this one
	Count() int
	// Condition can be used to query the aggregated rows separately if needed
	Condition() q.AttachmentCondition
}
