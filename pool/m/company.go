// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package m

import (
	"github.com/beevik/etree"
	"github.com/hexya-addons/web/domains"
	"github.com/hexya-addons/web/webtypes"
	"github.com/hexya-erp/hexya/src/actions"
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types"
	"github.com/hexya-erp/hexya/src/models/types/dates"
	"github.com/hexya-erp/pool/q"
)

// CompanySet is an autogenerated type to handle Company objects.
type CompanySet interface {
	models.RecordSet
	// CompanySetHexyaFunc is a dummy function to uniquely match interfaces.
	CompanySetHexyaFunc()
	// ForceLoad reloads the cache for the given fields and updates the ids of this CompanySet.
	//
	// If no fields are given, all DB columns of the Company model are retrieved.
	//
	// It also returns this CompanySet.
	ForceLoad(fields ...models.FieldName) CompanySet
	// Children is a getter for the value of the "Children" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Children() CompanySet
	// SetChildren is a setter for the value of the "Children" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetChildren panics if the RecordSet is empty.
	SetChildren(value CompanySet)
	// City is a getter for the value of the "City" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	City() string
	// SetCity is a setter for the value of the "City" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCity panics if the RecordSet is empty.
	SetCity(value string)
	// CompanyRegistry is a getter for the value of the "CompanyRegistry" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CompanyRegistry() string
	// SetCompanyRegistry is a setter for the value of the "CompanyRegistry" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCompanyRegistry panics if the RecordSet is empty.
	SetCompanyRegistry(value string)
	// Country is a getter for the value of the "Country" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Country() CountrySet
	// SetCountry is a setter for the value of the "Country" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCountry panics if the RecordSet is empty.
	SetCountry(value CountrySet)
	// CreateDate is a getter for the value of the "CreateDate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreateDate() dates.DateTime
	// SetCreateDate is a setter for the value of the "CreateDate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreateDate panics if the RecordSet is empty.
	SetCreateDate(value dates.DateTime)
	// CreateUID is a getter for the value of the "CreateUID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreateUID() int64
	// SetCreateUID is a setter for the value of the "CreateUID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreateUID panics if the RecordSet is empty.
	SetCreateUID(value int64)
	// Currency is a getter for the value of the "Currency" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Currency() CurrencySet
	// SetCurrency is a setter for the value of the "Currency" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCurrency panics if the RecordSet is empty.
	SetCurrency(value CurrencySet)
	// DashboardBackground is a getter for the value of the "DashboardBackground" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	DashboardBackground() string
	// SetDashboardBackground is a setter for the value of the "DashboardBackground" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDashboardBackground panics if the RecordSet is empty.
	SetDashboardBackground(value string)
	// DisplayName is a getter for the value of the "DisplayName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	DisplayName() string
	// SetDisplayName is a setter for the value of the "DisplayName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDisplayName panics if the RecordSet is empty.
	SetDisplayName(value string)
	// Email is a getter for the value of the "Email" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Email() string
	// SetEmail is a setter for the value of the "Email" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetEmail panics if the RecordSet is empty.
	SetEmail(value string)
	// Favicon is a getter for the value of the "Favicon" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Favicon() string
	// SetFavicon is a setter for the value of the "Favicon" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetFavicon panics if the RecordSet is empty.
	SetFavicon(value string)
	// HexyaExternalID is a getter for the value of the "HexyaExternalID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	HexyaExternalID() string
	// SetHexyaExternalID is a setter for the value of the "HexyaExternalID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetHexyaExternalID panics if the RecordSet is empty.
	SetHexyaExternalID(value string)
	// HexyaVersion is a getter for the value of the "HexyaVersion" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	HexyaVersion() int
	// SetHexyaVersion is a setter for the value of the "HexyaVersion" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetHexyaVersion panics if the RecordSet is empty.
	SetHexyaVersion(value int)
	// ID is a getter for the value of the "ID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ID() int64
	// SetID is a setter for the value of the "ID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetID panics if the RecordSet is empty.
	SetID(value int64)
	// LastUpdate is a getter for the value of the "LastUpdate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	LastUpdate() dates.DateTime
	// SetLastUpdate is a setter for the value of the "LastUpdate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLastUpdate panics if the RecordSet is empty.
	SetLastUpdate(value dates.DateTime)
	// Logo is a getter for the value of the "Logo" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Logo() string
	// SetLogo is a setter for the value of the "Logo" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLogo panics if the RecordSet is empty.
	SetLogo(value string)
	// LogoWeb is a getter for the value of the "LogoWeb" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	LogoWeb() string
	// SetLogoWeb is a setter for the value of the "LogoWeb" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLogoWeb panics if the RecordSet is empty.
	SetLogoWeb(value string)
	// Name is a getter for the value of the "Name" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Name() string
	// SetName is a setter for the value of the "Name" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetName panics if the RecordSet is empty.
	SetName(value string)
	// Parent is a getter for the value of the "Parent" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Parent() CompanySet
	// SetParent is a setter for the value of the "Parent" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetParent panics if the RecordSet is empty.
	SetParent(value CompanySet)
	// Partner is a getter for the value of the "Partner" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Partner() PartnerSet
	// SetPartner is a setter for the value of the "Partner" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetPartner panics if the RecordSet is empty.
	SetPartner(value PartnerSet)
	// Phone is a getter for the value of the "Phone" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Phone() string
	// SetPhone is a setter for the value of the "Phone" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetPhone panics if the RecordSet is empty.
	SetPhone(value string)
	// Sequence is a getter for the value of the "Sequence" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Sequence() int64
	// SetSequence is a setter for the value of the "Sequence" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetSequence panics if the RecordSet is empty.
	SetSequence(value int64)
	// State is a getter for the value of the "State" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	State() CountryStateSet
	// SetState is a setter for the value of the "State" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetState panics if the RecordSet is empty.
	SetState(value CountryStateSet)
	// Street is a getter for the value of the "Street" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Street() string
	// SetStreet is a setter for the value of the "Street" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetStreet panics if the RecordSet is empty.
	SetStreet(value string)
	// Street2 is a getter for the value of the "Street2" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Street2() string
	// SetStreet2 is a setter for the value of the "Street2" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetStreet2 panics if the RecordSet is empty.
	SetStreet2(value string)
	// Users is a getter for the value of the "Users" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Users() UserSet
	// SetUsers is a setter for the value of the "Users" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetUsers panics if the RecordSet is empty.
	SetUsers(value UserSet)
	// VAT is a getter for the value of the "VAT" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	VAT() string
	// SetVAT is a setter for the value of the "VAT" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetVAT panics if the RecordSet is empty.
	SetVAT(value string)
	// Website is a getter for the value of the "Website" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Website() string
	// SetWebsite is a setter for the value of the "Website" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWebsite panics if the RecordSet is empty.
	SetWebsite(value string)
	// WriteDate is a getter for the value of the "WriteDate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	WriteDate() dates.DateTime
	// SetWriteDate is a setter for the value of the "WriteDate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWriteDate panics if the RecordSet is empty.
	SetWriteDate(value dates.DateTime)
	// WriteUID is a getter for the value of the "WriteUID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	WriteUID() int64
	// SetWriteUID is a setter for the value of the "WriteUID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWriteUID panics if the RecordSet is empty.
	SetWriteUID(value int64)
	// Zip is a getter for the value of the "Zip" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Zip() string
	// SetZip is a setter for the value of the "Zip" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetZip panics if the RecordSet is empty.
	SetZip(value string)
	// ActionArchive sets Active=false on a recordset, by calling ToggleActive to take the
	// corresponding actions according to the model
	ActionArchive()
	// ActionUnarchive sets Active=true on a recordset, by calling ToggleActive to take the
	// corresponding actions according to the model
	ActionUnarchive()
	// AddDomainLimitOffset adds the given domain, limit, offset
	// and order to the current RecordSet query.
	AddDomainLimitOffset(domain domains.Domain, limit int, offset int, order string) CompanySet
	// AddModifiers adds the modifiers attribute nodes to given xml doc.
	AddModifiers(doc *etree.Document, fieldInfos map[string]*models.FieldInfo)
	// AddNameToRelations returns the given RecordData after getting the name of all 2one relation ids
	AddNamesToRelations(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData

	Aggregates(fieldNames ...models.FieldName) []CompanyGroupAggregateRow
	// Browse returns a new RecordSet with only the records with the given ids.
	// Note that this function is just a shorcut for Search on a list of ids.
	Browse(ids []int64) CompanySet
	// BrowseOne returns a new RecordSet with only the record with the given id.
	// Note that this function is just a shorcut for Search on a given id.
	BrowseOne(id int64) CompanySet

	CartesianProduct(others ...CompanySet) []CompanySet
	// CheckAccessRights verifies that the operation given by "operation" is allowed for
	// the current user according to the access rights.
	//
	// operation must be one of "read", "create", "unlink", "write".
	CheckAccessRights(args webtypes.CheckAccessRightsArgs) bool
	// CheckExecutionPermission panics if the current user is not allowed to execute the given method.
	//
	// If dontPanic is false, this function will panic, otherwise it returns true
	// if the user has the execution permission and false otherwise.
	CheckExecutionPermission(method *models.Method, dontPanic ...bool) bool
	// CheckParent checks that there is no recursion in the company tree`,
	CheckParent()
	// CheckRecursion verifies that there is no loop in a hierarchical structure of records,
	// by following the parent relationship using the 'Parent' field until a loop is detected or
	// until a top-level record is found.
	//
	// It returns true if no loop was found, false otherwise`,
	CheckRecursion() bool
	// CompanyDefaultGet returns the default company (usually the user's company).`,
	CompanyDefaultGet() CompanySet
	// ComputeDisplayName updates the DisplayName field with the result of NameGet
	ComputeDisplayName() *models.ModelData
	// ComputeLastUpdate returns the last datetime at which the record has been updated.
	ComputeLastUpdate() *models.ModelData
	// ComputeLogoWeb returns a resized version of the company logo
	ComputeLogoWeb() CompanyData

	Copy(overrides CompanyData) CompanySet

	CopyData(overrides CompanyData) CompanyData

	Create(data CompanyData) CompanySet

	DefaultGet() CompanyData
	// Enqueue queues the execution of the given method with the given arguments on this recordset.
	// description will be the name given to the job.
	Enqueue(description string, method models.Methoder, arguments ...interface{}) QueueJobSet
	// Equals returns true if this RecordSet is the same as other
	// i.e. they are of the same model and have the same ids
	Equals(other CompanySet) bool
	// ExecuteO2MActions executes the actions on one2many fields given by
	// the list of triplets received from the client
	ExecuteO2MActions(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{}
	// Fetch query the database with the current filter and returns a RecordSet
	// with the queries ids.
	//
	// Fetch is lazy and only return ids. Use Load() instead if you want to fetch all fields.
	Fetch() CompanySet
	// FieldGet returns the definition of the given field.
	// The string, help, and selection (if present) attributes are translated.
	FieldGet(field models.FieldName) *models.FieldInfo
	// FieldsGet returns the definition of each field.
	// The embedded fields are included.
	// The string, help, and selection (if present) attributes are translated.
	//
	// The result map is indexed by the fields JSON names.
	FieldsGet(args models.FieldsGetArgs) map[string]*models.FieldInfo
	// FieldsViewGet is the base implementation of the 'FieldsViewGet' method which
	// gets the detailed composition of the requested view like fields, mixin,
	// view architecture.
	FieldsViewGet(args webtypes.FieldsViewGetParams) *webtypes.FieldsViewData

	Filtered(test func(CompanySet) bool) CompanySet
	// FormatRelationFields returns the given data with all relation fields converted to int64 or []int64
	FormatRelationFields(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData
	// GetEuro returns the currency with rate 1 (euro by default, unless changed by the user)
	GetEuro() CurrencySet
	// GetFormviewAction returns an action to open the document.
	// This method is meant to be overridden in addons that want
	// to give specific view ids for example.`,
	GetFormviewAction() *actions.Action
	// GetFormviewID returns an view id to open the document with.
	// This method is meant to be overridden in addons that want
	// to give specific view ids for example.
	GetFormviewId() string
	// GetRecord returns the Recordset with the given externalID. It panics if the externalID does not exist.
	GetRecord(externalID string) CompanySet
	// GetToolbar returns a toolbar populated with the actions linked to this model
	GetToolbar() webtypes.Toolbar
	// GroupBy returns a new RecordSet grouped with the given GROUP BY expressions.
	GroupBy(exprs ...models.FieldName) CompanySet
	// Intersect returns a new RecordCollection with only the records that are both
	// in this RecordCollection and in the other RecordSet.
	Intersect(other CompanySet) CompanySet
	// Limit returns a new RecordSet with only the first 'limit' records.
	Limit(limit int) CompanySet
	// Load looks up cache for fields of the RecordCollection and
	// query database for missing values.
	// fields are the fields to retrieve in the expression format,
	// i.e. "User.Profile.Age" or "user_id.profile_id.age".
	// If no fields are given, all DB columns of the RecordCollection's
	// model are retrieved.
	Load(fields ...models.FieldName) CompanySet
	// LoadViews returns the data for all the views and filters required in the parameters.
	LoadViews(args webtypes.LoadViewsArgs) *webtypes.LoadViewsData
	// ManageGroupsOnFields adds the invisible attribute to fields nodes if the current
	// user does not belong to one of the groups of the 'groups' attribute
	ManageGroupsOnFields(doc *etree.Document, fieldInfos map[string]*models.FieldInfo)
	// NameGet retrieves the human readable name of this record.`,
	NameGet() string
	// NameSearch searches for records that have a display name matching the given
	// "name" pattern when compared with the given "operator", while also
	// matching the optional search domain ("args").
	//
	// This is used for example to provide suggestions based on a partial
	// value for a relational field. Sometimes be seen as the inverse
	// function of NameGet but it is not guaranteed to be.
	NameSearch(params webtypes.NameSearchParams) []webtypes.RecordIDWithName

	New(data CompanyData) CompanySet
	// NormalizeM2MData converts the list of triplets received from the client into the final list of ids
	// to keep in the Many2Many relationship of this model through the given field.
	NormalizeM2MData(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{}
	// Offset returns a new RecordSet with only the records starting at offset
	Offset(offset int) CompanySet
	// OnChangeCountry updates the currency of this company on a country change
	OnChangeCountry() CompanyData
	// OnchangeState sets the country to the country of the state when you select one.
	OnChangeState() CompanyData
	// Onchange returns the values that must be modified according to each field's Onchange
	// method in the pseudo-record given as params.Values`,
	Onchange(params models.OnchangeParams) models.OnchangeResult
	// OrderBy returns a new RecordSet ordered by the given ORDER BY expressions.
	// Each expression contains a field name and optionally one of "asc" or "desc", such as:
	//
	// rs.OrderBy("Company", "Name desc")
	OrderBy(exprs ...string) CompanySet
	// PostProcessCreateValues updates FK of related records created at the same time.
	//
	// This method is meant to be called with the second returned value of ProcessCreateValues
	// after record creation.
	PostProcessCreateValues(data models.RecordData)
	// PostProcessFilters transforms a map[models.FieldName]models.Conditioner
	// in a map[string][]interface{} which acts as a map of domains.
	PostProcessFilters(in map[models.FieldName]models.Conditioner) map[string][]interface{}
	// ProcessCreateValues updates the given data values for Create method to be
	// compatible with the ORM, in particular for relation fields.
	//
	// It returns a first FieldMap to be used as argument to the Create method, and
	// a second map to be used with a subsequent call to PostProcessCreateValues (for
	// updating FKs pointing to the newly created record).
	ProcessCreateValues(data models.RecordData) (models.RecordData, models.RecordData)
	// ProcessElementAttrs returns a modifiers map according to the domain
	// in attrs of the given element
	ProcessElementAttrs(element *etree.Element, fieldInfos map[string]*models.FieldInfo) map[string]interface{}
	// ProcessFieldElementModifiers modifies the given modifiers map by taking into account:
	// - 'invisible', 'readonly' and 'required' attributes in field tags
	// - 'ReadOnly' and 'Required' parameters of the model's field'
	// It returns the modified map.
	ProcessFieldElementModifiers(element *etree.Element, fieldInfos map[string]*models.FieldInfo, modifiers map[string]interface{}) map[string]interface{}
	// ProcessView makes all the necessary modifications to the view
	// arch and returns the new xml string.`,
	ProcessView(arch *etree.Document, fieldInfos map[string]*models.FieldInfo) string
	// ProcessWriteValues updates the given data values for Write method to be
	// compatible with the ORM, in particular for relation fields
	ProcessWriteValues(data models.RecordData) models.RecordData
	// Read reads the database and returns a slice of FieldMap of the given model.
	Read(fields models.FieldNames) []models.RecordData
	// ReadGroup gets a list of record aggregates according to the given parameters.
	ReadGroup(params webtypes.ReadGroupParams) []models.FieldMap
	// SQLFromCondition returns the WHERE clause sql and arguments corresponding to
	// the given condition.`,
	SQLFromCondition(c *models.Condition) (string, models.SQLParams)

	Search(condition q.CompanyCondition) CompanySet
	// SearchAll returns a RecordSet with all items of the table, regardless of the
	// current RecordSet query. It is mainly meant to be used on an empty RecordSet.
	SearchAll() CompanySet

	SearchByName(name string, op operator.Operator, additionalCond q.CompanyCondition, limit int) CompanySet
	// SearchCount fetch from the database the number of records that match the RecordSet conditions.
	SearchCount() int
	// SearchDomain execute a search on the given domain.
	SearchDomain(domain domains.Domain) CommonMixinSet
	// SearchRead retrieves database records according to the filters defined in params.
	SearchRead(params webtypes.SearchParams) []models.RecordData

	Sorted(less func(CompanySet, CompanySet) bool) CompanySet
	// SortedByField returns a new record set with the same records as rc but sorted by the given field.
	// If reverse is true, the sort is done in reversed order
	SortedByField(namer models.FieldName, reverse bool) CompanySet
	// SortedDefault returns a new record set with the same records as rc but sorted according
	// to the default order of this model
	SortedDefault() CompanySet
	// Subtract returns a RecordSet with the Records that are in this
	// RecordCollection but not in the given 'other' one.
	// The result is guaranteed to be a set of unique records.
	Subtract(other CompanySet) CompanySet
	// Sudo returns a new RecordSet with the given userID
	// or the superuser ID if not specified
	Sudo(userID ...int64) CompanySet
	// ToggleActive toggles the Active field of this object if it exists.
	ToggleActive()
	// Union returns a new RecordSet that is the union of this RecordSet and the given
	// "other" RecordSet. The result is guaranteed to be a set of unique records.
	Union(other CompanySet) CompanySet
	// Unlink deletes the given records in the database.
	Unlink() int64
	// WebReadGroup returns the result of a read_group (and optionally search for and read records inside each
	// group), and the total number of groups matching the search domain.
	WebReadGroup(params webtypes.WebReadGroupParams) webtypes.WebReadGroupResult
	// WebReadGroupPrivate performs a read_group and optionally a web_search_read for each group.
	WebReadGroupPrivate(params webtypes.WebReadGroupParams) []models.FieldMap
	// WebSearchRead performs a search_read and a search_count.
	WebSearchRead(params webtypes.SearchParams) webtypes.SearchReadResult
	// WithContext returns a copy of the current RecordSet with
	// its context extended by the given key and value.
	WithContext(key string, value interface{}) CompanySet
	// WithEnv returns a copy of the current RecordSet with the given Environment.
	WithEnv(env models.Environment) CompanySet
	// WithNewContext returns a copy of the current RecordSet with its context
	// replaced by the given one.
	WithNewContext(context *types.Context) CompanySet

	Write(data CompanyData) bool
	// Super returns a RecordSet with a modified callstack so that call to the current
	// method will execute the next method layer.
	//
	// This method is meant to be used inside a method layer function to call its parent,
	// such as:
	//
	//    func (rs h.MyRecordSet) MyMethod() string {
	//        res := rs.Super().MyMethod()
	//        res += " ok!"
	//        return res
	//    }
	//
	// Calls to a different method than the current method will call its next layer only
	// if the current method has been called from a layer of the other method. Otherwise,
	// it will be the same as calling the other method directly.
	Super() CompanySet
	// ModelData returns a new CompanyData object populated with the values
	// of the given FieldMap.
	ModelData(fMap models.FieldMap) CompanyData
	// Records returns a slice with all the records of this RecordSet, as singleton RecordSets
	Records() []CompanySet
	// First returns the values of the first Record of the RecordSet as a pointer to a CompanyData.
	//
	// If this RecordSet is empty, it returns an empty CompanyData.
	First() CompanyData
	// All returns the values of all Records of the RecordCollection as a slice of CompanyData pointers.
	All() []CompanyData
}

// CompanyData is used to hold values of an Company object instance
// when creating or updating a CompanySet.
type CompanyData interface {
	models.RecordData
	// Get returns the value of the given field.
	//
	// The field can be either its name or is JSON name.
	Get(field models.FieldName) interface{}
	// Has returns true if a value is set for the given field.
	//
	// The field can be either its name or is JSON name.
	Has(field models.FieldName) bool
	// Set sets the given field with the given value.
	// If the field already exists, then it is updated with value.
	// Otherwise, a new entry is inserted.
	//
	// It returns the given CompanyData so that calls can be chained
	Set(field models.FieldName, value interface{}) CompanyData
	// Unset removes the value of the given field if it exists.
	//
	// It returns the given ModelData so that calls can be chained
	Unset(field models.FieldName) CompanyData
	// Copy returns a copy of this CompanyData
	Copy() CompanyData
	// MergeWith updates this CompanyData with the given other CompanyData
	// If a field of the other CompanyData already exists here, the value is overridden,
	// otherwise, the field is inserted.
	MergeWith(other CompanyData)
	// Keys returns the CompanyData keys as a slice of strings
	Keys() (res []string)
	// OrderedKeys returns the keys of this CompanyData ordered.
	//
	// This has the convenient side effect of having shorter paths come before longer paths,
	// which is particularly useful when creating or updating related records.
	OrderedKeys() []string
	// FieldNames returns the CompanyData keys as a slice of FieldNames.
	FieldNames() models.FieldNames
	// Children returns the value of the Children field.
	// If this Children is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Children() CompanySet
	// HasChildren returns true if Children is set in this CompanyData
	HasChildren() bool
	// SetChildren sets the Children field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetChildren(value CompanySet) CompanyData
	// UnsetChildren removes the value of the Children field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetChildren() CompanyData

	// CreateChildren stores the related CompanyData to be used to create
	// a related record on the fly for Children.
	//
	// This method can be called multiple times to create multiple records
	CreateChildren(related CompanyData) CompanyData
	// City returns the value of the City field.
	// If this City is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	City() string
	// HasCity returns true if City is set in this CompanyData
	HasCity() bool
	// SetCity sets the City field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetCity(value string) CompanyData
	// UnsetCity removes the value of the City field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetCity() CompanyData

	// CompanyRegistry returns the value of the CompanyRegistry field.
	// If this CompanyRegistry is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	CompanyRegistry() string
	// HasCompanyRegistry returns true if CompanyRegistry is set in this CompanyData
	HasCompanyRegistry() bool
	// SetCompanyRegistry sets the CompanyRegistry field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetCompanyRegistry(value string) CompanyData
	// UnsetCompanyRegistry removes the value of the CompanyRegistry field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetCompanyRegistry() CompanyData

	// Country returns the value of the Country field.
	// If this Country is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Country() CountrySet
	// HasCountry returns true if Country is set in this CompanyData
	HasCountry() bool
	// SetCountry sets the Country field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetCountry(value CountrySet) CompanyData
	// UnsetCountry removes the value of the Country field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetCountry() CompanyData

	// CreateCountry stores the related CountryData to be used to create
	// a related record on the fly for Country.
	//
	// This method can be called multiple times to create multiple records
	CreateCountry(related CountryData) CompanyData
	// CreateDate returns the value of the CreateDate field.
	// If this CreateDate is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	CreateDate() dates.DateTime
	// HasCreateDate returns true if CreateDate is set in this CompanyData
	HasCreateDate() bool
	// SetCreateDate sets the CreateDate field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetCreateDate(value dates.DateTime) CompanyData
	// UnsetCreateDate removes the value of the CreateDate field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetCreateDate() CompanyData

	// CreateUID returns the value of the CreateUID field.
	// If this CreateUID is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	CreateUID() int64
	// HasCreateUID returns true if CreateUID is set in this CompanyData
	HasCreateUID() bool
	// SetCreateUID sets the CreateUID field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetCreateUID(value int64) CompanyData
	// UnsetCreateUID removes the value of the CreateUID field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetCreateUID() CompanyData

	// Currency returns the value of the Currency field.
	// If this Currency is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Currency() CurrencySet
	// HasCurrency returns true if Currency is set in this CompanyData
	HasCurrency() bool
	// SetCurrency sets the Currency field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetCurrency(value CurrencySet) CompanyData
	// UnsetCurrency removes the value of the Currency field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetCurrency() CompanyData

	// CreateCurrency stores the related CurrencyData to be used to create
	// a related record on the fly for Currency.
	//
	// This method can be called multiple times to create multiple records
	CreateCurrency(related CurrencyData) CompanyData
	// DashboardBackground returns the value of the DashboardBackground field.
	// If this DashboardBackground is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	DashboardBackground() string
	// HasDashboardBackground returns true if DashboardBackground is set in this CompanyData
	HasDashboardBackground() bool
	// SetDashboardBackground sets the DashboardBackground field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetDashboardBackground(value string) CompanyData
	// UnsetDashboardBackground removes the value of the DashboardBackground field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetDashboardBackground() CompanyData

	// DisplayName returns the value of the DisplayName field.
	// If this DisplayName is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	DisplayName() string
	// HasDisplayName returns true if DisplayName is set in this CompanyData
	HasDisplayName() bool
	// SetDisplayName sets the DisplayName field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetDisplayName(value string) CompanyData
	// UnsetDisplayName removes the value of the DisplayName field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetDisplayName() CompanyData

	// Email returns the value of the Email field.
	// If this Email is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Email() string
	// HasEmail returns true if Email is set in this CompanyData
	HasEmail() bool
	// SetEmail sets the Email field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetEmail(value string) CompanyData
	// UnsetEmail removes the value of the Email field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetEmail() CompanyData

	// Favicon returns the value of the Favicon field.
	// If this Favicon is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Favicon() string
	// HasFavicon returns true if Favicon is set in this CompanyData
	HasFavicon() bool
	// SetFavicon sets the Favicon field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetFavicon(value string) CompanyData
	// UnsetFavicon removes the value of the Favicon field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetFavicon() CompanyData

	// HexyaExternalID returns the value of the HexyaExternalID field.
	// If this HexyaExternalID is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	HexyaExternalID() string
	// HasHexyaExternalID returns true if HexyaExternalID is set in this CompanyData
	HasHexyaExternalID() bool
	// SetHexyaExternalID sets the HexyaExternalID field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetHexyaExternalID(value string) CompanyData
	// UnsetHexyaExternalID removes the value of the HexyaExternalID field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetHexyaExternalID() CompanyData

	// HexyaVersion returns the value of the HexyaVersion field.
	// If this HexyaVersion is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	HexyaVersion() int
	// HasHexyaVersion returns true if HexyaVersion is set in this CompanyData
	HasHexyaVersion() bool
	// SetHexyaVersion sets the HexyaVersion field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetHexyaVersion(value int) CompanyData
	// UnsetHexyaVersion removes the value of the HexyaVersion field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetHexyaVersion() CompanyData

	// ID returns the value of the ID field.
	// If this ID is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	ID() int64
	// HasID returns true if ID is set in this CompanyData
	HasID() bool
	// SetID sets the ID field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetID(value int64) CompanyData
	// UnsetID removes the value of the ID field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetID() CompanyData

	// LastUpdate returns the value of the LastUpdate field.
	// If this LastUpdate is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	LastUpdate() dates.DateTime
	// HasLastUpdate returns true if LastUpdate is set in this CompanyData
	HasLastUpdate() bool
	// SetLastUpdate sets the LastUpdate field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetLastUpdate(value dates.DateTime) CompanyData
	// UnsetLastUpdate removes the value of the LastUpdate field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetLastUpdate() CompanyData

	// Logo returns the value of the Logo field.
	// If this Logo is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Logo() string
	// HasLogo returns true if Logo is set in this CompanyData
	HasLogo() bool
	// SetLogo sets the Logo field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetLogo(value string) CompanyData
	// UnsetLogo removes the value of the Logo field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetLogo() CompanyData

	// LogoWeb returns the value of the LogoWeb field.
	// If this LogoWeb is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	LogoWeb() string
	// HasLogoWeb returns true if LogoWeb is set in this CompanyData
	HasLogoWeb() bool
	// SetLogoWeb sets the LogoWeb field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetLogoWeb(value string) CompanyData
	// UnsetLogoWeb removes the value of the LogoWeb field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetLogoWeb() CompanyData

	// Name returns the value of the Name field.
	// If this Name is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Name() string
	// HasName returns true if Name is set in this CompanyData
	HasName() bool
	// SetName sets the Name field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetName(value string) CompanyData
	// UnsetName removes the value of the Name field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetName() CompanyData

	// Parent returns the value of the Parent field.
	// If this Parent is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Parent() CompanySet
	// HasParent returns true if Parent is set in this CompanyData
	HasParent() bool
	// SetParent sets the Parent field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetParent(value CompanySet) CompanyData
	// UnsetParent removes the value of the Parent field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetParent() CompanyData

	// CreateParent stores the related CompanyData to be used to create
	// a related record on the fly for Parent.
	//
	// This method can be called multiple times to create multiple records
	CreateParent(related CompanyData) CompanyData
	// Partner returns the value of the Partner field.
	// If this Partner is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Partner() PartnerSet
	// HasPartner returns true if Partner is set in this CompanyData
	HasPartner() bool
	// SetPartner sets the Partner field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetPartner(value PartnerSet) CompanyData
	// UnsetPartner removes the value of the Partner field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetPartner() CompanyData

	// CreatePartner stores the related PartnerData to be used to create
	// a related record on the fly for Partner.
	//
	// This method can be called multiple times to create multiple records
	CreatePartner(related PartnerData) CompanyData
	// Phone returns the value of the Phone field.
	// If this Phone is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Phone() string
	// HasPhone returns true if Phone is set in this CompanyData
	HasPhone() bool
	// SetPhone sets the Phone field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetPhone(value string) CompanyData
	// UnsetPhone removes the value of the Phone field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetPhone() CompanyData

	// Sequence returns the value of the Sequence field.
	// If this Sequence is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Sequence() int64
	// HasSequence returns true if Sequence is set in this CompanyData
	HasSequence() bool
	// SetSequence sets the Sequence field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetSequence(value int64) CompanyData
	// UnsetSequence removes the value of the Sequence field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetSequence() CompanyData

	// State returns the value of the State field.
	// If this State is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	State() CountryStateSet
	// HasState returns true if State is set in this CompanyData
	HasState() bool
	// SetState sets the State field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetState(value CountryStateSet) CompanyData
	// UnsetState removes the value of the State field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetState() CompanyData

	// CreateState stores the related CountryStateData to be used to create
	// a related record on the fly for State.
	//
	// This method can be called multiple times to create multiple records
	CreateState(related CountryStateData) CompanyData
	// Street returns the value of the Street field.
	// If this Street is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Street() string
	// HasStreet returns true if Street is set in this CompanyData
	HasStreet() bool
	// SetStreet sets the Street field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetStreet(value string) CompanyData
	// UnsetStreet removes the value of the Street field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetStreet() CompanyData

	// Street2 returns the value of the Street2 field.
	// If this Street2 is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Street2() string
	// HasStreet2 returns true if Street2 is set in this CompanyData
	HasStreet2() bool
	// SetStreet2 sets the Street2 field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetStreet2(value string) CompanyData
	// UnsetStreet2 removes the value of the Street2 field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetStreet2() CompanyData

	// Users returns the value of the Users field.
	// If this Users is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Users() UserSet
	// HasUsers returns true if Users is set in this CompanyData
	HasUsers() bool
	// SetUsers sets the Users field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetUsers(value UserSet) CompanyData
	// UnsetUsers removes the value of the Users field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetUsers() CompanyData

	// CreateUsers stores the related UserData to be used to create
	// a related record on the fly for Users.
	//
	// This method can be called multiple times to create multiple records
	CreateUsers(related UserData) CompanyData
	// VAT returns the value of the VAT field.
	// If this VAT is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	VAT() string
	// HasVAT returns true if VAT is set in this CompanyData
	HasVAT() bool
	// SetVAT sets the VAT field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetVAT(value string) CompanyData
	// UnsetVAT removes the value of the VAT field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetVAT() CompanyData

	// Website returns the value of the Website field.
	// If this Website is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Website() string
	// HasWebsite returns true if Website is set in this CompanyData
	HasWebsite() bool
	// SetWebsite sets the Website field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetWebsite(value string) CompanyData
	// UnsetWebsite removes the value of the Website field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetWebsite() CompanyData

	// WriteDate returns the value of the WriteDate field.
	// If this WriteDate is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	WriteDate() dates.DateTime
	// HasWriteDate returns true if WriteDate is set in this CompanyData
	HasWriteDate() bool
	// SetWriteDate sets the WriteDate field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetWriteDate(value dates.DateTime) CompanyData
	// UnsetWriteDate removes the value of the WriteDate field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetWriteDate() CompanyData

	// WriteUID returns the value of the WriteUID field.
	// If this WriteUID is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	WriteUID() int64
	// HasWriteUID returns true if WriteUID is set in this CompanyData
	HasWriteUID() bool
	// SetWriteUID sets the WriteUID field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetWriteUID(value int64) CompanyData
	// UnsetWriteUID removes the value of the WriteUID field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetWriteUID() CompanyData

	// Zip returns the value of the Zip field.
	// If this Zip is not set in this CompanyData, then
	// the Go zero value for the type is returned.
	Zip() string
	// HasZip returns true if Zip is set in this CompanyData
	HasZip() bool
	// SetZip sets the Zip field with the given value.
	// It returns this CompanyData so that calls can be chained.
	SetZip(value string) CompanyData
	// UnsetZip removes the value of the Zip field if it exists.
	// It returns this CompanyData so that calls can be chained.
	UnsetZip() CompanyData
}

// A CompanyGroupAggregateRow holds a row of results of a query with a group by clause
type CompanyGroupAggregateRow interface {
	// Values() returns the values of the actual query
	Values() CompanyData
	// Count is the number of lines aggregated into this one
	Count() int
	// Condition can be used to query the aggregated rows separately if needed
	Condition() q.CompanyCondition
}
