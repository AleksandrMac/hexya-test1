// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package m

import (
	"github.com/beevik/etree"
	"github.com/hexya-addons/web/domains"
	"github.com/hexya-addons/web/webtypes"
	"github.com/hexya-erp/hexya/src/actions"
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types"
	"github.com/hexya-erp/hexya/src/models/types/dates"
	"github.com/hexya-erp/pool/q"
)

// PartnerSet is an autogenerated type to handle Partner objects.
type PartnerSet interface {
	models.RecordSet
	// PartnerSetHexyaFunc is a dummy function to uniquely match interfaces.
	PartnerSetHexyaFunc()
	// ForceLoad reloads the cache for the given fields and updates the ids of this PartnerSet.
	//
	// If no fields are given, all DB columns of the Partner model are retrieved.
	//
	// It also returns this PartnerSet.
	ForceLoad(fields ...models.FieldName) PartnerSet
	// Active is a getter for the value of the "Active" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Active() bool
	// SetActive is a setter for the value of the "Active" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetActive panics if the RecordSet is empty.
	SetActive(value bool)
	// ActiveLangCount is a getter for the value of the "ActiveLangCount" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ActiveLangCount() int
	// SetActiveLangCount is a setter for the value of the "ActiveLangCount" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetActiveLangCount panics if the RecordSet is empty.
	SetActiveLangCount(value int)
	// Banks is a getter for the value of the "Banks" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Banks() BankAccountSet
	// SetBanks is a setter for the value of the "Banks" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetBanks panics if the RecordSet is empty.
	SetBanks(value BankAccountSet)
	// Barcode is a getter for the value of the "Barcode" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Barcode() string
	// SetBarcode is a setter for the value of the "Barcode" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetBarcode panics if the RecordSet is empty.
	SetBarcode(value string)
	// Categories is a getter for the value of the "Categories" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Categories() PartnerCategorySet
	// SetCategories is a setter for the value of the "Categories" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCategories panics if the RecordSet is empty.
	SetCategories(value PartnerCategorySet)
	// Children is a getter for the value of the "Children" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Children() PartnerSet
	// SetChildren is a setter for the value of the "Children" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetChildren panics if the RecordSet is empty.
	SetChildren(value PartnerSet)
	// City is a getter for the value of the "City" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	City() string
	// SetCity is a setter for the value of the "City" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCity panics if the RecordSet is empty.
	SetCity(value string)
	// Color is a getter for the value of the "Color" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Color() int64
	// SetColor is a setter for the value of the "Color" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetColor panics if the RecordSet is empty.
	SetColor(value int64)
	// Comment is a getter for the value of the "Comment" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Comment() string
	// SetComment is a setter for the value of the "Comment" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetComment panics if the RecordSet is empty.
	SetComment(value string)
	// CommercialCompanyName is a getter for the value of the "CommercialCompanyName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CommercialCompanyName() string
	// SetCommercialCompanyName is a setter for the value of the "CommercialCompanyName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCommercialCompanyName panics if the RecordSet is empty.
	SetCommercialCompanyName(value string)
	// CommercialPartner is a getter for the value of the "CommercialPartner" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CommercialPartner() PartnerSet
	// SetCommercialPartner is a setter for the value of the "CommercialPartner" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCommercialPartner panics if the RecordSet is empty.
	SetCommercialPartner(value PartnerSet)
	// Company is a getter for the value of the "Company" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Company() CompanySet
	// SetCompany is a setter for the value of the "Company" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCompany panics if the RecordSet is empty.
	SetCompany(value CompanySet)
	// CompanyName is a getter for the value of the "CompanyName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CompanyName() string
	// SetCompanyName is a setter for the value of the "CompanyName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCompanyName panics if the RecordSet is empty.
	SetCompanyName(value string)
	// CompanyType is a getter for the value of the "CompanyType" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CompanyType() string
	// SetCompanyType is a setter for the value of the "CompanyType" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCompanyType panics if the RecordSet is empty.
	SetCompanyType(value string)
	// ContactAddress is a getter for the value of the "ContactAddress" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ContactAddress() string
	// SetContactAddress is a setter for the value of the "ContactAddress" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetContactAddress panics if the RecordSet is empty.
	SetContactAddress(value string)
	// Country is a getter for the value of the "Country" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Country() CountrySet
	// SetCountry is a setter for the value of the "Country" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCountry panics if the RecordSet is empty.
	SetCountry(value CountrySet)
	// CreateDate is a getter for the value of the "CreateDate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreateDate() dates.DateTime
	// SetCreateDate is a setter for the value of the "CreateDate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreateDate panics if the RecordSet is empty.
	SetCreateDate(value dates.DateTime)
	// CreateUID is a getter for the value of the "CreateUID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreateUID() int64
	// SetCreateUID is a setter for the value of the "CreateUID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreateUID panics if the RecordSet is empty.
	SetCreateUID(value int64)
	// CreditLimit is a getter for the value of the "CreditLimit" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	CreditLimit() float64
	// SetCreditLimit is a setter for the value of the "CreditLimit" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetCreditLimit panics if the RecordSet is empty.
	SetCreditLimit(value float64)
	// Date is a getter for the value of the "Date" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Date() dates.Date
	// SetDate is a setter for the value of the "Date" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDate panics if the RecordSet is empty.
	SetDate(value dates.Date)
	// DisplayName is a getter for the value of the "DisplayName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	DisplayName() string
	// SetDisplayName is a setter for the value of the "DisplayName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetDisplayName panics if the RecordSet is empty.
	SetDisplayName(value string)
	// Email is a getter for the value of the "Email" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Email() string
	// SetEmail is a setter for the value of the "Email" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetEmail panics if the RecordSet is empty.
	SetEmail(value string)
	// EmailFormatted is a getter for the value of the "EmailFormatted" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	EmailFormatted() string
	// SetEmailFormatted is a setter for the value of the "EmailFormatted" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetEmailFormatted panics if the RecordSet is empty.
	SetEmailFormatted(value string)
	// Employee is a getter for the value of the "Employee" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Employee() bool
	// SetEmployee is a setter for the value of the "Employee" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetEmployee panics if the RecordSet is empty.
	SetEmployee(value bool)
	// Function is a getter for the value of the "Function" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Function() string
	// SetFunction is a setter for the value of the "Function" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetFunction panics if the RecordSet is empty.
	SetFunction(value string)
	// HexyaExternalID is a getter for the value of the "HexyaExternalID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	HexyaExternalID() string
	// SetHexyaExternalID is a setter for the value of the "HexyaExternalID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetHexyaExternalID panics if the RecordSet is empty.
	SetHexyaExternalID(value string)
	// HexyaVersion is a getter for the value of the "HexyaVersion" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	HexyaVersion() int
	// SetHexyaVersion is a setter for the value of the "HexyaVersion" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetHexyaVersion panics if the RecordSet is empty.
	SetHexyaVersion(value int)
	// ID is a getter for the value of the "ID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ID() int64
	// SetID is a setter for the value of the "ID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetID panics if the RecordSet is empty.
	SetID(value int64)
	// Image is a getter for the value of the "Image" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Image() string
	// SetImage is a setter for the value of the "Image" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImage panics if the RecordSet is empty.
	SetImage(value string)
	// Image1024 is a getter for the value of the "Image1024" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Image1024() string
	// SetImage1024 is a setter for the value of the "Image1024" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImage1024 panics if the RecordSet is empty.
	SetImage1024(value string)
	// Image128 is a getter for the value of the "Image128" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Image128() string
	// SetImage128 is a setter for the value of the "Image128" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImage128 panics if the RecordSet is empty.
	SetImage128(value string)
	// Image1920 is a getter for the value of the "Image1920" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Image1920() string
	// SetImage1920 is a setter for the value of the "Image1920" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImage1920 panics if the RecordSet is empty.
	SetImage1920(value string)
	// Image256 is a getter for the value of the "Image256" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Image256() string
	// SetImage256 is a setter for the value of the "Image256" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImage256 panics if the RecordSet is empty.
	SetImage256(value string)
	// Image512 is a getter for the value of the "Image512" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Image512() string
	// SetImage512 is a setter for the value of the "Image512" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImage512 panics if the RecordSet is empty.
	SetImage512(value string)
	// ImageMedium is a getter for the value of the "ImageMedium" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ImageMedium() string
	// SetImageMedium is a setter for the value of the "ImageMedium" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImageMedium panics if the RecordSet is empty.
	SetImageMedium(value string)
	// ImageSmall is a getter for the value of the "ImageSmall" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ImageSmall() string
	// SetImageSmall is a setter for the value of the "ImageSmall" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetImageSmall panics if the RecordSet is empty.
	SetImageSmall(value string)
	// Industry is a getter for the value of the "Industry" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Industry() PartnerIndustrySet
	// SetIndustry is a setter for the value of the "Industry" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetIndustry panics if the RecordSet is empty.
	SetIndustry(value PartnerIndustrySet)
	// IsCompany is a getter for the value of the "IsCompany" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	IsCompany() bool
	// SetIsCompany is a setter for the value of the "IsCompany" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetIsCompany panics if the RecordSet is empty.
	SetIsCompany(value bool)
	// Lang is a getter for the value of the "Lang" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Lang() string
	// SetLang is a setter for the value of the "Lang" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLang panics if the RecordSet is empty.
	SetLang(value string)
	// LastUpdate is a getter for the value of the "LastUpdate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	LastUpdate() dates.DateTime
	// SetLastUpdate is a setter for the value of the "LastUpdate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLastUpdate panics if the RecordSet is empty.
	SetLastUpdate(value dates.DateTime)
	// Latitude is a getter for the value of the "Latitude" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Latitude() float64
	// SetLatitude is a setter for the value of the "Latitude" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLatitude panics if the RecordSet is empty.
	SetLatitude(value float64)
	// Longitude is a getter for the value of the "Longitude" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Longitude() float64
	// SetLongitude is a setter for the value of the "Longitude" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetLongitude panics if the RecordSet is empty.
	SetLongitude(value float64)
	// Mobile is a getter for the value of the "Mobile" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Mobile() string
	// SetMobile is a setter for the value of the "Mobile" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetMobile panics if the RecordSet is empty.
	SetMobile(value string)
	// Name is a getter for the value of the "Name" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Name() string
	// SetName is a setter for the value of the "Name" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetName panics if the RecordSet is empty.
	SetName(value string)
	// Parent is a getter for the value of the "Parent" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Parent() PartnerSet
	// SetParent is a setter for the value of the "Parent" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetParent panics if the RecordSet is empty.
	SetParent(value PartnerSet)
	// ParentName is a getter for the value of the "ParentName" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	ParentName() string
	// SetParentName is a setter for the value of the "ParentName" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetParentName panics if the RecordSet is empty.
	SetParentName(value string)
	// PartnerShare is a getter for the value of the "PartnerShare" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	PartnerShare() bool
	// SetPartnerShare is a setter for the value of the "PartnerShare" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetPartnerShare panics if the RecordSet is empty.
	SetPartnerShare(value bool)
	// Phone is a getter for the value of the "Phone" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Phone() string
	// SetPhone is a setter for the value of the "Phone" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetPhone panics if the RecordSet is empty.
	SetPhone(value string)
	// Ref is a getter for the value of the "Ref" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Ref() string
	// SetRef is a setter for the value of the "Ref" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetRef panics if the RecordSet is empty.
	SetRef(value string)
	// SameVATPartner is a getter for the value of the "SameVATPartner" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	SameVATPartner() PartnerSet
	// SetSameVATPartner is a setter for the value of the "SameVATPartner" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetSameVATPartner panics if the RecordSet is empty.
	SetSameVATPartner(value PartnerSet)
	// State is a getter for the value of the "State" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	State() CountryStateSet
	// SetState is a setter for the value of the "State" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetState panics if the RecordSet is empty.
	SetState(value CountryStateSet)
	// Street is a getter for the value of the "Street" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Street() string
	// SetStreet is a setter for the value of the "Street" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetStreet panics if the RecordSet is empty.
	SetStreet(value string)
	// Street2 is a getter for the value of the "Street2" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Street2() string
	// SetStreet2 is a setter for the value of the "Street2" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetStreet2 panics if the RecordSet is empty.
	SetStreet2(value string)
	// TZ is a getter for the value of the "TZ" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	TZ() string
	// SetTZ is a setter for the value of the "TZ" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetTZ panics if the RecordSet is empty.
	SetTZ(value string)
	// TZOffset is a getter for the value of the "TZOffset" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	TZOffset() string
	// SetTZOffset is a setter for the value of the "TZOffset" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetTZOffset panics if the RecordSet is empty.
	SetTZOffset(value string)
	// Title is a getter for the value of the "Title" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Title() PartnerTitleSet
	// SetTitle is a setter for the value of the "Title" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetTitle panics if the RecordSet is empty.
	SetTitle(value PartnerTitleSet)
	// Type is a getter for the value of the "Type" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Type() string
	// SetType is a setter for the value of the "Type" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetType panics if the RecordSet is empty.
	SetType(value string)
	// User is a getter for the value of the "User" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	User() UserSet
	// SetUser is a setter for the value of the "User" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetUser panics if the RecordSet is empty.
	SetUser(value UserSet)
	// Users is a getter for the value of the "Users" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Users() UserSet
	// SetUsers is a setter for the value of the "Users" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetUsers panics if the RecordSet is empty.
	SetUsers(value UserSet)
	// VAT is a getter for the value of the "VAT" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	VAT() string
	// SetVAT is a setter for the value of the "VAT" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetVAT panics if the RecordSet is empty.
	SetVAT(value string)
	// Website is a getter for the value of the "Website" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Website() string
	// SetWebsite is a setter for the value of the "Website" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWebsite panics if the RecordSet is empty.
	SetWebsite(value string)
	// WriteDate is a getter for the value of the "WriteDate" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	WriteDate() dates.DateTime
	// SetWriteDate is a setter for the value of the "WriteDate" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWriteDate panics if the RecordSet is empty.
	SetWriteDate(value dates.DateTime)
	// WriteUID is a getter for the value of the "WriteUID" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	WriteUID() int64
	// SetWriteUID is a setter for the value of the "WriteUID" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetWriteUID panics if the RecordSet is empty.
	SetWriteUID(value int64)
	// Zip is a getter for the value of the "Zip" field of the first
	// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
	Zip() string
	// SetZip is a setter for the value of the "Zip" field of this
	// RecordSet. All Records of this RecordSet will be updated. Each call to this
	// method makes an update query in the database.
	//
	// SetZip panics if the RecordSet is empty.
	SetZip(value string)
	// ActionArchive sets Active=false on a recordset, by calling ToggleActive to take the
	// corresponding actions according to the model
	ActionArchive()
	// ActionUnarchive sets Active=true on a recordset, by calling ToggleActive to take the
	// corresponding actions according to the model
	ActionUnarchive()
	// AddDomainLimitOffset adds the given domain, limit, offset
	// and order to the current RecordSet query.
	AddDomainLimitOffset(domain domains.Domain, limit int, offset int, order string) PartnerSet
	// AddModifiers adds the modifiers attribute nodes to given xml doc.
	AddModifiers(doc *etree.Document, fieldInfos map[string]*models.FieldInfo)
	// AddNameToRelations returns the given RecordData after getting the name of all 2one relation ids
	AddNamesToRelations(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData
	// AddressFields returns the list of fields which are part of the address.
	// These are used to automate behaviours on contact addresses.
	AddressFields() []models.FieldName
	// AddressGet finds contacts/addresses of the right type(s) by doing a depth-first-search
	// through descendants within company boundaries (stop at entities flagged 'IsCompany')
	// then continuing the search at the ancestors that are within the same company boundaries.
	// Defaults to partners of type 'default' when the exact type is not found, or to the
	// provided partner itself if no type 'default' is found either.
	//
	// Result map keys are the contact types, such as 'contact', 'delivery', etc.`,
	AddressGet(addrTypes []string) map[string]PartnerSet

	Aggregates(fieldNames ...models.FieldName) []PartnerGroupAggregateRow
	// Browse returns a new RecordSet with only the records with the given ids.
	// Note that this function is just a shorcut for Search on a list of ids.
	Browse(ids []int64) PartnerSet
	// BrowseOne returns a new RecordSet with only the record with the given id.
	// Note that this function is just a shorcut for Search on a given id.
	BrowseOne(id int64) PartnerSet

	CartesianProduct(others ...PartnerSet) []PartnerSet
	// CheckAccessRights verifies that the operation given by "operation" is allowed for
	// the current user according to the access rights.
	//
	// operation must be one of "read", "create", "unlink", "write".
	CheckAccessRights(args webtypes.CheckAccessRightsArgs) bool
	// CheckExecutionPermission panics if the current user is not allowed to execute the given method.
	//
	// If dontPanic is false, this function will panic, otherwise it returns true
	// if the user has the execution permission and false otherwise.
	CheckExecutionPermission(method *models.Method, dontPanic ...bool) bool
	// CheckParent checks for recursion in the partners parenthood
	CheckParent()
	// CheckRecursion verifies that there is no loop in a hierarchical structure of records,
	// by following the parent relationship using the 'Parent' field until a loop is detected or
	// until a top-level record is found.
	//
	// It returns true if no loop was found, false otherwise`,
	CheckRecursion() bool
	// CleanWebsite returns a cleaned website url including scheme.
	CleanWebsite(website string) string
	// CommercialFields returns the list of fields that are managed by the commercial entity
	// to which a partner belongs. These fields are meant to be hidden on
	// partners that aren't "commercial entities"" themselves, and will be
	// delegated to the parent "commercial entity"". The list is meant to be
	// extended by inheriting classes.
	CommercialFields() []models.FieldName
	// CommercialSyncFromCompany handle sync of commercial fields when a new parent commercial entity is set,
	// as if they were related fields.
	CommercialSyncFromCompany() bool
	// CommercialSyncToChildren handle sync of commercial fields to descendants
	CommercialSyncToChildren() bool
	// ComputeActiveLangCount returns the number of installed languages
	ComputeActiveLangCount() PartnerData
	// ComputeCommercialCompanyName returns the name of the commercial partner company
	ComputeCommercialCompanyName() PartnerData
	// ComputeCommercialPartner computes the commercial partner, which is the first company ancestor or the top
	// ancestor if none are companies`,
	ComputeCommercialPartner() PartnerData
	// ComputeIsCompany computes the IsCompany field from the selected CompanyType
	ComputeCompanyType() PartnerData
	// ComputeContactAddress computes the contact's address according to the contact's country standards
	ComputeContactAddress() PartnerData
	// ComputeDisplayName updates the DisplayName field with the result of NameGet
	ComputeDisplayName() *models.ModelData
	// ComputeEmailFormatted returns a 'Name <email@domain>' formatted string
	ComputeEmailFormatted() PartnerData
	// ComputeImages computes and store resized images
	ComputeImages() ImageMixinData
	// ComputeLastUpdate returns the last datetime at which the record has been updated.
	ComputeLastUpdate() *models.ModelData
	// ComputePartnerShare computes the PartnerShare field
	ComputePartnerShare() PartnerData
	// ComputeSameVATPartner searches for a partner not linked to this one, but with the same VAT.
	ComputeSameVATPartner() PartnerData
	// ComputeTZOffset computes the timezone offset
	ComputeTZOffset() PartnerData

	Copy(overrides PartnerData) PartnerSet

	CopyData(overrides PartnerData) PartnerData

	Create(data PartnerData) PartnerSet
	// CreateCompany creates the parent company of this partner if it has been given a CompanyName.
	CreateCompany() bool

	DefaultGet() PartnerData
	// DisplayAddress builds and returns an address formatted accordingly to the
	// standards of the country where it belongs.`,
	DisplayAddress(withoutCompany bool) string
	// Enqueue queues the execution of the given method with the given arguments on this recordset.
	// description will be the name given to the job.
	Enqueue(description string, method models.Methoder, arguments ...interface{}) QueueJobSet
	// Equals returns true if this RecordSet is the same as other
	// i.e. they are of the same model and have the same ids
	Equals(other PartnerSet) bool
	// ExecuteO2MActions executes the actions on one2many fields given by
	// the list of triplets received from the client
	ExecuteO2MActions(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{}
	// Fetch query the database with the current filter and returns a RecordSet
	// with the queries ids.
	//
	// Fetch is lazy and only return ids. Use Load() instead if you want to fetch all fields.
	Fetch() PartnerSet
	// FieldGet returns the definition of the given field.
	// The string, help, and selection (if present) attributes are translated.
	FieldGet(field models.FieldName) *models.FieldInfo
	// FieldsGet returns the definition of each field.
	// The embedded fields are included.
	// The string, help, and selection (if present) attributes are translated.
	//
	// The result map is indexed by the fields JSON names.
	FieldsGet(args models.FieldsGetArgs) map[string]*models.FieldInfo
	// FieldsSync syncs commercial fields and address fields from company and to children after create/update,
	// just as if those were all modeled as fields.related to the parent
	FieldsSync(vals PartnerData)
	// FieldsViewGet is the base implementation of the 'FieldsViewGet' method which
	// gets the detailed composition of the requested view like fields, mixin,
	// view architecture.
	FieldsViewGet(args webtypes.FieldsViewGetParams) *webtypes.FieldsViewData

	Filtered(test func(PartnerSet) bool) PartnerSet
	// FindOrCreate finds a partner with the given 'email' or creates one.
	// The given string should contain at least one email,
	// e.g. "Raoul Grosbedon <r.g@grosbedon.fr>"
	FindOrCreate(email string) PartnerSet
	// FormatRelationFields returns the given data with all relation fields converted to int64 or []int64
	FormatRelationFields(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData
	// GetDefaultImage returns a default image for the partner (base64 encoded)
	GetDefaultImage(partnerType string, isCompany bool, Parent PartnerSet) string
	// GetFormviewAction returns an action to open the document.
	// This method is meant to be overridden in addons that want
	// to give specific view ids for example.`,
	GetFormviewAction() *actions.Action
	// GetFormviewID returns an view id to open the document with.
	// This method is meant to be overridden in addons that want
	// to give specific view ids for example.
	GetFormviewId() string
	// GetGravatarImage returns the image from Gravatar associated with the given email.
	// Image is returned as a base64 encoded string.
	GetGravatarImage(email string) string
	// GetRecord returns the Recordset with the given externalID. It panics if the externalID does not exist.
	GetRecord(externalID string) PartnerSet
	// GetToolbar returns a toolbar populated with the actions linked to this model
	GetToolbar() webtypes.Toolbar
	// GroupBy returns a new RecordSet grouped with the given GROUP BY expressions.
	GroupBy(exprs ...models.FieldName) PartnerSet
	// HandleFirsrtContactCreation: on creation of first contact for a company (or root) that has no address,
	// assume contact address was meant to be company address
	HandleFirsrtContactCreation()
	// Intersect returns a new RecordCollection with only the records that are both
	// in this RecordCollection and in the other RecordSet.
	Intersect(other PartnerSet) PartnerSet
	// InverseCompanyType sets the IsCompany field according to the given CompanyType
	InverseCompanyType(companyType string)
	// Limit returns a new RecordSet with only the first 'limit' records.
	Limit(limit int) PartnerSet
	// Load looks up cache for fields of the RecordCollection and
	// query database for missing values.
	// fields are the fields to retrieve in the expression format,
	// i.e. "User.Profile.Age" or "user_id.profile_id.age".
	// If no fields are given, all DB columns of the RecordCollection's
	// model are retrieved.
	Load(fields ...models.FieldName) PartnerSet
	// LoadViews returns the data for all the views and filters required in the parameters.
	LoadViews(args webtypes.LoadViewsArgs) *webtypes.LoadViewsData
	// ManageGroupsOnFields adds the invisible attribute to fields nodes if the current
	// user does not belong to one of the groups of the 'groups' attribute
	ManageGroupsOnFields(doc *etree.Document, fieldInfos map[string]*models.FieldInfo)
	// NameCreate creates a partner from a single string which may be a name and/or an email.
	//
	// If only an email address is received and that the regex cannot find
	// a name, the name will have the email value.
	// If 'force_email' key in context: must find the email address.
	NameCreate(name string) PartnerSet
	// NameGet retrieves the human readable name of this record.`,
	NameGet() string
	// NameSearch searches for records that have a display name matching the given
	// "name" pattern when compared with the given "operator", while also
	// matching the optional search domain ("args").
	//
	// This is used for example to provide suggestions based on a partial
	// value for a relational field. Sometimes be seen as the inverse
	// function of NameGet but it is not guaranteed to be.
	NameSearch(params webtypes.NameSearchParams) []webtypes.RecordIDWithName

	New(data PartnerData) PartnerSet
	// NormalizeM2MData converts the list of triplets received from the client into the final list of ids
	// to keep in the Many2Many relationship of this model through the given field.
	NormalizeM2MData(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{}
	// Offset returns a new RecordSet with only the records starting at offset
	Offset(offset int) PartnerSet
	// Onchange returns the values that must be modified according to each field's Onchange
	// method in the pseudo-record given as params.Values`,
	Onchange(params models.OnchangeParams) models.OnchangeResult
	// OnchangeCompanyType updates the IsCompany field according to the selected type
	OnchangeCompanyType() PartnerData
	// OnchangeCountryFilters sets the filters on state when country is modified
	OnchangeCountryFilters() map[models.FieldName]models.Conditioner
	// OnchangeEmail updates the user Gravatar image
	OnchangeEmail() PartnerData
	// OnchangeParent updates the current partner data when its parent field
	// is modified, in particular copies its parent's address.
	OnchangeParent() PartnerData
	// OnchangeParentWarning issues a warning when trying to change a contact to another parent company
	OnchangeParentWarning() string
	// OpenCommercialEntity is a utility method used to add an "Open Company" button in partner views
	OpenCommercialEntity() *actions.Action
	// OpenParent is a utility method used to add an "Open Parent" button in partner views
	OpenParent() *actions.Action
	// OrderBy returns a new RecordSet ordered by the given ORDER BY expressions.
	// Each expression contains a field name and optionally one of "asc" or "desc", such as:
	//
	// rs.OrderBy("Company", "Name desc")
	OrderBy(exprs ...string) PartnerSet
	// ParsePartnerName parses an email address to get the partner's name.
	// It returns the name as first argument and the email as the second.
	//
	// Supported syntax:
	// - 'Raoul <raoul@grosbedon.fr>': will find name and email address
	// - otherwise: default, everything is set as the name (email is returned empty)
	ParsePartnerName(email string) (string, string)
	// PostProcessCreateValues updates FK of related records created at the same time.
	//
	// This method is meant to be called with the second returned value of ProcessCreateValues
	// after record creation.
	PostProcessCreateValues(data models.RecordData)
	// PostProcessFilters transforms a map[models.FieldName]models.Conditioner
	// in a map[string][]interface{} which acts as a map of domains.
	PostProcessFilters(in map[models.FieldName]models.Conditioner) map[string][]interface{}
	// ProcessCreateValues updates the given data values for Create method to be
	// compatible with the ORM, in particular for relation fields.
	//
	// It returns a first FieldMap to be used as argument to the Create method, and
	// a second map to be used with a subsequent call to PostProcessCreateValues (for
	// updating FKs pointing to the newly created record).
	ProcessCreateValues(data models.RecordData) (models.RecordData, models.RecordData)
	// ProcessElementAttrs returns a modifiers map according to the domain
	// in attrs of the given element
	ProcessElementAttrs(element *etree.Element, fieldInfos map[string]*models.FieldInfo) map[string]interface{}
	// ProcessFieldElementModifiers modifies the given modifiers map by taking into account:
	// - 'invisible', 'readonly' and 'required' attributes in field tags
	// - 'ReadOnly' and 'Required' parameters of the model's field'
	// It returns the modified map.
	ProcessFieldElementModifiers(element *etree.Element, fieldInfos map[string]*models.FieldInfo, modifiers map[string]interface{}) map[string]interface{}
	// ProcessView makes all the necessary modifications to the view
	// arch and returns the new xml string.`,
	ProcessView(arch *etree.Document, fieldInfos map[string]*models.FieldInfo) string
	// ProcessWriteValues updates the given data values for Write method to be
	// compatible with the ORM, in particular for relation fields
	ProcessWriteValues(data models.RecordData) models.RecordData
	// Read reads the database and returns a slice of FieldMap of the given model.
	Read(fields models.FieldNames) []models.RecordData
	// ReadGroup gets a list of record aggregates according to the given parameters.
	ReadGroup(params webtypes.ReadGroupParams) []models.FieldMap
	// SQLFromCondition returns the WHERE clause sql and arguments corresponding to
	// the given condition.`,
	SQLFromCondition(c *models.Condition) (string, models.SQLParams)

	Search(condition q.PartnerCondition) PartnerSet
	// SearchAll returns a RecordSet with all items of the table, regardless of the
	// current RecordSet query. It is mainly meant to be used on an empty RecordSet.
	SearchAll() PartnerSet

	SearchByName(name string, op operator.Operator, additionalCond q.PartnerCondition, limit int) PartnerSet
	// SearchCount fetch from the database the number of records that match the RecordSet conditions.
	SearchCount() int
	// SearchDomain execute a search on the given domain.
	SearchDomain(domain domains.Domain) CommonMixinSet
	// SearchRead retrieves database records according to the filters defined in params.
	SearchRead(params webtypes.SearchParams) []models.RecordData

	Sorted(less func(PartnerSet, PartnerSet) bool) PartnerSet
	// SortedByField returns a new record set with the same records as rc but sorted by the given field.
	// If reverse is true, the sort is done in reversed order
	SortedByField(namer models.FieldName, reverse bool) PartnerSet
	// SortedDefault returns a new record set with the same records as rc but sorted according
	// to the default order of this model
	SortedDefault() PartnerSet
	// Subtract returns a RecordSet with the Records that are in this
	// RecordCollection but not in the given 'other' one.
	// The result is guaranteed to be a set of unique records.
	Subtract(other PartnerSet) PartnerSet
	// Sudo returns a new RecordSet with the given userID
	// or the superuser ID if not specified
	Sudo(userID ...int64) PartnerSet
	// ToggleActive toggles the Active field of this object if it exists.
	ToggleActive()
	// Union returns a new RecordSet that is the union of this RecordSet and the given
	// "other" RecordSet. The result is guaranteed to be a set of unique records.
	Union(other PartnerSet) PartnerSet
	// Unlink deletes the given records in the database.
	Unlink() int64
	// UpdateAddress updates this PartnerSet only with the address fields of
	// the given vals. Other values passed are discarded.
	UpdateAddress(vals PartnerData) bool
	// UpdateFieldValues returns a PartnerData struct with its values set to
	// this partner's values on the given fields. The other fields are left to their
	// Go default value. This method is used to update fields from a partner to its
	// relatives.`,
	UpdateFieldValues(fields ...models.FieldName) PartnerData
	// WebReadGroup returns the result of a read_group (and optionally search for and read records inside each
	// group), and the total number of groups matching the search domain.
	WebReadGroup(params webtypes.WebReadGroupParams) webtypes.WebReadGroupResult
	// WebReadGroupPrivate performs a read_group and optionally a web_search_read for each group.
	WebReadGroupPrivate(params webtypes.WebReadGroupParams) []models.FieldMap
	// WebSearchRead performs a search_read and a search_count.
	WebSearchRead(params webtypes.SearchParams) webtypes.SearchReadResult
	// WithContext returns a copy of the current RecordSet with
	// its context extended by the given key and value.
	WithContext(key string, value interface{}) PartnerSet
	// WithEnv returns a copy of the current RecordSet with the given Environment.
	WithEnv(env models.Environment) PartnerSet
	// WithNewContext returns a copy of the current RecordSet with its context
	// replaced by the given one.
	WithNewContext(context *types.Context) PartnerSet

	Write(data PartnerData) bool
	// Super returns a RecordSet with a modified callstack so that call to the current
	// method will execute the next method layer.
	//
	// This method is meant to be used inside a method layer function to call its parent,
	// such as:
	//
	//    func (rs h.MyRecordSet) MyMethod() string {
	//        res := rs.Super().MyMethod()
	//        res += " ok!"
	//        return res
	//    }
	//
	// Calls to a different method than the current method will call its next layer only
	// if the current method has been called from a layer of the other method. Otherwise,
	// it will be the same as calling the other method directly.
	Super() PartnerSet
	// ModelData returns a new PartnerData object populated with the values
	// of the given FieldMap.
	ModelData(fMap models.FieldMap) PartnerData
	// Records returns a slice with all the records of this RecordSet, as singleton RecordSets
	Records() []PartnerSet
	// First returns the values of the first Record of the RecordSet as a pointer to a PartnerData.
	//
	// If this RecordSet is empty, it returns an empty PartnerData.
	First() PartnerData
	// All returns the values of all Records of the RecordCollection as a slice of PartnerData pointers.
	All() []PartnerData
}

// PartnerData is used to hold values of an Partner object instance
// when creating or updating a PartnerSet.
type PartnerData interface {
	models.RecordData
	// Get returns the value of the given field.
	//
	// The field can be either its name or is JSON name.
	Get(field models.FieldName) interface{}
	// Has returns true if a value is set for the given field.
	//
	// The field can be either its name or is JSON name.
	Has(field models.FieldName) bool
	// Set sets the given field with the given value.
	// If the field already exists, then it is updated with value.
	// Otherwise, a new entry is inserted.
	//
	// It returns the given PartnerData so that calls can be chained
	Set(field models.FieldName, value interface{}) PartnerData
	// Unset removes the value of the given field if it exists.
	//
	// It returns the given ModelData so that calls can be chained
	Unset(field models.FieldName) PartnerData
	// Copy returns a copy of this PartnerData
	Copy() PartnerData
	// MergeWith updates this PartnerData with the given other PartnerData
	// If a field of the other PartnerData already exists here, the value is overridden,
	// otherwise, the field is inserted.
	MergeWith(other PartnerData)
	// Keys returns the PartnerData keys as a slice of strings
	Keys() (res []string)
	// OrderedKeys returns the keys of this PartnerData ordered.
	//
	// This has the convenient side effect of having shorter paths come before longer paths,
	// which is particularly useful when creating or updating related records.
	OrderedKeys() []string
	// FieldNames returns the PartnerData keys as a slice of FieldNames.
	FieldNames() models.FieldNames
	// Active returns the value of the Active field.
	// If this Active is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Active() bool
	// HasActive returns true if Active is set in this PartnerData
	HasActive() bool
	// SetActive sets the Active field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetActive(value bool) PartnerData
	// UnsetActive removes the value of the Active field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetActive() PartnerData

	// ActiveLangCount returns the value of the ActiveLangCount field.
	// If this ActiveLangCount is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	ActiveLangCount() int
	// HasActiveLangCount returns true if ActiveLangCount is set in this PartnerData
	HasActiveLangCount() bool
	// SetActiveLangCount sets the ActiveLangCount field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetActiveLangCount(value int) PartnerData
	// UnsetActiveLangCount removes the value of the ActiveLangCount field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetActiveLangCount() PartnerData

	// Banks returns the value of the Banks field.
	// If this Banks is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Banks() BankAccountSet
	// HasBanks returns true if Banks is set in this PartnerData
	HasBanks() bool
	// SetBanks sets the Banks field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetBanks(value BankAccountSet) PartnerData
	// UnsetBanks removes the value of the Banks field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetBanks() PartnerData

	// CreateBanks stores the related BankAccountData to be used to create
	// a related record on the fly for Banks.
	//
	// This method can be called multiple times to create multiple records
	CreateBanks(related BankAccountData) PartnerData
	// Barcode returns the value of the Barcode field.
	// If this Barcode is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Barcode() string
	// HasBarcode returns true if Barcode is set in this PartnerData
	HasBarcode() bool
	// SetBarcode sets the Barcode field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetBarcode(value string) PartnerData
	// UnsetBarcode removes the value of the Barcode field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetBarcode() PartnerData

	// Categories returns the value of the Categories field.
	// If this Categories is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Categories() PartnerCategorySet
	// HasCategories returns true if Categories is set in this PartnerData
	HasCategories() bool
	// SetCategories sets the Categories field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCategories(value PartnerCategorySet) PartnerData
	// UnsetCategories removes the value of the Categories field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCategories() PartnerData

	// CreateCategories stores the related PartnerCategoryData to be used to create
	// a related record on the fly for Categories.
	//
	// This method can be called multiple times to create multiple records
	CreateCategories(related PartnerCategoryData) PartnerData
	// Children returns the value of the Children field.
	// If this Children is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Children() PartnerSet
	// HasChildren returns true if Children is set in this PartnerData
	HasChildren() bool
	// SetChildren sets the Children field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetChildren(value PartnerSet) PartnerData
	// UnsetChildren removes the value of the Children field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetChildren() PartnerData

	// CreateChildren stores the related PartnerData to be used to create
	// a related record on the fly for Children.
	//
	// This method can be called multiple times to create multiple records
	CreateChildren(related PartnerData) PartnerData
	// City returns the value of the City field.
	// If this City is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	City() string
	// HasCity returns true if City is set in this PartnerData
	HasCity() bool
	// SetCity sets the City field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCity(value string) PartnerData
	// UnsetCity removes the value of the City field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCity() PartnerData

	// Color returns the value of the Color field.
	// If this Color is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Color() int64
	// HasColor returns true if Color is set in this PartnerData
	HasColor() bool
	// SetColor sets the Color field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetColor(value int64) PartnerData
	// UnsetColor removes the value of the Color field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetColor() PartnerData

	// Comment returns the value of the Comment field.
	// If this Comment is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Comment() string
	// HasComment returns true if Comment is set in this PartnerData
	HasComment() bool
	// SetComment sets the Comment field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetComment(value string) PartnerData
	// UnsetComment removes the value of the Comment field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetComment() PartnerData

	// CommercialCompanyName returns the value of the CommercialCompanyName field.
	// If this CommercialCompanyName is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CommercialCompanyName() string
	// HasCommercialCompanyName returns true if CommercialCompanyName is set in this PartnerData
	HasCommercialCompanyName() bool
	// SetCommercialCompanyName sets the CommercialCompanyName field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCommercialCompanyName(value string) PartnerData
	// UnsetCommercialCompanyName removes the value of the CommercialCompanyName field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCommercialCompanyName() PartnerData

	// CommercialPartner returns the value of the CommercialPartner field.
	// If this CommercialPartner is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CommercialPartner() PartnerSet
	// HasCommercialPartner returns true if CommercialPartner is set in this PartnerData
	HasCommercialPartner() bool
	// SetCommercialPartner sets the CommercialPartner field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCommercialPartner(value PartnerSet) PartnerData
	// UnsetCommercialPartner removes the value of the CommercialPartner field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCommercialPartner() PartnerData

	// CreateCommercialPartner stores the related PartnerData to be used to create
	// a related record on the fly for CommercialPartner.
	//
	// This method can be called multiple times to create multiple records
	CreateCommercialPartner(related PartnerData) PartnerData
	// Company returns the value of the Company field.
	// If this Company is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Company() CompanySet
	// HasCompany returns true if Company is set in this PartnerData
	HasCompany() bool
	// SetCompany sets the Company field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCompany(value CompanySet) PartnerData
	// UnsetCompany removes the value of the Company field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCompany() PartnerData

	// CreateCompany stores the related CompanyData to be used to create
	// a related record on the fly for Company.
	//
	// This method can be called multiple times to create multiple records
	CreateCompany(related CompanyData) PartnerData
	// CompanyName returns the value of the CompanyName field.
	// If this CompanyName is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CompanyName() string
	// HasCompanyName returns true if CompanyName is set in this PartnerData
	HasCompanyName() bool
	// SetCompanyName sets the CompanyName field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCompanyName(value string) PartnerData
	// UnsetCompanyName removes the value of the CompanyName field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCompanyName() PartnerData

	// CompanyType returns the value of the CompanyType field.
	// If this CompanyType is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CompanyType() string
	// HasCompanyType returns true if CompanyType is set in this PartnerData
	HasCompanyType() bool
	// SetCompanyType sets the CompanyType field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCompanyType(value string) PartnerData
	// UnsetCompanyType removes the value of the CompanyType field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCompanyType() PartnerData

	// ContactAddress returns the value of the ContactAddress field.
	// If this ContactAddress is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	ContactAddress() string
	// HasContactAddress returns true if ContactAddress is set in this PartnerData
	HasContactAddress() bool
	// SetContactAddress sets the ContactAddress field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetContactAddress(value string) PartnerData
	// UnsetContactAddress removes the value of the ContactAddress field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetContactAddress() PartnerData

	// Country returns the value of the Country field.
	// If this Country is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Country() CountrySet
	// HasCountry returns true if Country is set in this PartnerData
	HasCountry() bool
	// SetCountry sets the Country field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCountry(value CountrySet) PartnerData
	// UnsetCountry removes the value of the Country field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCountry() PartnerData

	// CreateCountry stores the related CountryData to be used to create
	// a related record on the fly for Country.
	//
	// This method can be called multiple times to create multiple records
	CreateCountry(related CountryData) PartnerData
	// CreateDate returns the value of the CreateDate field.
	// If this CreateDate is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CreateDate() dates.DateTime
	// HasCreateDate returns true if CreateDate is set in this PartnerData
	HasCreateDate() bool
	// SetCreateDate sets the CreateDate field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCreateDate(value dates.DateTime) PartnerData
	// UnsetCreateDate removes the value of the CreateDate field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCreateDate() PartnerData

	// CreateUID returns the value of the CreateUID field.
	// If this CreateUID is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CreateUID() int64
	// HasCreateUID returns true if CreateUID is set in this PartnerData
	HasCreateUID() bool
	// SetCreateUID sets the CreateUID field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCreateUID(value int64) PartnerData
	// UnsetCreateUID removes the value of the CreateUID field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCreateUID() PartnerData

	// CreditLimit returns the value of the CreditLimit field.
	// If this CreditLimit is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	CreditLimit() float64
	// HasCreditLimit returns true if CreditLimit is set in this PartnerData
	HasCreditLimit() bool
	// SetCreditLimit sets the CreditLimit field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetCreditLimit(value float64) PartnerData
	// UnsetCreditLimit removes the value of the CreditLimit field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetCreditLimit() PartnerData

	// Date returns the value of the Date field.
	// If this Date is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Date() dates.Date
	// HasDate returns true if Date is set in this PartnerData
	HasDate() bool
	// SetDate sets the Date field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetDate(value dates.Date) PartnerData
	// UnsetDate removes the value of the Date field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetDate() PartnerData

	// DisplayName returns the value of the DisplayName field.
	// If this DisplayName is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	DisplayName() string
	// HasDisplayName returns true if DisplayName is set in this PartnerData
	HasDisplayName() bool
	// SetDisplayName sets the DisplayName field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetDisplayName(value string) PartnerData
	// UnsetDisplayName removes the value of the DisplayName field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetDisplayName() PartnerData

	// Email returns the value of the Email field.
	// If this Email is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Email() string
	// HasEmail returns true if Email is set in this PartnerData
	HasEmail() bool
	// SetEmail sets the Email field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetEmail(value string) PartnerData
	// UnsetEmail removes the value of the Email field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetEmail() PartnerData

	// EmailFormatted returns the value of the EmailFormatted field.
	// If this EmailFormatted is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	EmailFormatted() string
	// HasEmailFormatted returns true if EmailFormatted is set in this PartnerData
	HasEmailFormatted() bool
	// SetEmailFormatted sets the EmailFormatted field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetEmailFormatted(value string) PartnerData
	// UnsetEmailFormatted removes the value of the EmailFormatted field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetEmailFormatted() PartnerData

	// Employee returns the value of the Employee field.
	// If this Employee is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Employee() bool
	// HasEmployee returns true if Employee is set in this PartnerData
	HasEmployee() bool
	// SetEmployee sets the Employee field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetEmployee(value bool) PartnerData
	// UnsetEmployee removes the value of the Employee field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetEmployee() PartnerData

	// Function returns the value of the Function field.
	// If this Function is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Function() string
	// HasFunction returns true if Function is set in this PartnerData
	HasFunction() bool
	// SetFunction sets the Function field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetFunction(value string) PartnerData
	// UnsetFunction removes the value of the Function field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetFunction() PartnerData

	// HexyaExternalID returns the value of the HexyaExternalID field.
	// If this HexyaExternalID is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	HexyaExternalID() string
	// HasHexyaExternalID returns true if HexyaExternalID is set in this PartnerData
	HasHexyaExternalID() bool
	// SetHexyaExternalID sets the HexyaExternalID field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetHexyaExternalID(value string) PartnerData
	// UnsetHexyaExternalID removes the value of the HexyaExternalID field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetHexyaExternalID() PartnerData

	// HexyaVersion returns the value of the HexyaVersion field.
	// If this HexyaVersion is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	HexyaVersion() int
	// HasHexyaVersion returns true if HexyaVersion is set in this PartnerData
	HasHexyaVersion() bool
	// SetHexyaVersion sets the HexyaVersion field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetHexyaVersion(value int) PartnerData
	// UnsetHexyaVersion removes the value of the HexyaVersion field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetHexyaVersion() PartnerData

	// ID returns the value of the ID field.
	// If this ID is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	ID() int64
	// HasID returns true if ID is set in this PartnerData
	HasID() bool
	// SetID sets the ID field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetID(value int64) PartnerData
	// UnsetID removes the value of the ID field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetID() PartnerData

	// Image returns the value of the Image field.
	// If this Image is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Image() string
	// HasImage returns true if Image is set in this PartnerData
	HasImage() bool
	// SetImage sets the Image field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImage(value string) PartnerData
	// UnsetImage removes the value of the Image field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImage() PartnerData

	// Image1024 returns the value of the Image1024 field.
	// If this Image1024 is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Image1024() string
	// HasImage1024 returns true if Image1024 is set in this PartnerData
	HasImage1024() bool
	// SetImage1024 sets the Image1024 field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImage1024(value string) PartnerData
	// UnsetImage1024 removes the value of the Image1024 field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImage1024() PartnerData

	// Image128 returns the value of the Image128 field.
	// If this Image128 is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Image128() string
	// HasImage128 returns true if Image128 is set in this PartnerData
	HasImage128() bool
	// SetImage128 sets the Image128 field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImage128(value string) PartnerData
	// UnsetImage128 removes the value of the Image128 field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImage128() PartnerData

	// Image1920 returns the value of the Image1920 field.
	// If this Image1920 is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Image1920() string
	// HasImage1920 returns true if Image1920 is set in this PartnerData
	HasImage1920() bool
	// SetImage1920 sets the Image1920 field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImage1920(value string) PartnerData
	// UnsetImage1920 removes the value of the Image1920 field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImage1920() PartnerData

	// Image256 returns the value of the Image256 field.
	// If this Image256 is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Image256() string
	// HasImage256 returns true if Image256 is set in this PartnerData
	HasImage256() bool
	// SetImage256 sets the Image256 field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImage256(value string) PartnerData
	// UnsetImage256 removes the value of the Image256 field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImage256() PartnerData

	// Image512 returns the value of the Image512 field.
	// If this Image512 is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Image512() string
	// HasImage512 returns true if Image512 is set in this PartnerData
	HasImage512() bool
	// SetImage512 sets the Image512 field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImage512(value string) PartnerData
	// UnsetImage512 removes the value of the Image512 field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImage512() PartnerData

	// ImageMedium returns the value of the ImageMedium field.
	// If this ImageMedium is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	ImageMedium() string
	// HasImageMedium returns true if ImageMedium is set in this PartnerData
	HasImageMedium() bool
	// SetImageMedium sets the ImageMedium field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImageMedium(value string) PartnerData
	// UnsetImageMedium removes the value of the ImageMedium field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImageMedium() PartnerData

	// ImageSmall returns the value of the ImageSmall field.
	// If this ImageSmall is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	ImageSmall() string
	// HasImageSmall returns true if ImageSmall is set in this PartnerData
	HasImageSmall() bool
	// SetImageSmall sets the ImageSmall field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetImageSmall(value string) PartnerData
	// UnsetImageSmall removes the value of the ImageSmall field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetImageSmall() PartnerData

	// Industry returns the value of the Industry field.
	// If this Industry is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Industry() PartnerIndustrySet
	// HasIndustry returns true if Industry is set in this PartnerData
	HasIndustry() bool
	// SetIndustry sets the Industry field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetIndustry(value PartnerIndustrySet) PartnerData
	// UnsetIndustry removes the value of the Industry field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetIndustry() PartnerData

	// CreateIndustry stores the related PartnerIndustryData to be used to create
	// a related record on the fly for Industry.
	//
	// This method can be called multiple times to create multiple records
	CreateIndustry(related PartnerIndustryData) PartnerData
	// IsCompany returns the value of the IsCompany field.
	// If this IsCompany is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	IsCompany() bool
	// HasIsCompany returns true if IsCompany is set in this PartnerData
	HasIsCompany() bool
	// SetIsCompany sets the IsCompany field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetIsCompany(value bool) PartnerData
	// UnsetIsCompany removes the value of the IsCompany field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetIsCompany() PartnerData

	// Lang returns the value of the Lang field.
	// If this Lang is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Lang() string
	// HasLang returns true if Lang is set in this PartnerData
	HasLang() bool
	// SetLang sets the Lang field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetLang(value string) PartnerData
	// UnsetLang removes the value of the Lang field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetLang() PartnerData

	// LastUpdate returns the value of the LastUpdate field.
	// If this LastUpdate is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	LastUpdate() dates.DateTime
	// HasLastUpdate returns true if LastUpdate is set in this PartnerData
	HasLastUpdate() bool
	// SetLastUpdate sets the LastUpdate field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetLastUpdate(value dates.DateTime) PartnerData
	// UnsetLastUpdate removes the value of the LastUpdate field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetLastUpdate() PartnerData

	// Latitude returns the value of the Latitude field.
	// If this Latitude is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Latitude() float64
	// HasLatitude returns true if Latitude is set in this PartnerData
	HasLatitude() bool
	// SetLatitude sets the Latitude field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetLatitude(value float64) PartnerData
	// UnsetLatitude removes the value of the Latitude field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetLatitude() PartnerData

	// Longitude returns the value of the Longitude field.
	// If this Longitude is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Longitude() float64
	// HasLongitude returns true if Longitude is set in this PartnerData
	HasLongitude() bool
	// SetLongitude sets the Longitude field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetLongitude(value float64) PartnerData
	// UnsetLongitude removes the value of the Longitude field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetLongitude() PartnerData

	// Mobile returns the value of the Mobile field.
	// If this Mobile is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Mobile() string
	// HasMobile returns true if Mobile is set in this PartnerData
	HasMobile() bool
	// SetMobile sets the Mobile field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetMobile(value string) PartnerData
	// UnsetMobile removes the value of the Mobile field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetMobile() PartnerData

	// Name returns the value of the Name field.
	// If this Name is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Name() string
	// HasName returns true if Name is set in this PartnerData
	HasName() bool
	// SetName sets the Name field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetName(value string) PartnerData
	// UnsetName removes the value of the Name field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetName() PartnerData

	// Parent returns the value of the Parent field.
	// If this Parent is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Parent() PartnerSet
	// HasParent returns true if Parent is set in this PartnerData
	HasParent() bool
	// SetParent sets the Parent field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetParent(value PartnerSet) PartnerData
	// UnsetParent removes the value of the Parent field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetParent() PartnerData

	// CreateParent stores the related PartnerData to be used to create
	// a related record on the fly for Parent.
	//
	// This method can be called multiple times to create multiple records
	CreateParent(related PartnerData) PartnerData
	// ParentName returns the value of the ParentName field.
	// If this ParentName is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	ParentName() string
	// HasParentName returns true if ParentName is set in this PartnerData
	HasParentName() bool
	// SetParentName sets the ParentName field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetParentName(value string) PartnerData
	// UnsetParentName removes the value of the ParentName field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetParentName() PartnerData

	// PartnerShare returns the value of the PartnerShare field.
	// If this PartnerShare is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	PartnerShare() bool
	// HasPartnerShare returns true if PartnerShare is set in this PartnerData
	HasPartnerShare() bool
	// SetPartnerShare sets the PartnerShare field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetPartnerShare(value bool) PartnerData
	// UnsetPartnerShare removes the value of the PartnerShare field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetPartnerShare() PartnerData

	// Phone returns the value of the Phone field.
	// If this Phone is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Phone() string
	// HasPhone returns true if Phone is set in this PartnerData
	HasPhone() bool
	// SetPhone sets the Phone field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetPhone(value string) PartnerData
	// UnsetPhone removes the value of the Phone field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetPhone() PartnerData

	// Ref returns the value of the Ref field.
	// If this Ref is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Ref() string
	// HasRef returns true if Ref is set in this PartnerData
	HasRef() bool
	// SetRef sets the Ref field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetRef(value string) PartnerData
	// UnsetRef removes the value of the Ref field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetRef() PartnerData

	// SameVATPartner returns the value of the SameVATPartner field.
	// If this SameVATPartner is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	SameVATPartner() PartnerSet
	// HasSameVATPartner returns true if SameVATPartner is set in this PartnerData
	HasSameVATPartner() bool
	// SetSameVATPartner sets the SameVATPartner field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetSameVATPartner(value PartnerSet) PartnerData
	// UnsetSameVATPartner removes the value of the SameVATPartner field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetSameVATPartner() PartnerData

	// CreateSameVATPartner stores the related PartnerData to be used to create
	// a related record on the fly for SameVATPartner.
	//
	// This method can be called multiple times to create multiple records
	CreateSameVATPartner(related PartnerData) PartnerData
	// State returns the value of the State field.
	// If this State is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	State() CountryStateSet
	// HasState returns true if State is set in this PartnerData
	HasState() bool
	// SetState sets the State field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetState(value CountryStateSet) PartnerData
	// UnsetState removes the value of the State field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetState() PartnerData

	// CreateState stores the related CountryStateData to be used to create
	// a related record on the fly for State.
	//
	// This method can be called multiple times to create multiple records
	CreateState(related CountryStateData) PartnerData
	// Street returns the value of the Street field.
	// If this Street is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Street() string
	// HasStreet returns true if Street is set in this PartnerData
	HasStreet() bool
	// SetStreet sets the Street field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetStreet(value string) PartnerData
	// UnsetStreet removes the value of the Street field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetStreet() PartnerData

	// Street2 returns the value of the Street2 field.
	// If this Street2 is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Street2() string
	// HasStreet2 returns true if Street2 is set in this PartnerData
	HasStreet2() bool
	// SetStreet2 sets the Street2 field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetStreet2(value string) PartnerData
	// UnsetStreet2 removes the value of the Street2 field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetStreet2() PartnerData

	// TZ returns the value of the TZ field.
	// If this TZ is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	TZ() string
	// HasTZ returns true if TZ is set in this PartnerData
	HasTZ() bool
	// SetTZ sets the TZ field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetTZ(value string) PartnerData
	// UnsetTZ removes the value of the TZ field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetTZ() PartnerData

	// TZOffset returns the value of the TZOffset field.
	// If this TZOffset is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	TZOffset() string
	// HasTZOffset returns true if TZOffset is set in this PartnerData
	HasTZOffset() bool
	// SetTZOffset sets the TZOffset field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetTZOffset(value string) PartnerData
	// UnsetTZOffset removes the value of the TZOffset field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetTZOffset() PartnerData

	// Title returns the value of the Title field.
	// If this Title is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Title() PartnerTitleSet
	// HasTitle returns true if Title is set in this PartnerData
	HasTitle() bool
	// SetTitle sets the Title field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetTitle(value PartnerTitleSet) PartnerData
	// UnsetTitle removes the value of the Title field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetTitle() PartnerData

	// CreateTitle stores the related PartnerTitleData to be used to create
	// a related record on the fly for Title.
	//
	// This method can be called multiple times to create multiple records
	CreateTitle(related PartnerTitleData) PartnerData
	// Type returns the value of the Type field.
	// If this Type is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Type() string
	// HasType returns true if Type is set in this PartnerData
	HasType() bool
	// SetType sets the Type field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetType(value string) PartnerData
	// UnsetType removes the value of the Type field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetType() PartnerData

	// User returns the value of the User field.
	// If this User is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	User() UserSet
	// HasUser returns true if User is set in this PartnerData
	HasUser() bool
	// SetUser sets the User field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetUser(value UserSet) PartnerData
	// UnsetUser removes the value of the User field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetUser() PartnerData

	// CreateUser stores the related UserData to be used to create
	// a related record on the fly for User.
	//
	// This method can be called multiple times to create multiple records
	CreateUser(related UserData) PartnerData
	// Users returns the value of the Users field.
	// If this Users is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Users() UserSet
	// HasUsers returns true if Users is set in this PartnerData
	HasUsers() bool
	// SetUsers sets the Users field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetUsers(value UserSet) PartnerData
	// UnsetUsers removes the value of the Users field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetUsers() PartnerData

	// CreateUsers stores the related UserData to be used to create
	// a related record on the fly for Users.
	//
	// This method can be called multiple times to create multiple records
	CreateUsers(related UserData) PartnerData
	// VAT returns the value of the VAT field.
	// If this VAT is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	VAT() string
	// HasVAT returns true if VAT is set in this PartnerData
	HasVAT() bool
	// SetVAT sets the VAT field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetVAT(value string) PartnerData
	// UnsetVAT removes the value of the VAT field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetVAT() PartnerData

	// Website returns the value of the Website field.
	// If this Website is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Website() string
	// HasWebsite returns true if Website is set in this PartnerData
	HasWebsite() bool
	// SetWebsite sets the Website field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetWebsite(value string) PartnerData
	// UnsetWebsite removes the value of the Website field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetWebsite() PartnerData

	// WriteDate returns the value of the WriteDate field.
	// If this WriteDate is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	WriteDate() dates.DateTime
	// HasWriteDate returns true if WriteDate is set in this PartnerData
	HasWriteDate() bool
	// SetWriteDate sets the WriteDate field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetWriteDate(value dates.DateTime) PartnerData
	// UnsetWriteDate removes the value of the WriteDate field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetWriteDate() PartnerData

	// WriteUID returns the value of the WriteUID field.
	// If this WriteUID is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	WriteUID() int64
	// HasWriteUID returns true if WriteUID is set in this PartnerData
	HasWriteUID() bool
	// SetWriteUID sets the WriteUID field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetWriteUID(value int64) PartnerData
	// UnsetWriteUID removes the value of the WriteUID field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetWriteUID() PartnerData

	// Zip returns the value of the Zip field.
	// If this Zip is not set in this PartnerData, then
	// the Go zero value for the type is returned.
	Zip() string
	// HasZip returns true if Zip is set in this PartnerData
	HasZip() bool
	// SetZip sets the Zip field with the given value.
	// It returns this PartnerData so that calls can be chained.
	SetZip(value string) PartnerData
	// UnsetZip removes the value of the Zip field if it exists.
	// It returns this PartnerData so that calls can be chained.
	UnsetZip() PartnerData
}

// A PartnerGroupAggregateRow holds a row of results of a query with a group by clause
type PartnerGroupAggregateRow interface {
	// Values() returns the values of the actual query
	Values() PartnerData
	// Count is the number of lines aggregated into this one
	Count() int
	// Condition can be used to query the aggregated rows separately if needed
	Condition() q.PartnerCondition
}
