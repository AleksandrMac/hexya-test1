// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package h

import (
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/pool/h/common_mixin"
	"github.com/hexya-erp/pool/m"
)

// ------- MODEL ---------

// CommonMixinModel is a strongly typed model definition that is used
// to extend the CommonMixin model or to get a CommonMixinSet through
// its NewSet() function.
//
// To get the unique instance of this type, call CommonMixin().
type CommonMixinModel struct {
	*models.Model
}

// NewSet returns a new CommonMixinSet instance wrapping the given model in the given Environment
func (md CommonMixinModel) NewSet(env models.Environment, modelName string) m.CommonMixinSet {
	return common_mixin.CommonMixinSet{
		RecordCollection: env.Pool(modelName),
	}
}

// NewData returns a pointer to a new empty CommonMixinData instance.
//
// Optional field maps if given will be used to populate the data.
func (md CommonMixinModel) NewData(fm ...models.FieldMap) m.CommonMixinData {
	return &common_mixin.CommonMixinData{
		ModelData: models.NewModelData(CommonMixin(), fm...),
	}
}

// Fields returns the Field Collection of the CommonMixin Model
func (md CommonMixinModel) Fields() common_mixin.FieldsCollection {
	return common_mixin.FieldsCollection{
		FieldsCollection: md.Model.Fields(),
	}
}

// Methods returns the Method Collection of the CommonMixin Model
func (md CommonMixinModel) Methods() common_mixin.MethodsCollection {
	return common_mixin.MethodsCollection{
		MethodsCollection: md.Model.Methods(),
	}
}

// Underlying returns the underlying models.Model instance
func (md CommonMixinModel) Underlying() *models.Model {
	return md.Model
}

var _ models.Modeler = CommonMixinModel{}

// Coalesce takes a list of CommonMixinSet and return the first non-empty one
// if every record set is empty, it will return the last given
func (md CommonMixinModel) Coalesce(lst ...m.CommonMixinSet) m.CommonMixinSet {
	var last m.CommonMixinSet
	for _, elem := range lst {
		if elem.Collection().IsNotEmpty() {
			return elem
		}
		last = elem
	}
	return last
}

// CommonMixin returns the unique instance of the CommonMixinModel type
// which is used to extend the CommonMixin model or to get a CommonMixinSet through
// its NewSet() function.
func CommonMixin() CommonMixinModel {
	return CommonMixinModel{
		Model: models.Registry.MustGet("CommonMixin"),
	}
}
