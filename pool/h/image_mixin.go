// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package h

import (
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/pool/h/image_mixin"
	"github.com/hexya-erp/pool/m"
)

// ------- MODEL ---------

// ImageMixinModel is a strongly typed model definition that is used
// to extend the ImageMixin model or to get a ImageMixinSet through
// its NewSet() function.
//
// To get the unique instance of this type, call ImageMixin().
type ImageMixinModel struct {
	*models.Model
}

// NewSet returns a new ImageMixinSet instance wrapping the given model in the given Environment
func (md ImageMixinModel) NewSet(env models.Environment, modelName string) m.ImageMixinSet {
	return image_mixin.ImageMixinSet{
		RecordCollection: env.Pool(modelName),
	}
}

// NewData returns a pointer to a new empty ImageMixinData instance.
//
// Optional field maps if given will be used to populate the data.
func (md ImageMixinModel) NewData(fm ...models.FieldMap) m.ImageMixinData {
	return &image_mixin.ImageMixinData{
		ModelData: models.NewModelData(ImageMixin(), fm...),
	}
}

// Fields returns the Field Collection of the ImageMixin Model
func (md ImageMixinModel) Fields() image_mixin.FieldsCollection {
	return image_mixin.FieldsCollection{
		FieldsCollection: md.Model.Fields(),
	}
}

// Methods returns the Method Collection of the ImageMixin Model
func (md ImageMixinModel) Methods() image_mixin.MethodsCollection {
	return image_mixin.MethodsCollection{
		MethodsCollection: md.Model.Methods(),
	}
}

// Underlying returns the underlying models.Model instance
func (md ImageMixinModel) Underlying() *models.Model {
	return md.Model
}

var _ models.Modeler = ImageMixinModel{}

// Coalesce takes a list of ImageMixinSet and return the first non-empty one
// if every record set is empty, it will return the last given
func (md ImageMixinModel) Coalesce(lst ...m.ImageMixinSet) m.ImageMixinSet {
	var last m.ImageMixinSet
	for _, elem := range lst {
		if elem.Collection().IsNotEmpty() {
			return elem
		}
		last = elem
	}
	return last
}

// ImageMixin returns the unique instance of the ImageMixinModel type
// which is used to extend the ImageMixin model or to get a ImageMixinSet through
// its NewSet() function.
func ImageMixin() ImageMixinModel {
	return ImageMixinModel{
		Model: models.Registry.MustGet("ImageMixin"),
	}
}
