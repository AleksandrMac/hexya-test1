// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package user_change_password_wizard

import (
	"github.com/beevik/etree"
	"github.com/hexya-addons/web/domains"
	"github.com/hexya-addons/web/webtypes"
	"github.com/hexya-erp/hexya/src/actions"
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types"
	"github.com/hexya-erp/hexya/src/models/types/dates"
	"github.com/hexya-erp/pool/m"
	"github.com/hexya-erp/pool/q"
)

// ------- FIELD COLLECTION ----------

// A FieldsCollection is the collection of fields
// of the UserChangePasswordWizard model.
type FieldsCollection struct {
	*models.FieldsCollection
}

// CreateDate returns a pointer to the CreateDate Field.
func (c FieldsCollection) CreateDate() *models.Field {
	return c.MustGet("CreateDate")
}

// CreateUID returns a pointer to the CreateUID Field.
func (c FieldsCollection) CreateUID() *models.Field {
	return c.MustGet("CreateUID")
}

// DisplayName returns a pointer to the DisplayName Field.
func (c FieldsCollection) DisplayName() *models.Field {
	return c.MustGet("DisplayName")
}

// ID returns a pointer to the ID Field.
func (c FieldsCollection) ID() *models.Field {
	return c.MustGet("ID")
}

// LastUpdate returns a pointer to the LastUpdate Field.
func (c FieldsCollection) LastUpdate() *models.Field {
	return c.MustGet("LastUpdate")
}

// Users returns a pointer to the Users Field.
func (c FieldsCollection) Users() *models.Field {
	return c.MustGet("Users")
}

// WriteDate returns a pointer to the WriteDate Field.
func (c FieldsCollection) WriteDate() *models.Field {
	return c.MustGet("WriteDate")
}

// WriteUID returns a pointer to the WriteUID Field.
func (c FieldsCollection) WriteUID() *models.Field {
	return c.MustGet("WriteUID")
}

// ------- METHOD COLLECTION ----------

// A MethodsCollection is the collection of methods
// of the UserChangePasswordWizard model.
type MethodsCollection struct {
	*models.MethodsCollection
}

// pAddDomainLimitOffset holds the metadata of the UserChangePasswordWizard.AddDomainLimitOffset() method
type pAddDomainLimitOffset struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddDomainLimitOffset) Extend(fnct func(m.UserChangePasswordWizardSet, domains.Domain, int, int, string) m.UserChangePasswordWizardSet) pAddDomainLimitOffset {
	return pAddDomainLimitOffset{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddDomainLimitOffset) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddDomainLimitOffset{}

// AddDomainLimitOffset returns a pointer to the AddDomainLimitOffset Method.
func (c MethodsCollection) AddDomainLimitOffset() pAddDomainLimitOffset {
	return pAddDomainLimitOffset{
		Method: c.MustGet("AddDomainLimitOffset"),
	}
}

// pAddModifiers holds the metadata of the UserChangePasswordWizard.AddModifiers() method
type pAddModifiers struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddModifiers) Extend(fnct func(m.UserChangePasswordWizardSet, *etree.Document, map[string]*models.FieldInfo)) pAddModifiers {
	return pAddModifiers{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddModifiers) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddModifiers{}

// AddModifiers returns a pointer to the AddModifiers Method.
func (c MethodsCollection) AddModifiers() pAddModifiers {
	return pAddModifiers{
		Method: c.MustGet("AddModifiers"),
	}
}

// pAddNamesToRelations holds the metadata of the UserChangePasswordWizard.AddNamesToRelations() method
type pAddNamesToRelations struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddNamesToRelations) Extend(fnct func(m.UserChangePasswordWizardSet, models.RecordData, map[string]*models.FieldInfo) models.RecordData) pAddNamesToRelations {
	return pAddNamesToRelations{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddNamesToRelations) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddNamesToRelations{}

// AddNamesToRelations returns a pointer to the AddNamesToRelations Method.
func (c MethodsCollection) AddNamesToRelations() pAddNamesToRelations {
	return pAddNamesToRelations{
		Method: c.MustGet("AddNamesToRelations"),
	}
}

// pAggregates holds the metadata of the UserChangePasswordWizard.Aggregates() method
type pAggregates struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAggregates) Extend(fnct func(m.UserChangePasswordWizardSet, ...models.FieldName) []m.UserChangePasswordWizardGroupAggregateRow) pAggregates {
	return pAggregates{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAggregates) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAggregates{}

// Aggregates returns a pointer to the Aggregates Method.
func (c MethodsCollection) Aggregates() pAggregates {
	return pAggregates{
		Method: c.MustGet("Aggregates"),
	}
}

// pBrowse holds the metadata of the UserChangePasswordWizard.Browse() method
type pBrowse struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pBrowse) Extend(fnct func(m.UserChangePasswordWizardSet, []int64) m.UserChangePasswordWizardSet) pBrowse {
	return pBrowse{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pBrowse) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pBrowse{}

// Browse returns a pointer to the Browse Method.
func (c MethodsCollection) Browse() pBrowse {
	return pBrowse{
		Method: c.MustGet("Browse"),
	}
}

// pBrowseOne holds the metadata of the UserChangePasswordWizard.BrowseOne() method
type pBrowseOne struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pBrowseOne) Extend(fnct func(m.UserChangePasswordWizardSet, int64) m.UserChangePasswordWizardSet) pBrowseOne {
	return pBrowseOne{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pBrowseOne) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pBrowseOne{}

// BrowseOne returns a pointer to the BrowseOne Method.
func (c MethodsCollection) BrowseOne() pBrowseOne {
	return pBrowseOne{
		Method: c.MustGet("BrowseOne"),
	}
}

// pCartesianProduct holds the metadata of the UserChangePasswordWizard.CartesianProduct() method
type pCartesianProduct struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCartesianProduct) Extend(fnct func(m.UserChangePasswordWizardSet, ...m.UserChangePasswordWizardSet) []m.UserChangePasswordWizardSet) pCartesianProduct {
	return pCartesianProduct{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCartesianProduct) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCartesianProduct{}

// CartesianProduct returns a pointer to the CartesianProduct Method.
func (c MethodsCollection) CartesianProduct() pCartesianProduct {
	return pCartesianProduct{
		Method: c.MustGet("CartesianProduct"),
	}
}

// pChangePasswordButton holds the metadata of the UserChangePasswordWizard.ChangePasswordButton() method
type pChangePasswordButton struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pChangePasswordButton) Extend(fnct func(m.UserChangePasswordWizardSet)) pChangePasswordButton {
	return pChangePasswordButton{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pChangePasswordButton) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pChangePasswordButton{}

// ChangePasswordButton returns a pointer to the ChangePasswordButton Method.
func (c MethodsCollection) ChangePasswordButton() pChangePasswordButton {
	return pChangePasswordButton{
		Method: c.MustGet("ChangePasswordButton"),
	}
}

// pCheckAccessRights holds the metadata of the UserChangePasswordWizard.CheckAccessRights() method
type pCheckAccessRights struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckAccessRights) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.CheckAccessRightsArgs) bool) pCheckAccessRights {
	return pCheckAccessRights{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckAccessRights) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckAccessRights{}

// CheckAccessRights returns a pointer to the CheckAccessRights Method.
func (c MethodsCollection) CheckAccessRights() pCheckAccessRights {
	return pCheckAccessRights{
		Method: c.MustGet("CheckAccessRights"),
	}
}

// pCheckExecutionPermission holds the metadata of the UserChangePasswordWizard.CheckExecutionPermission() method
type pCheckExecutionPermission struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckExecutionPermission) Extend(fnct func(m.UserChangePasswordWizardSet, *models.Method, ...bool) bool) pCheckExecutionPermission {
	return pCheckExecutionPermission{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckExecutionPermission) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckExecutionPermission{}

// CheckExecutionPermission returns a pointer to the CheckExecutionPermission Method.
func (c MethodsCollection) CheckExecutionPermission() pCheckExecutionPermission {
	return pCheckExecutionPermission{
		Method: c.MustGet("CheckExecutionPermission"),
	}
}

// pCheckRecursion holds the metadata of the UserChangePasswordWizard.CheckRecursion() method
type pCheckRecursion struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckRecursion) Extend(fnct func(m.UserChangePasswordWizardSet) bool) pCheckRecursion {
	return pCheckRecursion{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckRecursion) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckRecursion{}

// CheckRecursion returns a pointer to the CheckRecursion Method.
func (c MethodsCollection) CheckRecursion() pCheckRecursion {
	return pCheckRecursion{
		Method: c.MustGet("CheckRecursion"),
	}
}

// pComputeDisplayName holds the metadata of the UserChangePasswordWizard.ComputeDisplayName() method
type pComputeDisplayName struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeDisplayName) Extend(fnct func(m.UserChangePasswordWizardSet) *models.ModelData) pComputeDisplayName {
	return pComputeDisplayName{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeDisplayName) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeDisplayName{}

// ComputeDisplayName returns a pointer to the ComputeDisplayName Method.
func (c MethodsCollection) ComputeDisplayName() pComputeDisplayName {
	return pComputeDisplayName{
		Method: c.MustGet("ComputeDisplayName"),
	}
}

// pComputeLastUpdate holds the metadata of the UserChangePasswordWizard.ComputeLastUpdate() method
type pComputeLastUpdate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeLastUpdate) Extend(fnct func(m.UserChangePasswordWizardSet) *models.ModelData) pComputeLastUpdate {
	return pComputeLastUpdate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeLastUpdate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeLastUpdate{}

// ComputeLastUpdate returns a pointer to the ComputeLastUpdate Method.
func (c MethodsCollection) ComputeLastUpdate() pComputeLastUpdate {
	return pComputeLastUpdate{
		Method: c.MustGet("ComputeLastUpdate"),
	}
}

// pCopy holds the metadata of the UserChangePasswordWizard.Copy() method
type pCopy struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCopy) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardData) m.UserChangePasswordWizardSet) pCopy {
	return pCopy{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCopy) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCopy{}

// Copy returns a pointer to the Copy Method.
func (c MethodsCollection) Copy() pCopy {
	return pCopy{
		Method: c.MustGet("Copy"),
	}
}

// pCopyData holds the metadata of the UserChangePasswordWizard.CopyData() method
type pCopyData struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCopyData) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardData) m.UserChangePasswordWizardData) pCopyData {
	return pCopyData{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCopyData) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCopyData{}

// CopyData returns a pointer to the CopyData Method.
func (c MethodsCollection) CopyData() pCopyData {
	return pCopyData{
		Method: c.MustGet("CopyData"),
	}
}

// pCreate holds the metadata of the UserChangePasswordWizard.Create() method
type pCreate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCreate) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardData) m.UserChangePasswordWizardSet) pCreate {
	return pCreate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCreate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCreate{}

// Create returns a pointer to the Create Method.
func (c MethodsCollection) Create() pCreate {
	return pCreate{
		Method: c.MustGet("Create"),
	}
}

// pDefaultGet holds the metadata of the UserChangePasswordWizard.DefaultGet() method
type pDefaultGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pDefaultGet) Extend(fnct func(m.UserChangePasswordWizardSet) m.UserChangePasswordWizardData) pDefaultGet {
	return pDefaultGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pDefaultGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pDefaultGet{}

// DefaultGet returns a pointer to the DefaultGet Method.
func (c MethodsCollection) DefaultGet() pDefaultGet {
	return pDefaultGet{
		Method: c.MustGet("DefaultGet"),
	}
}

// pEnqueue holds the metadata of the UserChangePasswordWizard.Enqueue() method
type pEnqueue struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pEnqueue) Extend(fnct func(m.UserChangePasswordWizardSet, string, models.Methoder, ...interface{}) m.QueueJobSet) pEnqueue {
	return pEnqueue{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pEnqueue) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pEnqueue{}

// Enqueue returns a pointer to the Enqueue Method.
func (c MethodsCollection) Enqueue() pEnqueue {
	return pEnqueue{
		Method: c.MustGet("Enqueue"),
	}
}

// pEquals holds the metadata of the UserChangePasswordWizard.Equals() method
type pEquals struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pEquals) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardSet) bool) pEquals {
	return pEquals{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pEquals) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pEquals{}

// Equals returns a pointer to the Equals Method.
func (c MethodsCollection) Equals() pEquals {
	return pEquals{
		Method: c.MustGet("Equals"),
	}
}

// pExecuteO2MActions holds the metadata of the UserChangePasswordWizard.ExecuteO2MActions() method
type pExecuteO2MActions struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pExecuteO2MActions) Extend(fnct func(m.UserChangePasswordWizardSet, models.FieldName, *models.FieldInfo, interface{}) interface{}) pExecuteO2MActions {
	return pExecuteO2MActions{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pExecuteO2MActions) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pExecuteO2MActions{}

// ExecuteO2MActions returns a pointer to the ExecuteO2MActions Method.
func (c MethodsCollection) ExecuteO2MActions() pExecuteO2MActions {
	return pExecuteO2MActions{
		Method: c.MustGet("ExecuteO2MActions"),
	}
}

// pFetch holds the metadata of the UserChangePasswordWizard.Fetch() method
type pFetch struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFetch) Extend(fnct func(m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet) pFetch {
	return pFetch{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFetch) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFetch{}

// Fetch returns a pointer to the Fetch Method.
func (c MethodsCollection) Fetch() pFetch {
	return pFetch{
		Method: c.MustGet("Fetch"),
	}
}

// pFieldGet holds the metadata of the UserChangePasswordWizard.FieldGet() method
type pFieldGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldGet) Extend(fnct func(m.UserChangePasswordWizardSet, models.FieldName) *models.FieldInfo) pFieldGet {
	return pFieldGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldGet{}

// FieldGet returns a pointer to the FieldGet Method.
func (c MethodsCollection) FieldGet() pFieldGet {
	return pFieldGet{
		Method: c.MustGet("FieldGet"),
	}
}

// pFieldsGet holds the metadata of the UserChangePasswordWizard.FieldsGet() method
type pFieldsGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldsGet) Extend(fnct func(m.UserChangePasswordWizardSet, models.FieldsGetArgs) map[string]*models.FieldInfo) pFieldsGet {
	return pFieldsGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldsGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldsGet{}

// FieldsGet returns a pointer to the FieldsGet Method.
func (c MethodsCollection) FieldsGet() pFieldsGet {
	return pFieldsGet{
		Method: c.MustGet("FieldsGet"),
	}
}

// pFieldsViewGet holds the metadata of the UserChangePasswordWizard.FieldsViewGet() method
type pFieldsViewGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldsViewGet) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.FieldsViewGetParams) *webtypes.FieldsViewData) pFieldsViewGet {
	return pFieldsViewGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldsViewGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldsViewGet{}

// FieldsViewGet returns a pointer to the FieldsViewGet Method.
func (c MethodsCollection) FieldsViewGet() pFieldsViewGet {
	return pFieldsViewGet{
		Method: c.MustGet("FieldsViewGet"),
	}
}

// pFiltered holds the metadata of the UserChangePasswordWizard.Filtered() method
type pFiltered struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFiltered) Extend(fnct func(m.UserChangePasswordWizardSet, func(m.UserChangePasswordWizardSet) bool) m.UserChangePasswordWizardSet) pFiltered {
	return pFiltered{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFiltered) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFiltered{}

// Filtered returns a pointer to the Filtered Method.
func (c MethodsCollection) Filtered() pFiltered {
	return pFiltered{
		Method: c.MustGet("Filtered"),
	}
}

// pFormatRelationFields holds the metadata of the UserChangePasswordWizard.FormatRelationFields() method
type pFormatRelationFields struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFormatRelationFields) Extend(fnct func(m.UserChangePasswordWizardSet, models.RecordData, map[string]*models.FieldInfo) models.RecordData) pFormatRelationFields {
	return pFormatRelationFields{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFormatRelationFields) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFormatRelationFields{}

// FormatRelationFields returns a pointer to the FormatRelationFields Method.
func (c MethodsCollection) FormatRelationFields() pFormatRelationFields {
	return pFormatRelationFields{
		Method: c.MustGet("FormatRelationFields"),
	}
}

// pGetFormviewAction holds the metadata of the UserChangePasswordWizard.GetFormviewAction() method
type pGetFormviewAction struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetFormviewAction) Extend(fnct func(m.UserChangePasswordWizardSet) *actions.Action) pGetFormviewAction {
	return pGetFormviewAction{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetFormviewAction) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetFormviewAction{}

// GetFormviewAction returns a pointer to the GetFormviewAction Method.
func (c MethodsCollection) GetFormviewAction() pGetFormviewAction {
	return pGetFormviewAction{
		Method: c.MustGet("GetFormviewAction"),
	}
}

// pGetFormviewId holds the metadata of the UserChangePasswordWizard.GetFormviewId() method
type pGetFormviewId struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetFormviewId) Extend(fnct func(m.UserChangePasswordWizardSet) string) pGetFormviewId {
	return pGetFormviewId{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetFormviewId) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetFormviewId{}

// GetFormviewId returns a pointer to the GetFormviewId Method.
func (c MethodsCollection) GetFormviewId() pGetFormviewId {
	return pGetFormviewId{
		Method: c.MustGet("GetFormviewId"),
	}
}

// pGetRecord holds the metadata of the UserChangePasswordWizard.GetRecord() method
type pGetRecord struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetRecord) Extend(fnct func(m.UserChangePasswordWizardSet, string) m.UserChangePasswordWizardSet) pGetRecord {
	return pGetRecord{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetRecord) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetRecord{}

// GetRecord returns a pointer to the GetRecord Method.
func (c MethodsCollection) GetRecord() pGetRecord {
	return pGetRecord{
		Method: c.MustGet("GetRecord"),
	}
}

// pGetToolbar holds the metadata of the UserChangePasswordWizard.GetToolbar() method
type pGetToolbar struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetToolbar) Extend(fnct func(m.UserChangePasswordWizardSet) webtypes.Toolbar) pGetToolbar {
	return pGetToolbar{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetToolbar) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetToolbar{}

// GetToolbar returns a pointer to the GetToolbar Method.
func (c MethodsCollection) GetToolbar() pGetToolbar {
	return pGetToolbar{
		Method: c.MustGet("GetToolbar"),
	}
}

// pGroupBy holds the metadata of the UserChangePasswordWizard.GroupBy() method
type pGroupBy struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGroupBy) Extend(fnct func(m.UserChangePasswordWizardSet, ...models.FieldName) m.UserChangePasswordWizardSet) pGroupBy {
	return pGroupBy{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGroupBy) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGroupBy{}

// GroupBy returns a pointer to the GroupBy Method.
func (c MethodsCollection) GroupBy() pGroupBy {
	return pGroupBy{
		Method: c.MustGet("GroupBy"),
	}
}

// pIntersect holds the metadata of the UserChangePasswordWizard.Intersect() method
type pIntersect struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pIntersect) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet) pIntersect {
	return pIntersect{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pIntersect) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pIntersect{}

// Intersect returns a pointer to the Intersect Method.
func (c MethodsCollection) Intersect() pIntersect {
	return pIntersect{
		Method: c.MustGet("Intersect"),
	}
}

// pLimit holds the metadata of the UserChangePasswordWizard.Limit() method
type pLimit struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pLimit) Extend(fnct func(m.UserChangePasswordWizardSet, int) m.UserChangePasswordWizardSet) pLimit {
	return pLimit{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pLimit) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pLimit{}

// Limit returns a pointer to the Limit Method.
func (c MethodsCollection) Limit() pLimit {
	return pLimit{
		Method: c.MustGet("Limit"),
	}
}

// pLoad holds the metadata of the UserChangePasswordWizard.Load() method
type pLoad struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pLoad) Extend(fnct func(m.UserChangePasswordWizardSet, ...models.FieldName) m.UserChangePasswordWizardSet) pLoad {
	return pLoad{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pLoad) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pLoad{}

// Load returns a pointer to the Load Method.
func (c MethodsCollection) Load() pLoad {
	return pLoad{
		Method: c.MustGet("Load"),
	}
}

// pLoadViews holds the metadata of the UserChangePasswordWizard.LoadViews() method
type pLoadViews struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pLoadViews) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.LoadViewsArgs) *webtypes.LoadViewsData) pLoadViews {
	return pLoadViews{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pLoadViews) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pLoadViews{}

// LoadViews returns a pointer to the LoadViews Method.
func (c MethodsCollection) LoadViews() pLoadViews {
	return pLoadViews{
		Method: c.MustGet("LoadViews"),
	}
}

// pManageGroupsOnFields holds the metadata of the UserChangePasswordWizard.ManageGroupsOnFields() method
type pManageGroupsOnFields struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pManageGroupsOnFields) Extend(fnct func(m.UserChangePasswordWizardSet, *etree.Document, map[string]*models.FieldInfo)) pManageGroupsOnFields {
	return pManageGroupsOnFields{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pManageGroupsOnFields) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pManageGroupsOnFields{}

// ManageGroupsOnFields returns a pointer to the ManageGroupsOnFields Method.
func (c MethodsCollection) ManageGroupsOnFields() pManageGroupsOnFields {
	return pManageGroupsOnFields{
		Method: c.MustGet("ManageGroupsOnFields"),
	}
}

// pNameGet holds the metadata of the UserChangePasswordWizard.NameGet() method
type pNameGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNameGet) Extend(fnct func(m.UserChangePasswordWizardSet) string) pNameGet {
	return pNameGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNameGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNameGet{}

// NameGet returns a pointer to the NameGet Method.
func (c MethodsCollection) NameGet() pNameGet {
	return pNameGet{
		Method: c.MustGet("NameGet"),
	}
}

// pNameSearch holds the metadata of the UserChangePasswordWizard.NameSearch() method
type pNameSearch struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNameSearch) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.NameSearchParams) []webtypes.RecordIDWithName) pNameSearch {
	return pNameSearch{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNameSearch) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNameSearch{}

// NameSearch returns a pointer to the NameSearch Method.
func (c MethodsCollection) NameSearch() pNameSearch {
	return pNameSearch{
		Method: c.MustGet("NameSearch"),
	}
}

// pNew holds the metadata of the UserChangePasswordWizard.New() method
type pNew struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNew) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardData) m.UserChangePasswordWizardSet) pNew {
	return pNew{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNew) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNew{}

// New returns a pointer to the New Method.
func (c MethodsCollection) New() pNew {
	return pNew{
		Method: c.MustGet("New"),
	}
}

// pNormalizeM2MData holds the metadata of the UserChangePasswordWizard.NormalizeM2MData() method
type pNormalizeM2MData struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNormalizeM2MData) Extend(fnct func(m.UserChangePasswordWizardSet, models.FieldName, *models.FieldInfo, interface{}) interface{}) pNormalizeM2MData {
	return pNormalizeM2MData{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNormalizeM2MData) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNormalizeM2MData{}

// NormalizeM2MData returns a pointer to the NormalizeM2MData Method.
func (c MethodsCollection) NormalizeM2MData() pNormalizeM2MData {
	return pNormalizeM2MData{
		Method: c.MustGet("NormalizeM2MData"),
	}
}

// pOffset holds the metadata of the UserChangePasswordWizard.Offset() method
type pOffset struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOffset) Extend(fnct func(m.UserChangePasswordWizardSet, int) m.UserChangePasswordWizardSet) pOffset {
	return pOffset{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOffset) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOffset{}

// Offset returns a pointer to the Offset Method.
func (c MethodsCollection) Offset() pOffset {
	return pOffset{
		Method: c.MustGet("Offset"),
	}
}

// pOnchange holds the metadata of the UserChangePasswordWizard.Onchange() method
type pOnchange struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchange) Extend(fnct func(m.UserChangePasswordWizardSet, models.OnchangeParams) models.OnchangeResult) pOnchange {
	return pOnchange{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchange) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchange{}

// Onchange returns a pointer to the Onchange Method.
func (c MethodsCollection) Onchange() pOnchange {
	return pOnchange{
		Method: c.MustGet("Onchange"),
	}
}

// pOrderBy holds the metadata of the UserChangePasswordWizard.OrderBy() method
type pOrderBy struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOrderBy) Extend(fnct func(m.UserChangePasswordWizardSet, ...string) m.UserChangePasswordWizardSet) pOrderBy {
	return pOrderBy{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOrderBy) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOrderBy{}

// OrderBy returns a pointer to the OrderBy Method.
func (c MethodsCollection) OrderBy() pOrderBy {
	return pOrderBy{
		Method: c.MustGet("OrderBy"),
	}
}

// pPostProcessCreateValues holds the metadata of the UserChangePasswordWizard.PostProcessCreateValues() method
type pPostProcessCreateValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pPostProcessCreateValues) Extend(fnct func(m.UserChangePasswordWizardSet, models.RecordData)) pPostProcessCreateValues {
	return pPostProcessCreateValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pPostProcessCreateValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pPostProcessCreateValues{}

// PostProcessCreateValues returns a pointer to the PostProcessCreateValues Method.
func (c MethodsCollection) PostProcessCreateValues() pPostProcessCreateValues {
	return pPostProcessCreateValues{
		Method: c.MustGet("PostProcessCreateValues"),
	}
}

// pPostProcessFilters holds the metadata of the UserChangePasswordWizard.PostProcessFilters() method
type pPostProcessFilters struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pPostProcessFilters) Extend(fnct func(m.UserChangePasswordWizardSet, map[models.FieldName]models.Conditioner) map[string][]interface{}) pPostProcessFilters {
	return pPostProcessFilters{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pPostProcessFilters) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pPostProcessFilters{}

// PostProcessFilters returns a pointer to the PostProcessFilters Method.
func (c MethodsCollection) PostProcessFilters() pPostProcessFilters {
	return pPostProcessFilters{
		Method: c.MustGet("PostProcessFilters"),
	}
}

// pProcessCreateValues holds the metadata of the UserChangePasswordWizard.ProcessCreateValues() method
type pProcessCreateValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessCreateValues) Extend(fnct func(m.UserChangePasswordWizardSet, models.RecordData) (models.RecordData, models.RecordData)) pProcessCreateValues {
	return pProcessCreateValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessCreateValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessCreateValues{}

// ProcessCreateValues returns a pointer to the ProcessCreateValues Method.
func (c MethodsCollection) ProcessCreateValues() pProcessCreateValues {
	return pProcessCreateValues{
		Method: c.MustGet("ProcessCreateValues"),
	}
}

// pProcessElementAttrs holds the metadata of the UserChangePasswordWizard.ProcessElementAttrs() method
type pProcessElementAttrs struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessElementAttrs) Extend(fnct func(m.UserChangePasswordWizardSet, *etree.Element, map[string]*models.FieldInfo) map[string]interface{}) pProcessElementAttrs {
	return pProcessElementAttrs{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessElementAttrs) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessElementAttrs{}

// ProcessElementAttrs returns a pointer to the ProcessElementAttrs Method.
func (c MethodsCollection) ProcessElementAttrs() pProcessElementAttrs {
	return pProcessElementAttrs{
		Method: c.MustGet("ProcessElementAttrs"),
	}
}

// pProcessFieldElementModifiers holds the metadata of the UserChangePasswordWizard.ProcessFieldElementModifiers() method
type pProcessFieldElementModifiers struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessFieldElementModifiers) Extend(fnct func(m.UserChangePasswordWizardSet, *etree.Element, map[string]*models.FieldInfo, map[string]interface{}) map[string]interface{}) pProcessFieldElementModifiers {
	return pProcessFieldElementModifiers{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessFieldElementModifiers) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessFieldElementModifiers{}

// ProcessFieldElementModifiers returns a pointer to the ProcessFieldElementModifiers Method.
func (c MethodsCollection) ProcessFieldElementModifiers() pProcessFieldElementModifiers {
	return pProcessFieldElementModifiers{
		Method: c.MustGet("ProcessFieldElementModifiers"),
	}
}

// pProcessView holds the metadata of the UserChangePasswordWizard.ProcessView() method
type pProcessView struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessView) Extend(fnct func(m.UserChangePasswordWizardSet, *etree.Document, map[string]*models.FieldInfo) string) pProcessView {
	return pProcessView{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessView) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessView{}

// ProcessView returns a pointer to the ProcessView Method.
func (c MethodsCollection) ProcessView() pProcessView {
	return pProcessView{
		Method: c.MustGet("ProcessView"),
	}
}

// pProcessWriteValues holds the metadata of the UserChangePasswordWizard.ProcessWriteValues() method
type pProcessWriteValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessWriteValues) Extend(fnct func(m.UserChangePasswordWizardSet, models.RecordData) models.RecordData) pProcessWriteValues {
	return pProcessWriteValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessWriteValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessWriteValues{}

// ProcessWriteValues returns a pointer to the ProcessWriteValues Method.
func (c MethodsCollection) ProcessWriteValues() pProcessWriteValues {
	return pProcessWriteValues{
		Method: c.MustGet("ProcessWriteValues"),
	}
}

// pRead holds the metadata of the UserChangePasswordWizard.Read() method
type pRead struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pRead) Extend(fnct func(m.UserChangePasswordWizardSet, models.FieldNames) []models.RecordData) pRead {
	return pRead{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pRead) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pRead{}

// Read returns a pointer to the Read Method.
func (c MethodsCollection) Read() pRead {
	return pRead{
		Method: c.MustGet("Read"),
	}
}

// pReadGroup holds the metadata of the UserChangePasswordWizard.ReadGroup() method
type pReadGroup struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pReadGroup) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.ReadGroupParams) []models.FieldMap) pReadGroup {
	return pReadGroup{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pReadGroup) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pReadGroup{}

// ReadGroup returns a pointer to the ReadGroup Method.
func (c MethodsCollection) ReadGroup() pReadGroup {
	return pReadGroup{
		Method: c.MustGet("ReadGroup"),
	}
}

// pSQLFromCondition holds the metadata of the UserChangePasswordWizard.SQLFromCondition() method
type pSQLFromCondition struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSQLFromCondition) Extend(fnct func(m.UserChangePasswordWizardSet, *models.Condition) (string, models.SQLParams)) pSQLFromCondition {
	return pSQLFromCondition{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSQLFromCondition) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSQLFromCondition{}

// SQLFromCondition returns a pointer to the SQLFromCondition Method.
func (c MethodsCollection) SQLFromCondition() pSQLFromCondition {
	return pSQLFromCondition{
		Method: c.MustGet("SQLFromCondition"),
	}
}

// pSearch holds the metadata of the UserChangePasswordWizard.Search() method
type pSearch struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearch) Extend(fnct func(m.UserChangePasswordWizardSet, q.UserChangePasswordWizardCondition) m.UserChangePasswordWizardSet) pSearch {
	return pSearch{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearch) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearch{}

// Search returns a pointer to the Search Method.
func (c MethodsCollection) Search() pSearch {
	return pSearch{
		Method: c.MustGet("Search"),
	}
}

// pSearchAll holds the metadata of the UserChangePasswordWizard.SearchAll() method
type pSearchAll struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchAll) Extend(fnct func(m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet) pSearchAll {
	return pSearchAll{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchAll) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchAll{}

// SearchAll returns a pointer to the SearchAll Method.
func (c MethodsCollection) SearchAll() pSearchAll {
	return pSearchAll{
		Method: c.MustGet("SearchAll"),
	}
}

// pSearchByName holds the metadata of the UserChangePasswordWizard.SearchByName() method
type pSearchByName struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchByName) Extend(fnct func(m.UserChangePasswordWizardSet, string, operator.Operator, q.UserChangePasswordWizardCondition, int) m.UserChangePasswordWizardSet) pSearchByName {
	return pSearchByName{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchByName) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchByName{}

// SearchByName returns a pointer to the SearchByName Method.
func (c MethodsCollection) SearchByName() pSearchByName {
	return pSearchByName{
		Method: c.MustGet("SearchByName"),
	}
}

// pSearchCount holds the metadata of the UserChangePasswordWizard.SearchCount() method
type pSearchCount struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchCount) Extend(fnct func(m.UserChangePasswordWizardSet) int) pSearchCount {
	return pSearchCount{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchCount) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchCount{}

// SearchCount returns a pointer to the SearchCount Method.
func (c MethodsCollection) SearchCount() pSearchCount {
	return pSearchCount{
		Method: c.MustGet("SearchCount"),
	}
}

// pSearchDomain holds the metadata of the UserChangePasswordWizard.SearchDomain() method
type pSearchDomain struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchDomain) Extend(fnct func(m.UserChangePasswordWizardSet, domains.Domain) m.CommonMixinSet) pSearchDomain {
	return pSearchDomain{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchDomain) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchDomain{}

// SearchDomain returns a pointer to the SearchDomain Method.
func (c MethodsCollection) SearchDomain() pSearchDomain {
	return pSearchDomain{
		Method: c.MustGet("SearchDomain"),
	}
}

// pSearchRead holds the metadata of the UserChangePasswordWizard.SearchRead() method
type pSearchRead struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchRead) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.SearchParams) []models.RecordData) pSearchRead {
	return pSearchRead{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchRead) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchRead{}

// SearchRead returns a pointer to the SearchRead Method.
func (c MethodsCollection) SearchRead() pSearchRead {
	return pSearchRead{
		Method: c.MustGet("SearchRead"),
	}
}

// pSorted holds the metadata of the UserChangePasswordWizard.Sorted() method
type pSorted struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSorted) Extend(fnct func(m.UserChangePasswordWizardSet, func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardSet) bool) m.UserChangePasswordWizardSet) pSorted {
	return pSorted{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSorted) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSorted{}

// Sorted returns a pointer to the Sorted Method.
func (c MethodsCollection) Sorted() pSorted {
	return pSorted{
		Method: c.MustGet("Sorted"),
	}
}

// pSortedByField holds the metadata of the UserChangePasswordWizard.SortedByField() method
type pSortedByField struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSortedByField) Extend(fnct func(m.UserChangePasswordWizardSet, models.FieldName, bool) m.UserChangePasswordWizardSet) pSortedByField {
	return pSortedByField{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSortedByField) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSortedByField{}

// SortedByField returns a pointer to the SortedByField Method.
func (c MethodsCollection) SortedByField() pSortedByField {
	return pSortedByField{
		Method: c.MustGet("SortedByField"),
	}
}

// pSortedDefault holds the metadata of the UserChangePasswordWizard.SortedDefault() method
type pSortedDefault struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSortedDefault) Extend(fnct func(m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet) pSortedDefault {
	return pSortedDefault{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSortedDefault) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSortedDefault{}

// SortedDefault returns a pointer to the SortedDefault Method.
func (c MethodsCollection) SortedDefault() pSortedDefault {
	return pSortedDefault{
		Method: c.MustGet("SortedDefault"),
	}
}

// pSubtract holds the metadata of the UserChangePasswordWizard.Subtract() method
type pSubtract struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSubtract) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet) pSubtract {
	return pSubtract{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSubtract) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSubtract{}

// Subtract returns a pointer to the Subtract Method.
func (c MethodsCollection) Subtract() pSubtract {
	return pSubtract{
		Method: c.MustGet("Subtract"),
	}
}

// pSudo holds the metadata of the UserChangePasswordWizard.Sudo() method
type pSudo struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSudo) Extend(fnct func(m.UserChangePasswordWizardSet, ...int64) m.UserChangePasswordWizardSet) pSudo {
	return pSudo{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSudo) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSudo{}

// Sudo returns a pointer to the Sudo Method.
func (c MethodsCollection) Sudo() pSudo {
	return pSudo{
		Method: c.MustGet("Sudo"),
	}
}

// pUnion holds the metadata of the UserChangePasswordWizard.Union() method
type pUnion struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pUnion) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet) pUnion {
	return pUnion{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pUnion) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pUnion{}

// Union returns a pointer to the Union Method.
func (c MethodsCollection) Union() pUnion {
	return pUnion{
		Method: c.MustGet("Union"),
	}
}

// pUnlink holds the metadata of the UserChangePasswordWizard.Unlink() method
type pUnlink struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pUnlink) Extend(fnct func(m.UserChangePasswordWizardSet) int64) pUnlink {
	return pUnlink{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pUnlink) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pUnlink{}

// Unlink returns a pointer to the Unlink Method.
func (c MethodsCollection) Unlink() pUnlink {
	return pUnlink{
		Method: c.MustGet("Unlink"),
	}
}

// pWebReadGroup holds the metadata of the UserChangePasswordWizard.WebReadGroup() method
type pWebReadGroup struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWebReadGroup) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.WebReadGroupParams) webtypes.WebReadGroupResult) pWebReadGroup {
	return pWebReadGroup{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWebReadGroup) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWebReadGroup{}

// WebReadGroup returns a pointer to the WebReadGroup Method.
func (c MethodsCollection) WebReadGroup() pWebReadGroup {
	return pWebReadGroup{
		Method: c.MustGet("WebReadGroup"),
	}
}

// pWebReadGroupPrivate holds the metadata of the UserChangePasswordWizard.WebReadGroupPrivate() method
type pWebReadGroupPrivate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWebReadGroupPrivate) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.WebReadGroupParams) []models.FieldMap) pWebReadGroupPrivate {
	return pWebReadGroupPrivate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWebReadGroupPrivate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWebReadGroupPrivate{}

// WebReadGroupPrivate returns a pointer to the WebReadGroupPrivate Method.
func (c MethodsCollection) WebReadGroupPrivate() pWebReadGroupPrivate {
	return pWebReadGroupPrivate{
		Method: c.MustGet("WebReadGroupPrivate"),
	}
}

// pWebSearchRead holds the metadata of the UserChangePasswordWizard.WebSearchRead() method
type pWebSearchRead struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWebSearchRead) Extend(fnct func(m.UserChangePasswordWizardSet, webtypes.SearchParams) webtypes.SearchReadResult) pWebSearchRead {
	return pWebSearchRead{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWebSearchRead) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWebSearchRead{}

// WebSearchRead returns a pointer to the WebSearchRead Method.
func (c MethodsCollection) WebSearchRead() pWebSearchRead {
	return pWebSearchRead{
		Method: c.MustGet("WebSearchRead"),
	}
}

// pWithContext holds the metadata of the UserChangePasswordWizard.WithContext() method
type pWithContext struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWithContext) Extend(fnct func(m.UserChangePasswordWizardSet, string, interface{}) m.UserChangePasswordWizardSet) pWithContext {
	return pWithContext{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWithContext) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWithContext{}

// WithContext returns a pointer to the WithContext Method.
func (c MethodsCollection) WithContext() pWithContext {
	return pWithContext{
		Method: c.MustGet("WithContext"),
	}
}

// pWithEnv holds the metadata of the UserChangePasswordWizard.WithEnv() method
type pWithEnv struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWithEnv) Extend(fnct func(m.UserChangePasswordWizardSet, models.Environment) m.UserChangePasswordWizardSet) pWithEnv {
	return pWithEnv{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWithEnv) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWithEnv{}

// WithEnv returns a pointer to the WithEnv Method.
func (c MethodsCollection) WithEnv() pWithEnv {
	return pWithEnv{
		Method: c.MustGet("WithEnv"),
	}
}

// pWithNewContext holds the metadata of the UserChangePasswordWizard.WithNewContext() method
type pWithNewContext struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWithNewContext) Extend(fnct func(m.UserChangePasswordWizardSet, *types.Context) m.UserChangePasswordWizardSet) pWithNewContext {
	return pWithNewContext{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWithNewContext) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWithNewContext{}

// WithNewContext returns a pointer to the WithNewContext Method.
func (c MethodsCollection) WithNewContext() pWithNewContext {
	return pWithNewContext{
		Method: c.MustGet("WithNewContext"),
	}
}

// pWrite holds the metadata of the UserChangePasswordWizard.Write() method
type pWrite struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWrite) Extend(fnct func(m.UserChangePasswordWizardSet, m.UserChangePasswordWizardData) bool) pWrite {
	return pWrite{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWrite) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWrite{}

// Write returns a pointer to the Write Method.
func (c MethodsCollection) Write() pWrite {
	return pWrite{
		Method: c.MustGet("Write"),
	}
}

// ------- DATA STRUCT ---------

// UserChangePasswordWizardData is used to hold values of an UserChangePasswordWizard object instance
// when creating or updating a UserChangePasswordWizardSet.
type UserChangePasswordWizardData struct {
	*models.ModelData
}

// Set sets the given field with the given value.
// If the field already exists, then it is updated with value.
// Otherwise, a new entry is inserted.
//
// It returns the given UserChangePasswordWizardData so that calls can be chained
func (d UserChangePasswordWizardData) Set(field models.FieldName, value interface{}) m.UserChangePasswordWizardData {
	return &UserChangePasswordWizardData{
		d.ModelData.Set(field, value),
	}
}

// Unset removes the value of the given field if it exists.
//
// It returns the given ModelData so that calls can be chained
func (d UserChangePasswordWizardData) Unset(field models.FieldName) m.UserChangePasswordWizardData {
	return &UserChangePasswordWizardData{
		d.ModelData.Unset(field),
	}
}

// Copy returns a copy of this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) Copy() m.UserChangePasswordWizardData {
	return &UserChangePasswordWizardData{
		d.ModelData.Copy(),
	}
}

// MergeWith updates this UserChangePasswordWizardData with the given other UserChangePasswordWizardData
// If a field of the other UserChangePasswordWizardData already exists here, the value is overridden,
// otherwise, the field is inserted.
func (d UserChangePasswordWizardData) MergeWith(other m.UserChangePasswordWizardData) {
	d.ModelData.MergeWith(other.Underlying())
}

// CreateDate returns the value of the CreateDate field.
// If this CreateDate is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) CreateDate() dates.DateTime {
	val := d.ModelData.Get(models.NewFieldName("CreateDate", "create_date"))
	if !d.Has(models.NewFieldName("CreateDate", "create_date")) {
		return *new(dates.DateTime)
	}
	return val.(dates.DateTime)
}

// HasCreateDate returns true if CreateDate is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasCreateDate() bool {
	return d.ModelData.Has(models.NewFieldName("CreateDate", "create_date"))
}

// SetCreateDate sets the CreateDate field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetCreateDate(value dates.DateTime) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("CreateDate", "create_date"), value)
	return d
}

// UnsetCreateDate removes the value of the CreateDate field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetCreateDate() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("CreateDate", "create_date"))
	return d
}

// CreateUID returns the value of the CreateUID field.
// If this CreateUID is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) CreateUID() int64 {
	val := d.ModelData.Get(models.NewFieldName("CreateUID", "create_uid"))
	if !d.Has(models.NewFieldName("CreateUID", "create_uid")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasCreateUID returns true if CreateUID is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasCreateUID() bool {
	return d.ModelData.Has(models.NewFieldName("CreateUID", "create_uid"))
}

// SetCreateUID sets the CreateUID field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetCreateUID(value int64) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("CreateUID", "create_uid"), value)
	return d
}

// UnsetCreateUID removes the value of the CreateUID field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetCreateUID() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("CreateUID", "create_uid"))
	return d
}

// DisplayName returns the value of the DisplayName field.
// If this DisplayName is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) DisplayName() string {
	val := d.ModelData.Get(models.NewFieldName("DisplayName", "display_name"))
	if !d.Has(models.NewFieldName("DisplayName", "display_name")) {
		return *new(string)
	}
	return val.(string)
}

// HasDisplayName returns true if DisplayName is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasDisplayName() bool {
	return d.ModelData.Has(models.NewFieldName("DisplayName", "display_name"))
}

// SetDisplayName sets the DisplayName field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetDisplayName(value string) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("DisplayName", "display_name"), value)
	return d
}

// UnsetDisplayName removes the value of the DisplayName field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetDisplayName() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("DisplayName", "display_name"))
	return d
}

// ID returns the value of the ID field.
// If this ID is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) ID() int64 {
	val := d.ModelData.Get(models.NewFieldName("ID", "id"))
	if !d.Has(models.NewFieldName("ID", "id")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasID returns true if ID is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasID() bool {
	return d.ModelData.Has(models.NewFieldName("ID", "id"))
}

// SetID sets the ID field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetID(value int64) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("ID", "id"), value)
	return d
}

// UnsetID removes the value of the ID field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetID() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("ID", "id"))
	return d
}

// LastUpdate returns the value of the LastUpdate field.
// If this LastUpdate is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) LastUpdate() dates.DateTime {
	val := d.ModelData.Get(models.NewFieldName("LastUpdate", "__last_update"))
	if !d.Has(models.NewFieldName("LastUpdate", "__last_update")) {
		return *new(dates.DateTime)
	}
	return val.(dates.DateTime)
}

// HasLastUpdate returns true if LastUpdate is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasLastUpdate() bool {
	return d.ModelData.Has(models.NewFieldName("LastUpdate", "__last_update"))
}

// SetLastUpdate sets the LastUpdate field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetLastUpdate(value dates.DateTime) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("LastUpdate", "__last_update"), value)
	return d
}

// UnsetLastUpdate removes the value of the LastUpdate field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetLastUpdate() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("LastUpdate", "__last_update"))
	return d
}

// Users returns the value of the Users field.
// If this Users is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) Users() m.UserChangePasswordWizardLineSet {
	val := d.ModelData.Get(models.NewFieldName("Users", "users_ids"))
	if !d.Has(models.NewFieldName("Users", "users_ids")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("UserChangePasswordWizardLine")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.UserChangePasswordWizardLineSet)
}

// HasUsers returns true if Users is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasUsers() bool {
	return d.ModelData.Has(models.NewFieldName("Users", "users_ids"))
}

// SetUsers sets the Users field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetUsers(value m.UserChangePasswordWizardLineSet) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("Users", "users_ids"), value)
	return d
}

// UnsetUsers removes the value of the Users field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetUsers() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("Users", "users_ids"))
	return d
}

// CreateUsers stores the related UserChangePasswordWizardLineData to be used to create
// a related record on the fly for Users.
//
// This method can be called multiple times to create multiple records
func (d UserChangePasswordWizardData) CreateUsers(related m.UserChangePasswordWizardLineData) m.UserChangePasswordWizardData {
	d.ModelData.Create(models.NewFieldName("Users", "users_ids"), related.Underlying())
	return d
}

// WriteDate returns the value of the WriteDate field.
// If this WriteDate is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) WriteDate() dates.DateTime {
	val := d.ModelData.Get(models.NewFieldName("WriteDate", "write_date"))
	if !d.Has(models.NewFieldName("WriteDate", "write_date")) {
		return *new(dates.DateTime)
	}
	return val.(dates.DateTime)
}

// HasWriteDate returns true if WriteDate is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasWriteDate() bool {
	return d.ModelData.Has(models.NewFieldName("WriteDate", "write_date"))
}

// SetWriteDate sets the WriteDate field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetWriteDate(value dates.DateTime) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("WriteDate", "write_date"), value)
	return d
}

// UnsetWriteDate removes the value of the WriteDate field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetWriteDate() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("WriteDate", "write_date"))
	return d
}

// WriteUID returns the value of the WriteUID field.
// If this WriteUID is not set in this UserChangePasswordWizardData, then
// the Go zero value for the type is returned.
func (d UserChangePasswordWizardData) WriteUID() int64 {
	val := d.ModelData.Get(models.NewFieldName("WriteUID", "write_uid"))
	if !d.Has(models.NewFieldName("WriteUID", "write_uid")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasWriteUID returns true if WriteUID is set in this UserChangePasswordWizardData
func (d UserChangePasswordWizardData) HasWriteUID() bool {
	return d.ModelData.Has(models.NewFieldName("WriteUID", "write_uid"))
}

// SetWriteUID sets the WriteUID field with the given value.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) SetWriteUID(value int64) m.UserChangePasswordWizardData {
	d.ModelData.Set(models.NewFieldName("WriteUID", "write_uid"), value)
	return d
}

// UnsetWriteUID removes the value of the WriteUID field if it exists.
// It returns this UserChangePasswordWizardData so that calls can be chained.
func (d UserChangePasswordWizardData) UnsetWriteUID() m.UserChangePasswordWizardData {
	d.ModelData.Unset(models.NewFieldName("WriteUID", "write_uid"))
	return d
}

var _ m.UserChangePasswordWizardData = new(UserChangePasswordWizardData)
var _ m.UserChangePasswordWizardData = UserChangePasswordWizardData{}

// ------ AGGREGATE ROW --------

// A UserChangePasswordWizardGroupAggregateRow holds a row of results of a query with a group by clause
// - Values holds the values of the actual query
// - Count is the number of lines aggregated into this one
// - Condition can be used to query the aggregated rows separately if needed
type UserChangePasswordWizardGroupAggregateRow struct {
	values    m.UserChangePasswordWizardData
	count     int
	condition q.UserChangePasswordWizardCondition
}

// Values returns the values of the actual query
func (a UserChangePasswordWizardGroupAggregateRow) Values() m.UserChangePasswordWizardData {
	return a.values
}

// Count returns the number of lines aggregated into this one
func (a UserChangePasswordWizardGroupAggregateRow) Count() int {
	return a.count
}

// Condition can be used to query the aggregated rows separately if needed
func (a UserChangePasswordWizardGroupAggregateRow) Condition() q.UserChangePasswordWizardCondition {
	return a.condition
}

// ------- RECORD SET ---------

// UserChangePasswordWizardSet is an autogenerated type to handle UserChangePasswordWizard objects.
type UserChangePasswordWizardSet struct {
	*models.RecordCollection
}

var _ models.RecordSet = UserChangePasswordWizardSet{}

// UserChangePasswordWizardSetHexyaFunc is a dummy function to uniquely match interfaces.
func (s UserChangePasswordWizardSet) UserChangePasswordWizardSetHexyaFunc() {}

// IsValid returns true if this RecordSet has been initialized.
func (s UserChangePasswordWizardSet) IsValid() bool {
	if s.RecordCollection == nil {
		return false
	}
	return s.RecordCollection.IsValid()
}

// ForceLoad reloads the cache for the given fields and updates the ids of this UserChangePasswordWizardSet.
//
// If no fields are given, all DB columns of the UserChangePasswordWizard model are retrieved.
//
// It also returns this UserChangePasswordWizardSet.
func (s UserChangePasswordWizardSet) ForceLoad(fields ...models.FieldName) m.UserChangePasswordWizardSet {
	s.RecordCollection.ForceLoad(fields...)
	return s
}

// Records returns a slice with all the records of this RecordSet, as singleton
// RecordSets
func (s UserChangePasswordWizardSet) Records() []m.UserChangePasswordWizardSet {
	recs := s.RecordCollection.Records()
	res := make([]m.UserChangePasswordWizardSet, len(recs))
	for i, rec := range recs {
		res[i] = rec.Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	}
	return res
}

// CartesianProduct returns the cartesian product of this UserChangePasswordWizardSet with others.
func (s UserChangePasswordWizardSet) CartesianProduct(others ...m.UserChangePasswordWizardSet) []m.UserChangePasswordWizardSet {
	otherSet := make([]models.RecordSet, len(others))
	for i, o := range others {
		otherSet[i] = o
	}
	recs := s.RecordCollection.CartesianProduct(otherSet...)
	res := make([]m.UserChangePasswordWizardSet, len(recs))
	for i, rec := range recs {
		res[i] = rec.Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	}
	return res
}

// First returns the values of the first Record of the RecordSet as a pointer to a UserChangePasswordWizardData.
//
// If this RecordSet is empty, it returns an empty UserChangePasswordWizardData.
func (s UserChangePasswordWizardSet) First() m.UserChangePasswordWizardData {
	return &UserChangePasswordWizardData{
		s.RecordCollection.First(),
	}
}

// All returns the values of all Records of the RecordCollection as a slice of UserChangePasswordWizardData pointers.
func (s UserChangePasswordWizardSet) All() []m.UserChangePasswordWizardData {
	allSlice := s.RecordCollection.All()
	res := make([]m.UserChangePasswordWizardData, len(allSlice))
	for i, v := range allSlice {
		res[i] = &UserChangePasswordWizardData{v}
	}
	return res
}

// Sorted returns a new UserChangePasswordWizardSet sorted according to the given less function.
//
// The less function should return true if rs1 < rs2
func (s UserChangePasswordWizardSet) Sorted(less func(rs1, rs2 m.UserChangePasswordWizardSet) bool) m.UserChangePasswordWizardSet {
	res := s.RecordCollection.Sorted(func(rc1 models.RecordSet, rc2 models.RecordSet) bool {
		return less(UserChangePasswordWizardSet{RecordCollection: rc1.Collection()}, UserChangePasswordWizardSet{RecordCollection: rc2.Collection()})
	})
	return res.Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
}

// Filtered returns a new UserChangePasswordWizardSet with only the elements of this record set
// for which test is true.
//
// Note that if this UserChangePasswordWizardSet is not fully loaded, this function will call the database
// to load the fields before doing the filtering. In this case, it might be more efficient
// to search the database directly with the filter condition.
func (s UserChangePasswordWizardSet) Filtered(test func(rs m.UserChangePasswordWizardSet) bool) m.UserChangePasswordWizardSet {
	res := s.RecordCollection.Filtered(func(rc models.RecordSet) bool {
		return test(UserChangePasswordWizardSet{RecordCollection: rc.Collection()})
	})
	return res.Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
}

// CreateDate is a getter for the value of the "CreateDate" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) CreateDate() dates.DateTime {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CreateDate", "create_date")).(dates.DateTime)
	return res
}

// SetCreateDate is a setter for the value of the "CreateDate" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCreateDate panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetCreateDate(value dates.DateTime) {
	s.RecordCollection.Set(models.NewFieldName("CreateDate", "create_date"), value)
}

// CreateUID is a getter for the value of the "CreateUID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) CreateUID() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CreateUID", "create_uid")).(int64)
	return res
}

// SetCreateUID is a setter for the value of the "CreateUID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCreateUID panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetCreateUID(value int64) {
	s.RecordCollection.Set(models.NewFieldName("CreateUID", "create_uid"), value)
}

// DisplayName is a getter for the value of the "DisplayName" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) DisplayName() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("DisplayName", "display_name")).(string)
	return res
}

// SetDisplayName is a setter for the value of the "DisplayName" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetDisplayName panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetDisplayName(value string) {
	s.RecordCollection.Set(models.NewFieldName("DisplayName", "display_name"), value)
}

// ID is a getter for the value of the "ID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) ID() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ID", "id")).(int64)
	return res
}

// SetID is a setter for the value of the "ID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetID panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetID(value int64) {
	s.RecordCollection.Set(models.NewFieldName("ID", "id"), value)
}

// LastUpdate is a getter for the value of the "LastUpdate" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) LastUpdate() dates.DateTime {
	res, _ := s.RecordCollection.Get(models.NewFieldName("LastUpdate", "__last_update")).(dates.DateTime)
	return res
}

// SetLastUpdate is a setter for the value of the "LastUpdate" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetLastUpdate panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetLastUpdate(value dates.DateTime) {
	s.RecordCollection.Set(models.NewFieldName("LastUpdate", "__last_update"), value)
}

// Users is a getter for the value of the "Users" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) Users() m.UserChangePasswordWizardLineSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Users", "users_ids")).(models.RecordSet).Collection().Wrap("UserChangePasswordWizardLine").(m.UserChangePasswordWizardLineSet)
	return res
}

// SetUsers is a setter for the value of the "Users" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetUsers panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetUsers(value m.UserChangePasswordWizardLineSet) {
	s.RecordCollection.Set(models.NewFieldName("Users", "users_ids"), value)
}

// WriteDate is a getter for the value of the "WriteDate" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) WriteDate() dates.DateTime {
	res, _ := s.RecordCollection.Get(models.NewFieldName("WriteDate", "write_date")).(dates.DateTime)
	return res
}

// SetWriteDate is a setter for the value of the "WriteDate" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetWriteDate panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetWriteDate(value dates.DateTime) {
	s.RecordCollection.Set(models.NewFieldName("WriteDate", "write_date"), value)
}

// WriteUID is a getter for the value of the "WriteUID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s UserChangePasswordWizardSet) WriteUID() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("WriteUID", "write_uid")).(int64)
	return res
}

// SetWriteUID is a setter for the value of the "WriteUID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetWriteUID panics if the RecordSet is empty.
func (s UserChangePasswordWizardSet) SetWriteUID(value int64) {
	s.RecordCollection.Set(models.NewFieldName("WriteUID", "write_uid"), value)
}

// Super returns a RecordSet with a modified callstack so that call to the current
// method will execute the next method layer.
//
// This method is meant to be used inside a method layer function to call its parent,
// such as:
//
//    func (rs h.MyRecordSet) MyMethod() string {
//        res := rs.Super().MyMethod()
//        res += " ok!"
//        return res
//    }
//
// Calls to a different method than the current method will call its next layer only
// if the current method has been called from a layer of the other method. Otherwise,
// it will be the same as calling the other method directly.
func (s UserChangePasswordWizardSet) Super() m.UserChangePasswordWizardSet {
	return s.RecordCollection.Super().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
}

// ModelData returns a new UserChangePasswordWizardData object populated with the values
// of the given FieldMap.
func (s UserChangePasswordWizardSet) ModelData(fMap models.FieldMap) m.UserChangePasswordWizardData {
	res := &UserChangePasswordWizardData{
		models.NewModelData(models.Registry.MustGet("UserChangePasswordWizard")),
	}
	for k, v := range fMap {
		res.Set(models.Registry.MustGet("UserChangePasswordWizard").FieldName(k), v)
	}
	return res
}

// AddDomainLimitOffset adds the given domain, limit, offset
// and order to the current RecordSet query.
func (s UserChangePasswordWizardSet) AddDomainLimitOffset(domain domains.Domain, limit int, offset int, order string) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("AddDomainLimitOffset", domain, limit, offset, order)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// AddModifiers adds the modifiers attribute nodes to given xml doc.
func (s UserChangePasswordWizardSet) AddModifiers(doc *etree.Document, fieldInfos map[string]*models.FieldInfo) {
	s.Collection().Call("AddModifiers", doc, fieldInfos)
}

// AddNameToRelations returns the given RecordData after getting the name of all 2one relation ids
func (s UserChangePasswordWizardSet) AddNamesToRelations(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData {
	res := s.Collection().Call("AddNamesToRelations", data, fInfos)
	resTyped, _ := res.(models.RecordData)
	return resTyped
}

// Aggregates returns the result of this RecordSet query, which must by a grouped query.
func (s UserChangePasswordWizardSet) Aggregates(fieldNames ...models.FieldName) []m.UserChangePasswordWizardGroupAggregateRow {
	res := s.Collection().Call("Aggregates", fieldNames)
	resTyped, _ := res.([]m.UserChangePasswordWizardGroupAggregateRow)
	return resTyped
}

// Browse returns a new RecordSet with only the records with the given ids.
// Note that this function is just a shorcut for Search on a list of ids.
func (s UserChangePasswordWizardSet) Browse(ids []int64) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Browse", ids)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// BrowseOne returns a new RecordSet with only the record with the given id.
// Note that this function is just a shorcut for Search on a given id.
func (s UserChangePasswordWizardSet) BrowseOne(id int64) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("BrowseOne", id)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// ChangePasswordButton is called when the user clicks on 'Apply' button in the popup.
// It updates the user's password.`,
func (s UserChangePasswordWizardSet) ChangePasswordButton() {
	s.Collection().Call("ChangePasswordButton")
}

// CheckAccessRights verifies that the operation given by "operation" is allowed for
// the current user according to the access rights.
//
// operation must be one of "read", "create", "unlink", "write".
func (s UserChangePasswordWizardSet) CheckAccessRights(args webtypes.CheckAccessRightsArgs) bool {
	res := s.Collection().Call("CheckAccessRights", args)
	resTyped, _ := res.(bool)
	return resTyped
}

// CheckExecutionPermission panics if the current user is not allowed to execute the given method.
//
// If dontPanic is false, this function will panic, otherwise it returns true
// if the user has the execution permission and false otherwise.
func (s UserChangePasswordWizardSet) CheckExecutionPermission(method *models.Method, dontPanic ...bool) bool {
	res := s.Collection().Call("CheckExecutionPermission", method, dontPanic)
	resTyped, _ := res.(bool)
	return resTyped
}

// CheckRecursion verifies that there is no loop in a hierarchical structure of records,
// by following the parent relationship using the 'Parent' field until a loop is detected or
// until a top-level record is found.
//
// It returns true if no loop was found, false otherwise`,
func (s UserChangePasswordWizardSet) CheckRecursion() bool {
	res := s.Collection().Call("CheckRecursion")
	resTyped, _ := res.(bool)
	return resTyped
}

// ComputeDisplayName updates the DisplayName field with the result of NameGet
func (s UserChangePasswordWizardSet) ComputeDisplayName() *models.ModelData {
	res := s.Collection().Call("ComputeDisplayName")
	resTyped, _ := res.(*models.ModelData)
	return resTyped
}

// ComputeLastUpdate returns the last datetime at which the record has been updated.
func (s UserChangePasswordWizardSet) ComputeLastUpdate() *models.ModelData {
	res := s.Collection().Call("ComputeLastUpdate")
	resTyped, _ := res.(*models.ModelData)
	return resTyped
}

// Copy duplicates the given UserChangePasswordWizard record, overridding values with overrides.
func (s UserChangePasswordWizardSet) Copy(overrides m.UserChangePasswordWizardData) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Copy", overrides)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// CopyData copies given record's data with all its fields values, overriding values with overrides.
func (s UserChangePasswordWizardSet) CopyData(overrides m.UserChangePasswordWizardData) m.UserChangePasswordWizardData {
	res := s.Collection().Call("CopyData", overrides)
	resTyped, _ := res.(models.RecordData)
	return resTyped.Underlying().Wrap().(m.UserChangePasswordWizardData)
}

// Create inserts a UserChangePasswordWizard record in the database from the given data.
// Returns the created UserChangePasswordWizardSet.
func (s UserChangePasswordWizardSet) Create(data m.UserChangePasswordWizardData) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Create", data)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// DefaultGet returns a UserChangePasswordWizardData with the default values for the model.
func (s UserChangePasswordWizardSet) DefaultGet() m.UserChangePasswordWizardData {
	res := s.Collection().Call("DefaultGet")
	resTyped, _ := res.(models.RecordData)
	return resTyped.Underlying().Wrap().(m.UserChangePasswordWizardData)
}

// Enqueue queues the execution of the given method with the given arguments on this recordset.
// description will be the name given to the job.
func (s UserChangePasswordWizardSet) Enqueue(description string, method models.Methoder, arguments ...interface{}) m.QueueJobSet {
	res := s.Collection().Call("Enqueue", description, method, arguments)
	resTyped, _ := res.(m.QueueJobSet)
	return resTyped
}

// Equals returns true if this RecordSet is the same as other
// i.e. they are of the same model and have the same ids
func (s UserChangePasswordWizardSet) Equals(other m.UserChangePasswordWizardSet) bool {
	res := s.Collection().Call("Equals", other)
	resTyped, _ := res.(bool)
	return resTyped
}

// ExecuteO2MActions executes the actions on one2many fields given by
// the list of triplets received from the client
func (s UserChangePasswordWizardSet) ExecuteO2MActions(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{} {
	res := s.Collection().Call("ExecuteO2MActions", fieldName, info, value)
	resTyped, _ := res.(interface{})
	return resTyped
}

// Fetch query the database with the current filter and returns a RecordSet
// with the queries ids.
//
// Fetch is lazy and only return ids. Use Load() instead if you want to fetch all fields.
func (s UserChangePasswordWizardSet) Fetch() m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Fetch")
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// FieldGet returns the definition of the given field.
// The string, help, and selection (if present) attributes are translated.
func (s UserChangePasswordWizardSet) FieldGet(field models.FieldName) *models.FieldInfo {
	res := s.Collection().Call("FieldGet", field)
	resTyped, _ := res.(*models.FieldInfo)
	return resTyped
}

// FieldsGet returns the definition of each field.
// The embedded fields are included.
// The string, help, and selection (if present) attributes are translated.
//
// The result map is indexed by the fields JSON names.
func (s UserChangePasswordWizardSet) FieldsGet(args models.FieldsGetArgs) map[string]*models.FieldInfo {
	res := s.Collection().Call("FieldsGet", args)
	resTyped, _ := res.(map[string]*models.FieldInfo)
	return resTyped
}

// FieldsViewGet is the base implementation of the 'FieldsViewGet' method which
// gets the detailed composition of the requested view like fields, mixin,
// view architecture.
func (s UserChangePasswordWizardSet) FieldsViewGet(args webtypes.FieldsViewGetParams) *webtypes.FieldsViewData {
	res := s.Collection().Call("FieldsViewGet", args)
	resTyped, _ := res.(*webtypes.FieldsViewData)
	return resTyped
}

// FormatRelationFields returns the given data with all relation fields converted to int64 or []int64
func (s UserChangePasswordWizardSet) FormatRelationFields(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData {
	res := s.Collection().Call("FormatRelationFields", data, fInfos)
	resTyped, _ := res.(models.RecordData)
	return resTyped
}

// GetFormviewAction returns an action to open the document.
// This method is meant to be overridden in addons that want
// to give specific view ids for example.`,
func (s UserChangePasswordWizardSet) GetFormviewAction() *actions.Action {
	res := s.Collection().Call("GetFormviewAction")
	resTyped, _ := res.(*actions.Action)
	return resTyped
}

// GetFormviewID returns an view id to open the document with.
// This method is meant to be overridden in addons that want
// to give specific view ids for example.
func (s UserChangePasswordWizardSet) GetFormviewId() string {
	res := s.Collection().Call("GetFormviewId")
	resTyped, _ := res.(string)
	return resTyped
}

// GetRecord returns the Recordset with the given externalID. It panics if the externalID does not exist.
func (s UserChangePasswordWizardSet) GetRecord(externalID string) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("GetRecord", externalID)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// GetToolbar returns a toolbar populated with the actions linked to this model
func (s UserChangePasswordWizardSet) GetToolbar() webtypes.Toolbar {
	res := s.Collection().Call("GetToolbar")
	resTyped, _ := res.(webtypes.Toolbar)
	return resTyped
}

// GroupBy returns a new RecordSet grouped with the given GROUP BY expressions.
func (s UserChangePasswordWizardSet) GroupBy(exprs ...models.FieldName) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("GroupBy", exprs)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Intersect returns a new RecordCollection with only the records that are both
// in this RecordCollection and in the other RecordSet.
func (s UserChangePasswordWizardSet) Intersect(other m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Intersect", other)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Limit returns a new RecordSet with only the first 'limit' records.
func (s UserChangePasswordWizardSet) Limit(limit int) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Limit", limit)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Load looks up cache for fields of the RecordCollection and
// query database for missing values.
// fields are the fields to retrieve in the expression format,
// i.e. "User.Profile.Age" or "user_id.profile_id.age".
// If no fields are given, all DB columns of the RecordCollection's
// model are retrieved.
func (s UserChangePasswordWizardSet) Load(fields ...models.FieldName) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Load", fields)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// LoadViews returns the data for all the views and filters required in the parameters.
func (s UserChangePasswordWizardSet) LoadViews(args webtypes.LoadViewsArgs) *webtypes.LoadViewsData {
	res := s.Collection().Call("LoadViews", args)
	resTyped, _ := res.(*webtypes.LoadViewsData)
	return resTyped
}

// ManageGroupsOnFields adds the invisible attribute to fields nodes if the current
// user does not belong to one of the groups of the 'groups' attribute
func (s UserChangePasswordWizardSet) ManageGroupsOnFields(doc *etree.Document, fieldInfos map[string]*models.FieldInfo) {
	s.Collection().Call("ManageGroupsOnFields", doc, fieldInfos)
}

// NameGet retrieves the human readable name of this record.`,
func (s UserChangePasswordWizardSet) NameGet() string {
	res := s.Collection().Call("NameGet")
	resTyped, _ := res.(string)
	return resTyped
}

// NameSearch searches for records that have a display name matching the given
// "name" pattern when compared with the given "operator", while also
// matching the optional search domain ("args").
//
// This is used for example to provide suggestions based on a partial
// value for a relational field. Sometimes be seen as the inverse
// function of NameGet but it is not guaranteed to be.
func (s UserChangePasswordWizardSet) NameSearch(params webtypes.NameSearchParams) []webtypes.RecordIDWithName {
	res := s.Collection().Call("NameSearch", params)
	resTyped, _ := res.([]webtypes.RecordIDWithName)
	return resTyped
}

// New creates a UserChangePasswordWizard record in memory from the given data.
// Such UserChangePasswordWizardSet has a negative ID and cannot be reloaded from the database
func (s UserChangePasswordWizardSet) New(data m.UserChangePasswordWizardData) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("New", data)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// NormalizeM2MData converts the list of triplets received from the client into the final list of ids
// to keep in the Many2Many relationship of this model through the given field.
func (s UserChangePasswordWizardSet) NormalizeM2MData(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{} {
	res := s.Collection().Call("NormalizeM2MData", fieldName, info, value)
	resTyped, _ := res.(interface{})
	return resTyped
}

// Offset returns a new RecordSet with only the records starting at offset
func (s UserChangePasswordWizardSet) Offset(offset int) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Offset", offset)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Onchange returns the values that must be modified according to each field's Onchange
// method in the pseudo-record given as params.Values`,
func (s UserChangePasswordWizardSet) Onchange(params models.OnchangeParams) models.OnchangeResult {
	res := s.Collection().Call("Onchange", params)
	resTyped, _ := res.(models.OnchangeResult)
	return resTyped
}

// OrderBy returns a new RecordSet ordered by the given ORDER BY expressions.
// Each expression contains a field name and optionally one of "asc" or "desc", such as:
//
// rs.OrderBy("Company", "Name desc")
func (s UserChangePasswordWizardSet) OrderBy(exprs ...string) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("OrderBy", exprs)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// PostProcessCreateValues updates FK of related records created at the same time.
//
// This method is meant to be called with the second returned value of ProcessCreateValues
// after record creation.
func (s UserChangePasswordWizardSet) PostProcessCreateValues(data models.RecordData) {
	s.Collection().Call("PostProcessCreateValues", data)
}

// PostProcessFilters transforms a map[models.FieldName]models.Conditioner
// in a map[string][]interface{} which acts as a map of domains.
func (s UserChangePasswordWizardSet) PostProcessFilters(in map[models.FieldName]models.Conditioner) map[string][]interface{} {
	res := s.Collection().Call("PostProcessFilters", in)
	resTyped, _ := res.(map[string][]interface{})
	return resTyped
}

// ProcessCreateValues updates the given data values for Create method to be
// compatible with the ORM, in particular for relation fields.
//
// It returns a first FieldMap to be used as argument to the Create method, and
// a second map to be used with a subsequent call to PostProcessCreateValues (for
// updating FKs pointing to the newly created record).
func (s UserChangePasswordWizardSet) ProcessCreateValues(data models.RecordData) (models.RecordData, models.RecordData) {
	res := s.Collection().CallMulti("ProcessCreateValues", data)
	resTyped0, _ := res[0].(models.RecordData)
	resTyped1, _ := res[1].(models.RecordData)
	return resTyped0, resTyped1
}

// ProcessElementAttrs returns a modifiers map according to the domain
// in attrs of the given element
func (s UserChangePasswordWizardSet) ProcessElementAttrs(element *etree.Element, fieldInfos map[string]*models.FieldInfo) map[string]interface{} {
	res := s.Collection().Call("ProcessElementAttrs", element, fieldInfos)
	resTyped, _ := res.(map[string]interface{})
	return resTyped
}

// ProcessFieldElementModifiers modifies the given modifiers map by taking into account:
// - 'invisible', 'readonly' and 'required' attributes in field tags
// - 'ReadOnly' and 'Required' parameters of the model's field'
// It returns the modified map.
func (s UserChangePasswordWizardSet) ProcessFieldElementModifiers(element *etree.Element, fieldInfos map[string]*models.FieldInfo, modifiers map[string]interface{}) map[string]interface{} {
	res := s.Collection().Call("ProcessFieldElementModifiers", element, fieldInfos, modifiers)
	resTyped, _ := res.(map[string]interface{})
	return resTyped
}

// ProcessView makes all the necessary modifications to the view
// arch and returns the new xml string.`,
func (s UserChangePasswordWizardSet) ProcessView(arch *etree.Document, fieldInfos map[string]*models.FieldInfo) string {
	res := s.Collection().Call("ProcessView", arch, fieldInfos)
	resTyped, _ := res.(string)
	return resTyped
}

// ProcessWriteValues updates the given data values for Write method to be
// compatible with the ORM, in particular for relation fields
func (s UserChangePasswordWizardSet) ProcessWriteValues(data models.RecordData) models.RecordData {
	res := s.Collection().Call("ProcessWriteValues", data)
	resTyped, _ := res.(models.RecordData)
	return resTyped
}

// Read reads the database and returns a slice of FieldMap of the given model.
func (s UserChangePasswordWizardSet) Read(fields models.FieldNames) []models.RecordData {
	res := s.Collection().Call("Read", fields)
	resTyped, _ := res.([]models.RecordData)
	return resTyped
}

// ReadGroup gets a list of record aggregates according to the given parameters.
func (s UserChangePasswordWizardSet) ReadGroup(params webtypes.ReadGroupParams) []models.FieldMap {
	res := s.Collection().Call("ReadGroup", params)
	resTyped, _ := res.([]models.FieldMap)
	return resTyped
}

// SQLFromCondition returns the WHERE clause sql and arguments corresponding to
// the given condition.`,
func (s UserChangePasswordWizardSet) SQLFromCondition(c *models.Condition) (string, models.SQLParams) {
	res := s.Collection().CallMulti("SQLFromCondition", c)
	resTyped0, _ := res[0].(string)
	resTyped1, _ := res[1].(models.SQLParams)
	return resTyped0, resTyped1
}

// Search returns a new UserChangePasswordWizardSet filtering on the current one with the additional given Condition
func (s UserChangePasswordWizardSet) Search(condition q.UserChangePasswordWizardCondition) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Search", condition)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// SearchAll returns a RecordSet with all items of the table, regardless of the
// current RecordSet query. It is mainly meant to be used on an empty RecordSet.
func (s UserChangePasswordWizardSet) SearchAll() m.UserChangePasswordWizardSet {
	res := s.Collection().Call("SearchAll")
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// SearchByName searches for UserChangePasswordWizard records that have a display name matching the given
// "name" pattern when compared with the given "op" operator, while also
// matching the optional search condition ("additionalCond").
//
// This is used for example to provide suggestions based on a partial
// value for a relational field. Sometimes be seen as the inverse
// function of NameGet but it is not guaranteed to be.
func (s UserChangePasswordWizardSet) SearchByName(name string, op operator.Operator, additionalCond q.UserChangePasswordWizardCondition, limit int) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("SearchByName", name, op, additionalCond, limit)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// SearchCount fetch from the database the number of records that match the RecordSet conditions.
func (s UserChangePasswordWizardSet) SearchCount() int {
	res := s.Collection().Call("SearchCount")
	resTyped, _ := res.(int)
	return resTyped
}

// SearchDomain execute a search on the given domain.
func (s UserChangePasswordWizardSet) SearchDomain(domain domains.Domain) m.CommonMixinSet {
	res := s.Collection().Call("SearchDomain", domain)
	resTyped, _ := res.(m.CommonMixinSet)
	return resTyped
}

// SearchRead retrieves database records according to the filters defined in params.
func (s UserChangePasswordWizardSet) SearchRead(params webtypes.SearchParams) []models.RecordData {
	res := s.Collection().Call("SearchRead", params)
	resTyped, _ := res.([]models.RecordData)
	return resTyped
}

// SortedByField returns a new record set with the same records as rc but sorted by the given field.
// If reverse is true, the sort is done in reversed order
func (s UserChangePasswordWizardSet) SortedByField(namer models.FieldName, reverse bool) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("SortedByField", namer, reverse)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// SortedDefault returns a new record set with the same records as rc but sorted according
// to the default order of this model
func (s UserChangePasswordWizardSet) SortedDefault() m.UserChangePasswordWizardSet {
	res := s.Collection().Call("SortedDefault")
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Subtract returns a RecordSet with the Records that are in this
// RecordCollection but not in the given 'other' one.
// The result is guaranteed to be a set of unique records.
func (s UserChangePasswordWizardSet) Subtract(other m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Subtract", other)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Sudo returns a new RecordSet with the given userID
// or the superuser ID if not specified
func (s UserChangePasswordWizardSet) Sudo(userID ...int64) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Sudo", userID)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Union returns a new RecordSet that is the union of this RecordSet and the given
// "other" RecordSet. The result is guaranteed to be a set of unique records.
func (s UserChangePasswordWizardSet) Union(other m.UserChangePasswordWizardSet) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("Union", other)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Unlink deletes the given records in the database.
func (s UserChangePasswordWizardSet) Unlink() int64 {
	res := s.Collection().Call("Unlink")
	resTyped, _ := res.(int64)
	return resTyped
}

// WebReadGroup returns the result of a read_group (and optionally search for and read records inside each
// group), and the total number of groups matching the search domain.
func (s UserChangePasswordWizardSet) WebReadGroup(params webtypes.WebReadGroupParams) webtypes.WebReadGroupResult {
	res := s.Collection().Call("WebReadGroup", params)
	resTyped, _ := res.(webtypes.WebReadGroupResult)
	return resTyped
}

// WebReadGroupPrivate performs a read_group and optionally a web_search_read for each group.
func (s UserChangePasswordWizardSet) WebReadGroupPrivate(params webtypes.WebReadGroupParams) []models.FieldMap {
	res := s.Collection().Call("WebReadGroupPrivate", params)
	resTyped, _ := res.([]models.FieldMap)
	return resTyped
}

// WebSearchRead performs a search_read and a search_count.
func (s UserChangePasswordWizardSet) WebSearchRead(params webtypes.SearchParams) webtypes.SearchReadResult {
	res := s.Collection().Call("WebSearchRead", params)
	resTyped, _ := res.(webtypes.SearchReadResult)
	return resTyped
}

// WithContext returns a copy of the current RecordSet with
// its context extended by the given key and value.
func (s UserChangePasswordWizardSet) WithContext(key string, value interface{}) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("WithContext", key, value)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// WithEnv returns a copy of the current RecordSet with the given Environment.
func (s UserChangePasswordWizardSet) WithEnv(env models.Environment) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("WithEnv", env)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// WithNewContext returns a copy of the current RecordSet with its context
// replaced by the given one.
func (s UserChangePasswordWizardSet) WithNewContext(context *types.Context) m.UserChangePasswordWizardSet {
	res := s.Collection().Call("WithNewContext", context)
	resTyped := res.(models.RecordSet).Collection().Wrap("UserChangePasswordWizard").(m.UserChangePasswordWizardSet)
	return resTyped
}

// Write is the base implementation of the 'Write' method which updates
// UserChangePasswordWizard records in the database with the given data.
func (s UserChangePasswordWizardSet) Write(data m.UserChangePasswordWizardData) bool {
	res := s.Collection().Call("Write", data)
	resTyped, _ := res.(bool)
	return resTyped
}

// Aggregates returns the result of this RecordSet query, which must by a grouped query.
func m_UserChangePasswordWizard_Aggregates(rs UserChangePasswordWizardSet, fieldNames ...models.FieldName) []m.UserChangePasswordWizardGroupAggregateRow {
	lines := rs.RecordCollection.Aggregates(fieldNames...)
	res := make([]m.UserChangePasswordWizardGroupAggregateRow, len(lines))
	for i, l := range lines {
		res[i] = UserChangePasswordWizardGroupAggregateRow{
			values: l.Values.Wrap().(m.UserChangePasswordWizardData),
			count:  l.Count,
			condition: q.UserChangePasswordWizardCondition{
				Condition: l.Condition,
			},
		}
	}
	return res
}

func init() {
	models.CreateModel("UserChangePasswordWizard", models.TransientModel)
	models.Registry.MustGet("UserChangePasswordWizard").AddFields(map[string]models.FieldDefinition{
		"CreateDate":  models.DummyField{},
		"CreateUID":   models.DummyField{},
		"DisplayName": models.DummyField{},
		"LastUpdate":  models.DummyField{},
		"WriteDate":   models.DummyField{},
		"WriteUID":    models.DummyField{},
	})
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("AddDomainLimitOffset")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("AddModifiers")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("AddNamesToRelations")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Browse")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("BrowseOne")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ChangePasswordButton")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("CheckAccessRights")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("CheckExecutionPermission")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("CheckRecursion")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ComputeDisplayName")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ComputeLastUpdate")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Copy")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("CopyData")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Create")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("DefaultGet")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Enqueue")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Equals")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ExecuteO2MActions")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Fetch")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("FieldGet")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("FieldsGet")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("FieldsViewGet")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("FormatRelationFields")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("GetFormviewAction")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("GetFormviewId")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("GetRecord")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("GetToolbar")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("GroupBy")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Intersect")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Limit")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Load")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("LoadViews")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ManageGroupsOnFields")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("NameGet")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("NameSearch")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("New")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("NormalizeM2MData")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Offset")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Onchange")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("OrderBy")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("PostProcessCreateValues")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("PostProcessFilters")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ProcessCreateValues")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ProcessElementAttrs")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ProcessFieldElementModifiers")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ProcessView")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ProcessWriteValues")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Read")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("ReadGroup")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SQLFromCondition")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Search")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SearchAll")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SearchByName")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SearchCount")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SearchDomain")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SearchRead")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SortedByField")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("SortedDefault")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Subtract")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Sudo")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Union")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Unlink")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("WebReadGroup")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("WebReadGroupPrivate")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("WebSearchRead")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("WithContext")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("WithEnv")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("WithNewContext")
	models.Registry.MustGet("UserChangePasswordWizard").AddEmptyMethod("Write")
	models.Registry.MustGet("UserChangePasswordWizard").NewMethod("Aggregates", m_UserChangePasswordWizard_Aggregates)
	models.RegisterRecordSetWrapper("UserChangePasswordWizard", UserChangePasswordWizardSet{})
	models.RegisterModelDataWrapper("UserChangePasswordWizard", UserChangePasswordWizardData{})
}
