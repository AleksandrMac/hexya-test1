// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package h

import (
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/pool/h/config_parameter"
	"github.com/hexya-erp/pool/m"
	"github.com/hexya-erp/pool/q"
)

// ------- MODEL ---------

// ConfigParameterModel is a strongly typed model definition that is used
// to extend the ConfigParameter model or to get a ConfigParameterSet through
// its NewSet() function.
//
// To get the unique instance of this type, call ConfigParameter().
type ConfigParameterModel struct {
	*models.Model
}

// NewSet returns a new ConfigParameterSet instance in the given Environment
func (md ConfigParameterModel) NewSet(env models.Environment) m.ConfigParameterSet {
	return config_parameter.ConfigParameterSet{
		RecordCollection: env.Pool("ConfigParameter"),
	}
}

// Create creates a new ConfigParameter record and returns the newly created
// ConfigParameterSet instance.
func (md ConfigParameterModel) Create(env models.Environment, data m.ConfigParameterData) m.ConfigParameterSet {
	return config_parameter.ConfigParameterSet{
		RecordCollection: md.Model.Create(env, data),
	}
}

// Search searches the database and returns a new ConfigParameterSet instance
// with the records found.
func (md ConfigParameterModel) Search(env models.Environment, cond q.ConfigParameterCondition) m.ConfigParameterSet {
	return config_parameter.ConfigParameterSet{
		RecordCollection: md.Model.Search(env, cond),
	}
}

// Browse returns a new RecordSet with the records with the given ids.
// Note that this function is just a shorcut for Search on a list of ids.
func (md ConfigParameterModel) Browse(env models.Environment, ids []int64) m.ConfigParameterSet {
	return config_parameter.ConfigParameterSet{
		RecordCollection: md.Model.Browse(env, ids),
	}
}

// BrowseOne returns a new RecordSet with the record with the given id.
// Note that this function is just a shorcut for Search on the given id.
func (md ConfigParameterModel) BrowseOne(env models.Environment, id int64) m.ConfigParameterSet {
	return config_parameter.ConfigParameterSet{
		RecordCollection: md.Model.BrowseOne(env, id),
	}
}

// NewData returns a pointer to a new empty ConfigParameterData instance.
//
// Optional field maps if given will be used to populate the data.
func (md ConfigParameterModel) NewData(fm ...models.FieldMap) m.ConfigParameterData {
	return &config_parameter.ConfigParameterData{
		ModelData: models.NewModelData(ConfigParameter(), fm...),
	}
}

// Fields returns the Field Collection of the ConfigParameter Model
func (md ConfigParameterModel) Fields() config_parameter.FieldsCollection {
	return config_parameter.FieldsCollection{
		FieldsCollection: md.Model.Fields(),
	}
}

// Methods returns the Method Collection of the ConfigParameter Model
func (md ConfigParameterModel) Methods() config_parameter.MethodsCollection {
	return config_parameter.MethodsCollection{
		MethodsCollection: md.Model.Methods(),
	}
}

// Underlying returns the underlying models.Model instance
func (md ConfigParameterModel) Underlying() *models.Model {
	return md.Model
}

var _ models.Modeler = ConfigParameterModel{}

// Coalesce takes a list of ConfigParameterSet and return the first non-empty one
// if every record set is empty, it will return the last given
func (md ConfigParameterModel) Coalesce(lst ...m.ConfigParameterSet) m.ConfigParameterSet {
	var last m.ConfigParameterSet
	for _, elem := range lst {
		if elem.Collection().IsNotEmpty() {
			return elem
		}
		last = elem
	}
	return last
}

// ConfigParameter returns the unique instance of the ConfigParameterModel type
// which is used to extend the ConfigParameter model or to get a ConfigParameterSet through
// its NewSet() function.
func ConfigParameter() ConfigParameterModel {
	return ConfigParameterModel{
		Model: models.Registry.MustGet("ConfigParameter"),
	}
}
