// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package h

import (
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/pool/h/base_mixin"
	"github.com/hexya-erp/pool/m"
)

// ------- MODEL ---------

// BaseMixinModel is a strongly typed model definition that is used
// to extend the BaseMixin model or to get a BaseMixinSet through
// its NewSet() function.
//
// To get the unique instance of this type, call BaseMixin().
type BaseMixinModel struct {
	*models.Model
}

// NewSet returns a new BaseMixinSet instance wrapping the given model in the given Environment
func (md BaseMixinModel) NewSet(env models.Environment, modelName string) m.BaseMixinSet {
	return base_mixin.BaseMixinSet{
		RecordCollection: env.Pool(modelName),
	}
}

// NewData returns a pointer to a new empty BaseMixinData instance.
//
// Optional field maps if given will be used to populate the data.
func (md BaseMixinModel) NewData(fm ...models.FieldMap) m.BaseMixinData {
	return &base_mixin.BaseMixinData{
		ModelData: models.NewModelData(BaseMixin(), fm...),
	}
}

// Fields returns the Field Collection of the BaseMixin Model
func (md BaseMixinModel) Fields() base_mixin.FieldsCollection {
	return base_mixin.FieldsCollection{
		FieldsCollection: md.Model.Fields(),
	}
}

// Methods returns the Method Collection of the BaseMixin Model
func (md BaseMixinModel) Methods() base_mixin.MethodsCollection {
	return base_mixin.MethodsCollection{
		MethodsCollection: md.Model.Methods(),
	}
}

// Underlying returns the underlying models.Model instance
func (md BaseMixinModel) Underlying() *models.Model {
	return md.Model
}

var _ models.Modeler = BaseMixinModel{}

// Coalesce takes a list of BaseMixinSet and return the first non-empty one
// if every record set is empty, it will return the last given
func (md BaseMixinModel) Coalesce(lst ...m.BaseMixinSet) m.BaseMixinSet {
	var last m.BaseMixinSet
	for _, elem := range lst {
		if elem.Collection().IsNotEmpty() {
			return elem
		}
		last = elem
	}
	return last
}

// BaseMixin returns the unique instance of the BaseMixinModel type
// which is used to extend the BaseMixin model or to get a BaseMixinSet through
// its NewSet() function.
func BaseMixin() BaseMixinModel {
	return BaseMixinModel{
		Model: models.Registry.MustGet("BaseMixin"),
	}
}
