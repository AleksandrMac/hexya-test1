// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package partner

import (
	"github.com/beevik/etree"
	"github.com/hexya-addons/web/domains"
	"github.com/hexya-addons/web/webtypes"
	"github.com/hexya-erp/hexya/src/actions"
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types"
	"github.com/hexya-erp/hexya/src/models/types/dates"
	"github.com/hexya-erp/pool/m"
	"github.com/hexya-erp/pool/q"
)

// ------- FIELD COLLECTION ----------

// A FieldsCollection is the collection of fields
// of the Partner model.
type FieldsCollection struct {
	*models.FieldsCollection
}

// Active returns a pointer to the Active Field.
func (c FieldsCollection) Active() *models.Field {
	return c.MustGet("Active")
}

// ActiveLangCount returns a pointer to the ActiveLangCount Field.
func (c FieldsCollection) ActiveLangCount() *models.Field {
	return c.MustGet("ActiveLangCount")
}

// Banks returns a pointer to the Banks Field.
func (c FieldsCollection) Banks() *models.Field {
	return c.MustGet("Banks")
}

// Barcode returns a pointer to the Barcode Field.
func (c FieldsCollection) Barcode() *models.Field {
	return c.MustGet("Barcode")
}

// Categories returns a pointer to the Categories Field.
func (c FieldsCollection) Categories() *models.Field {
	return c.MustGet("Categories")
}

// Children returns a pointer to the Children Field.
func (c FieldsCollection) Children() *models.Field {
	return c.MustGet("Children")
}

// City returns a pointer to the City Field.
func (c FieldsCollection) City() *models.Field {
	return c.MustGet("City")
}

// Color returns a pointer to the Color Field.
func (c FieldsCollection) Color() *models.Field {
	return c.MustGet("Color")
}

// Comment returns a pointer to the Comment Field.
func (c FieldsCollection) Comment() *models.Field {
	return c.MustGet("Comment")
}

// CommercialCompanyName returns a pointer to the CommercialCompanyName Field.
func (c FieldsCollection) CommercialCompanyName() *models.Field {
	return c.MustGet("CommercialCompanyName")
}

// CommercialPartner returns a pointer to the CommercialPartner Field.
func (c FieldsCollection) CommercialPartner() *models.Field {
	return c.MustGet("CommercialPartner")
}

// Company returns a pointer to the Company Field.
func (c FieldsCollection) Company() *models.Field {
	return c.MustGet("Company")
}

// CompanyName returns a pointer to the CompanyName Field.
func (c FieldsCollection) CompanyName() *models.Field {
	return c.MustGet("CompanyName")
}

// CompanyType returns a pointer to the CompanyType Field.
func (c FieldsCollection) CompanyType() *models.Field {
	return c.MustGet("CompanyType")
}

// ContactAddress returns a pointer to the ContactAddress Field.
func (c FieldsCollection) ContactAddress() *models.Field {
	return c.MustGet("ContactAddress")
}

// Country returns a pointer to the Country Field.
func (c FieldsCollection) Country() *models.Field {
	return c.MustGet("Country")
}

// CreateDate returns a pointer to the CreateDate Field.
func (c FieldsCollection) CreateDate() *models.Field {
	return c.MustGet("CreateDate")
}

// CreateUID returns a pointer to the CreateUID Field.
func (c FieldsCollection) CreateUID() *models.Field {
	return c.MustGet("CreateUID")
}

// CreditLimit returns a pointer to the CreditLimit Field.
func (c FieldsCollection) CreditLimit() *models.Field {
	return c.MustGet("CreditLimit")
}

// Date returns a pointer to the Date Field.
func (c FieldsCollection) Date() *models.Field {
	return c.MustGet("Date")
}

// DisplayName returns a pointer to the DisplayName Field.
func (c FieldsCollection) DisplayName() *models.Field {
	return c.MustGet("DisplayName")
}

// Email returns a pointer to the Email Field.
func (c FieldsCollection) Email() *models.Field {
	return c.MustGet("Email")
}

// EmailFormatted returns a pointer to the EmailFormatted Field.
func (c FieldsCollection) EmailFormatted() *models.Field {
	return c.MustGet("EmailFormatted")
}

// Employee returns a pointer to the Employee Field.
func (c FieldsCollection) Employee() *models.Field {
	return c.MustGet("Employee")
}

// Function returns a pointer to the Function Field.
func (c FieldsCollection) Function() *models.Field {
	return c.MustGet("Function")
}

// HexyaExternalID returns a pointer to the HexyaExternalID Field.
func (c FieldsCollection) HexyaExternalID() *models.Field {
	return c.MustGet("HexyaExternalID")
}

// HexyaVersion returns a pointer to the HexyaVersion Field.
func (c FieldsCollection) HexyaVersion() *models.Field {
	return c.MustGet("HexyaVersion")
}

// ID returns a pointer to the ID Field.
func (c FieldsCollection) ID() *models.Field {
	return c.MustGet("ID")
}

// Image returns a pointer to the Image Field.
func (c FieldsCollection) Image() *models.Field {
	return c.MustGet("Image")
}

// Image1024 returns a pointer to the Image1024 Field.
func (c FieldsCollection) Image1024() *models.Field {
	return c.MustGet("Image1024")
}

// Image128 returns a pointer to the Image128 Field.
func (c FieldsCollection) Image128() *models.Field {
	return c.MustGet("Image128")
}

// Image1920 returns a pointer to the Image1920 Field.
func (c FieldsCollection) Image1920() *models.Field {
	return c.MustGet("Image1920")
}

// Image256 returns a pointer to the Image256 Field.
func (c FieldsCollection) Image256() *models.Field {
	return c.MustGet("Image256")
}

// Image512 returns a pointer to the Image512 Field.
func (c FieldsCollection) Image512() *models.Field {
	return c.MustGet("Image512")
}

// ImageMedium returns a pointer to the ImageMedium Field.
func (c FieldsCollection) ImageMedium() *models.Field {
	return c.MustGet("ImageMedium")
}

// ImageSmall returns a pointer to the ImageSmall Field.
func (c FieldsCollection) ImageSmall() *models.Field {
	return c.MustGet("ImageSmall")
}

// Industry returns a pointer to the Industry Field.
func (c FieldsCollection) Industry() *models.Field {
	return c.MustGet("Industry")
}

// IsCompany returns a pointer to the IsCompany Field.
func (c FieldsCollection) IsCompany() *models.Field {
	return c.MustGet("IsCompany")
}

// Lang returns a pointer to the Lang Field.
func (c FieldsCollection) Lang() *models.Field {
	return c.MustGet("Lang")
}

// LastUpdate returns a pointer to the LastUpdate Field.
func (c FieldsCollection) LastUpdate() *models.Field {
	return c.MustGet("LastUpdate")
}

// Latitude returns a pointer to the Latitude Field.
func (c FieldsCollection) Latitude() *models.Field {
	return c.MustGet("Latitude")
}

// Longitude returns a pointer to the Longitude Field.
func (c FieldsCollection) Longitude() *models.Field {
	return c.MustGet("Longitude")
}

// Mobile returns a pointer to the Mobile Field.
func (c FieldsCollection) Mobile() *models.Field {
	return c.MustGet("Mobile")
}

// Name returns a pointer to the Name Field.
func (c FieldsCollection) Name() *models.Field {
	return c.MustGet("Name")
}

// Parent returns a pointer to the Parent Field.
func (c FieldsCollection) Parent() *models.Field {
	return c.MustGet("Parent")
}

// ParentName returns a pointer to the ParentName Field.
func (c FieldsCollection) ParentName() *models.Field {
	return c.MustGet("ParentName")
}

// PartnerShare returns a pointer to the PartnerShare Field.
func (c FieldsCollection) PartnerShare() *models.Field {
	return c.MustGet("PartnerShare")
}

// Phone returns a pointer to the Phone Field.
func (c FieldsCollection) Phone() *models.Field {
	return c.MustGet("Phone")
}

// Ref returns a pointer to the Ref Field.
func (c FieldsCollection) Ref() *models.Field {
	return c.MustGet("Ref")
}

// SameVATPartner returns a pointer to the SameVATPartner Field.
func (c FieldsCollection) SameVATPartner() *models.Field {
	return c.MustGet("SameVATPartner")
}

// State returns a pointer to the State Field.
func (c FieldsCollection) State() *models.Field {
	return c.MustGet("State")
}

// Street returns a pointer to the Street Field.
func (c FieldsCollection) Street() *models.Field {
	return c.MustGet("Street")
}

// Street2 returns a pointer to the Street2 Field.
func (c FieldsCollection) Street2() *models.Field {
	return c.MustGet("Street2")
}

// TZ returns a pointer to the TZ Field.
func (c FieldsCollection) TZ() *models.Field {
	return c.MustGet("TZ")
}

// TZOffset returns a pointer to the TZOffset Field.
func (c FieldsCollection) TZOffset() *models.Field {
	return c.MustGet("TZOffset")
}

// Title returns a pointer to the Title Field.
func (c FieldsCollection) Title() *models.Field {
	return c.MustGet("Title")
}

// Type returns a pointer to the Type Field.
func (c FieldsCollection) Type() *models.Field {
	return c.MustGet("Type")
}

// User returns a pointer to the User Field.
func (c FieldsCollection) User() *models.Field {
	return c.MustGet("User")
}

// Users returns a pointer to the Users Field.
func (c FieldsCollection) Users() *models.Field {
	return c.MustGet("Users")
}

// VAT returns a pointer to the VAT Field.
func (c FieldsCollection) VAT() *models.Field {
	return c.MustGet("VAT")
}

// Website returns a pointer to the Website Field.
func (c FieldsCollection) Website() *models.Field {
	return c.MustGet("Website")
}

// WriteDate returns a pointer to the WriteDate Field.
func (c FieldsCollection) WriteDate() *models.Field {
	return c.MustGet("WriteDate")
}

// WriteUID returns a pointer to the WriteUID Field.
func (c FieldsCollection) WriteUID() *models.Field {
	return c.MustGet("WriteUID")
}

// Zip returns a pointer to the Zip Field.
func (c FieldsCollection) Zip() *models.Field {
	return c.MustGet("Zip")
}

// ------- METHOD COLLECTION ----------

// A MethodsCollection is the collection of methods
// of the Partner model.
type MethodsCollection struct {
	*models.MethodsCollection
}

// pActionArchive holds the metadata of the Partner.ActionArchive() method
type pActionArchive struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pActionArchive) Extend(fnct func(m.PartnerSet)) pActionArchive {
	return pActionArchive{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pActionArchive) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pActionArchive{}

// ActionArchive returns a pointer to the ActionArchive Method.
func (c MethodsCollection) ActionArchive() pActionArchive {
	return pActionArchive{
		Method: c.MustGet("ActionArchive"),
	}
}

// pActionUnarchive holds the metadata of the Partner.ActionUnarchive() method
type pActionUnarchive struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pActionUnarchive) Extend(fnct func(m.PartnerSet)) pActionUnarchive {
	return pActionUnarchive{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pActionUnarchive) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pActionUnarchive{}

// ActionUnarchive returns a pointer to the ActionUnarchive Method.
func (c MethodsCollection) ActionUnarchive() pActionUnarchive {
	return pActionUnarchive{
		Method: c.MustGet("ActionUnarchive"),
	}
}

// pAddDomainLimitOffset holds the metadata of the Partner.AddDomainLimitOffset() method
type pAddDomainLimitOffset struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddDomainLimitOffset) Extend(fnct func(m.PartnerSet, domains.Domain, int, int, string) m.PartnerSet) pAddDomainLimitOffset {
	return pAddDomainLimitOffset{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddDomainLimitOffset) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddDomainLimitOffset{}

// AddDomainLimitOffset returns a pointer to the AddDomainLimitOffset Method.
func (c MethodsCollection) AddDomainLimitOffset() pAddDomainLimitOffset {
	return pAddDomainLimitOffset{
		Method: c.MustGet("AddDomainLimitOffset"),
	}
}

// pAddModifiers holds the metadata of the Partner.AddModifiers() method
type pAddModifiers struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddModifiers) Extend(fnct func(m.PartnerSet, *etree.Document, map[string]*models.FieldInfo)) pAddModifiers {
	return pAddModifiers{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddModifiers) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddModifiers{}

// AddModifiers returns a pointer to the AddModifiers Method.
func (c MethodsCollection) AddModifiers() pAddModifiers {
	return pAddModifiers{
		Method: c.MustGet("AddModifiers"),
	}
}

// pAddNamesToRelations holds the metadata of the Partner.AddNamesToRelations() method
type pAddNamesToRelations struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddNamesToRelations) Extend(fnct func(m.PartnerSet, models.RecordData, map[string]*models.FieldInfo) models.RecordData) pAddNamesToRelations {
	return pAddNamesToRelations{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddNamesToRelations) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddNamesToRelations{}

// AddNamesToRelations returns a pointer to the AddNamesToRelations Method.
func (c MethodsCollection) AddNamesToRelations() pAddNamesToRelations {
	return pAddNamesToRelations{
		Method: c.MustGet("AddNamesToRelations"),
	}
}

// pAddressFields holds the metadata of the Partner.AddressFields() method
type pAddressFields struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddressFields) Extend(fnct func(m.PartnerSet) []models.FieldName) pAddressFields {
	return pAddressFields{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddressFields) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddressFields{}

// AddressFields returns a pointer to the AddressFields Method.
func (c MethodsCollection) AddressFields() pAddressFields {
	return pAddressFields{
		Method: c.MustGet("AddressFields"),
	}
}

// pAddressGet holds the metadata of the Partner.AddressGet() method
type pAddressGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAddressGet) Extend(fnct func(m.PartnerSet, []string) map[string]m.PartnerSet) pAddressGet {
	return pAddressGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAddressGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAddressGet{}

// AddressGet returns a pointer to the AddressGet Method.
func (c MethodsCollection) AddressGet() pAddressGet {
	return pAddressGet{
		Method: c.MustGet("AddressGet"),
	}
}

// pAggregates holds the metadata of the Partner.Aggregates() method
type pAggregates struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pAggregates) Extend(fnct func(m.PartnerSet, ...models.FieldName) []m.PartnerGroupAggregateRow) pAggregates {
	return pAggregates{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pAggregates) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pAggregates{}

// Aggregates returns a pointer to the Aggregates Method.
func (c MethodsCollection) Aggregates() pAggregates {
	return pAggregates{
		Method: c.MustGet("Aggregates"),
	}
}

// pBrowse holds the metadata of the Partner.Browse() method
type pBrowse struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pBrowse) Extend(fnct func(m.PartnerSet, []int64) m.PartnerSet) pBrowse {
	return pBrowse{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pBrowse) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pBrowse{}

// Browse returns a pointer to the Browse Method.
func (c MethodsCollection) Browse() pBrowse {
	return pBrowse{
		Method: c.MustGet("Browse"),
	}
}

// pBrowseOne holds the metadata of the Partner.BrowseOne() method
type pBrowseOne struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pBrowseOne) Extend(fnct func(m.PartnerSet, int64) m.PartnerSet) pBrowseOne {
	return pBrowseOne{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pBrowseOne) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pBrowseOne{}

// BrowseOne returns a pointer to the BrowseOne Method.
func (c MethodsCollection) BrowseOne() pBrowseOne {
	return pBrowseOne{
		Method: c.MustGet("BrowseOne"),
	}
}

// pCartesianProduct holds the metadata of the Partner.CartesianProduct() method
type pCartesianProduct struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCartesianProduct) Extend(fnct func(m.PartnerSet, ...m.PartnerSet) []m.PartnerSet) pCartesianProduct {
	return pCartesianProduct{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCartesianProduct) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCartesianProduct{}

// CartesianProduct returns a pointer to the CartesianProduct Method.
func (c MethodsCollection) CartesianProduct() pCartesianProduct {
	return pCartesianProduct{
		Method: c.MustGet("CartesianProduct"),
	}
}

// pCheckAccessRights holds the metadata of the Partner.CheckAccessRights() method
type pCheckAccessRights struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckAccessRights) Extend(fnct func(m.PartnerSet, webtypes.CheckAccessRightsArgs) bool) pCheckAccessRights {
	return pCheckAccessRights{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckAccessRights) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckAccessRights{}

// CheckAccessRights returns a pointer to the CheckAccessRights Method.
func (c MethodsCollection) CheckAccessRights() pCheckAccessRights {
	return pCheckAccessRights{
		Method: c.MustGet("CheckAccessRights"),
	}
}

// pCheckExecutionPermission holds the metadata of the Partner.CheckExecutionPermission() method
type pCheckExecutionPermission struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckExecutionPermission) Extend(fnct func(m.PartnerSet, *models.Method, ...bool) bool) pCheckExecutionPermission {
	return pCheckExecutionPermission{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckExecutionPermission) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckExecutionPermission{}

// CheckExecutionPermission returns a pointer to the CheckExecutionPermission Method.
func (c MethodsCollection) CheckExecutionPermission() pCheckExecutionPermission {
	return pCheckExecutionPermission{
		Method: c.MustGet("CheckExecutionPermission"),
	}
}

// pCheckParent holds the metadata of the Partner.CheckParent() method
type pCheckParent struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckParent) Extend(fnct func(m.PartnerSet)) pCheckParent {
	return pCheckParent{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckParent) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckParent{}

// CheckParent returns a pointer to the CheckParent Method.
func (c MethodsCollection) CheckParent() pCheckParent {
	return pCheckParent{
		Method: c.MustGet("CheckParent"),
	}
}

// pCheckRecursion holds the metadata of the Partner.CheckRecursion() method
type pCheckRecursion struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCheckRecursion) Extend(fnct func(m.PartnerSet) bool) pCheckRecursion {
	return pCheckRecursion{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCheckRecursion) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCheckRecursion{}

// CheckRecursion returns a pointer to the CheckRecursion Method.
func (c MethodsCollection) CheckRecursion() pCheckRecursion {
	return pCheckRecursion{
		Method: c.MustGet("CheckRecursion"),
	}
}

// pCleanWebsite holds the metadata of the Partner.CleanWebsite() method
type pCleanWebsite struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCleanWebsite) Extend(fnct func(m.PartnerSet, string) string) pCleanWebsite {
	return pCleanWebsite{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCleanWebsite) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCleanWebsite{}

// CleanWebsite returns a pointer to the CleanWebsite Method.
func (c MethodsCollection) CleanWebsite() pCleanWebsite {
	return pCleanWebsite{
		Method: c.MustGet("CleanWebsite"),
	}
}

// pCommercialFields holds the metadata of the Partner.CommercialFields() method
type pCommercialFields struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCommercialFields) Extend(fnct func(m.PartnerSet) []models.FieldName) pCommercialFields {
	return pCommercialFields{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCommercialFields) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCommercialFields{}

// CommercialFields returns a pointer to the CommercialFields Method.
func (c MethodsCollection) CommercialFields() pCommercialFields {
	return pCommercialFields{
		Method: c.MustGet("CommercialFields"),
	}
}

// pCommercialSyncFromCompany holds the metadata of the Partner.CommercialSyncFromCompany() method
type pCommercialSyncFromCompany struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCommercialSyncFromCompany) Extend(fnct func(m.PartnerSet) bool) pCommercialSyncFromCompany {
	return pCommercialSyncFromCompany{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCommercialSyncFromCompany) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCommercialSyncFromCompany{}

// CommercialSyncFromCompany returns a pointer to the CommercialSyncFromCompany Method.
func (c MethodsCollection) CommercialSyncFromCompany() pCommercialSyncFromCompany {
	return pCommercialSyncFromCompany{
		Method: c.MustGet("CommercialSyncFromCompany"),
	}
}

// pCommercialSyncToChildren holds the metadata of the Partner.CommercialSyncToChildren() method
type pCommercialSyncToChildren struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCommercialSyncToChildren) Extend(fnct func(m.PartnerSet) bool) pCommercialSyncToChildren {
	return pCommercialSyncToChildren{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCommercialSyncToChildren) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCommercialSyncToChildren{}

// CommercialSyncToChildren returns a pointer to the CommercialSyncToChildren Method.
func (c MethodsCollection) CommercialSyncToChildren() pCommercialSyncToChildren {
	return pCommercialSyncToChildren{
		Method: c.MustGet("CommercialSyncToChildren"),
	}
}

// pComputeActiveLangCount holds the metadata of the Partner.ComputeActiveLangCount() method
type pComputeActiveLangCount struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeActiveLangCount) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeActiveLangCount {
	return pComputeActiveLangCount{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeActiveLangCount) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeActiveLangCount{}

// ComputeActiveLangCount returns a pointer to the ComputeActiveLangCount Method.
func (c MethodsCollection) ComputeActiveLangCount() pComputeActiveLangCount {
	return pComputeActiveLangCount{
		Method: c.MustGet("ComputeActiveLangCount"),
	}
}

// pComputeCommercialCompanyName holds the metadata of the Partner.ComputeCommercialCompanyName() method
type pComputeCommercialCompanyName struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeCommercialCompanyName) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeCommercialCompanyName {
	return pComputeCommercialCompanyName{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeCommercialCompanyName) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeCommercialCompanyName{}

// ComputeCommercialCompanyName returns a pointer to the ComputeCommercialCompanyName Method.
func (c MethodsCollection) ComputeCommercialCompanyName() pComputeCommercialCompanyName {
	return pComputeCommercialCompanyName{
		Method: c.MustGet("ComputeCommercialCompanyName"),
	}
}

// pComputeCommercialPartner holds the metadata of the Partner.ComputeCommercialPartner() method
type pComputeCommercialPartner struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeCommercialPartner) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeCommercialPartner {
	return pComputeCommercialPartner{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeCommercialPartner) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeCommercialPartner{}

// ComputeCommercialPartner returns a pointer to the ComputeCommercialPartner Method.
func (c MethodsCollection) ComputeCommercialPartner() pComputeCommercialPartner {
	return pComputeCommercialPartner{
		Method: c.MustGet("ComputeCommercialPartner"),
	}
}

// pComputeCompanyType holds the metadata of the Partner.ComputeCompanyType() method
type pComputeCompanyType struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeCompanyType) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeCompanyType {
	return pComputeCompanyType{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeCompanyType) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeCompanyType{}

// ComputeCompanyType returns a pointer to the ComputeCompanyType Method.
func (c MethodsCollection) ComputeCompanyType() pComputeCompanyType {
	return pComputeCompanyType{
		Method: c.MustGet("ComputeCompanyType"),
	}
}

// pComputeContactAddress holds the metadata of the Partner.ComputeContactAddress() method
type pComputeContactAddress struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeContactAddress) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeContactAddress {
	return pComputeContactAddress{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeContactAddress) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeContactAddress{}

// ComputeContactAddress returns a pointer to the ComputeContactAddress Method.
func (c MethodsCollection) ComputeContactAddress() pComputeContactAddress {
	return pComputeContactAddress{
		Method: c.MustGet("ComputeContactAddress"),
	}
}

// pComputeDisplayName holds the metadata of the Partner.ComputeDisplayName() method
type pComputeDisplayName struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeDisplayName) Extend(fnct func(m.PartnerSet) *models.ModelData) pComputeDisplayName {
	return pComputeDisplayName{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeDisplayName) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeDisplayName{}

// ComputeDisplayName returns a pointer to the ComputeDisplayName Method.
func (c MethodsCollection) ComputeDisplayName() pComputeDisplayName {
	return pComputeDisplayName{
		Method: c.MustGet("ComputeDisplayName"),
	}
}

// pComputeEmailFormatted holds the metadata of the Partner.ComputeEmailFormatted() method
type pComputeEmailFormatted struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeEmailFormatted) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeEmailFormatted {
	return pComputeEmailFormatted{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeEmailFormatted) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeEmailFormatted{}

// ComputeEmailFormatted returns a pointer to the ComputeEmailFormatted Method.
func (c MethodsCollection) ComputeEmailFormatted() pComputeEmailFormatted {
	return pComputeEmailFormatted{
		Method: c.MustGet("ComputeEmailFormatted"),
	}
}

// pComputeImages holds the metadata of the Partner.ComputeImages() method
type pComputeImages struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeImages) Extend(fnct func(m.PartnerSet) m.ImageMixinData) pComputeImages {
	return pComputeImages{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeImages) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeImages{}

// ComputeImages returns a pointer to the ComputeImages Method.
func (c MethodsCollection) ComputeImages() pComputeImages {
	return pComputeImages{
		Method: c.MustGet("ComputeImages"),
	}
}

// pComputeLastUpdate holds the metadata of the Partner.ComputeLastUpdate() method
type pComputeLastUpdate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeLastUpdate) Extend(fnct func(m.PartnerSet) *models.ModelData) pComputeLastUpdate {
	return pComputeLastUpdate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeLastUpdate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeLastUpdate{}

// ComputeLastUpdate returns a pointer to the ComputeLastUpdate Method.
func (c MethodsCollection) ComputeLastUpdate() pComputeLastUpdate {
	return pComputeLastUpdate{
		Method: c.MustGet("ComputeLastUpdate"),
	}
}

// pComputePartnerShare holds the metadata of the Partner.ComputePartnerShare() method
type pComputePartnerShare struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputePartnerShare) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputePartnerShare {
	return pComputePartnerShare{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputePartnerShare) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputePartnerShare{}

// ComputePartnerShare returns a pointer to the ComputePartnerShare Method.
func (c MethodsCollection) ComputePartnerShare() pComputePartnerShare {
	return pComputePartnerShare{
		Method: c.MustGet("ComputePartnerShare"),
	}
}

// pComputeSameVATPartner holds the metadata of the Partner.ComputeSameVATPartner() method
type pComputeSameVATPartner struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeSameVATPartner) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeSameVATPartner {
	return pComputeSameVATPartner{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeSameVATPartner) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeSameVATPartner{}

// ComputeSameVATPartner returns a pointer to the ComputeSameVATPartner Method.
func (c MethodsCollection) ComputeSameVATPartner() pComputeSameVATPartner {
	return pComputeSameVATPartner{
		Method: c.MustGet("ComputeSameVATPartner"),
	}
}

// pComputeTZOffset holds the metadata of the Partner.ComputeTZOffset() method
type pComputeTZOffset struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pComputeTZOffset) Extend(fnct func(m.PartnerSet) m.PartnerData) pComputeTZOffset {
	return pComputeTZOffset{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pComputeTZOffset) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pComputeTZOffset{}

// ComputeTZOffset returns a pointer to the ComputeTZOffset Method.
func (c MethodsCollection) ComputeTZOffset() pComputeTZOffset {
	return pComputeTZOffset{
		Method: c.MustGet("ComputeTZOffset"),
	}
}

// pCopy holds the metadata of the Partner.Copy() method
type pCopy struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCopy) Extend(fnct func(m.PartnerSet, m.PartnerData) m.PartnerSet) pCopy {
	return pCopy{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCopy) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCopy{}

// Copy returns a pointer to the Copy Method.
func (c MethodsCollection) Copy() pCopy {
	return pCopy{
		Method: c.MustGet("Copy"),
	}
}

// pCopyData holds the metadata of the Partner.CopyData() method
type pCopyData struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCopyData) Extend(fnct func(m.PartnerSet, m.PartnerData) m.PartnerData) pCopyData {
	return pCopyData{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCopyData) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCopyData{}

// CopyData returns a pointer to the CopyData Method.
func (c MethodsCollection) CopyData() pCopyData {
	return pCopyData{
		Method: c.MustGet("CopyData"),
	}
}

// pCreate holds the metadata of the Partner.Create() method
type pCreate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCreate) Extend(fnct func(m.PartnerSet, m.PartnerData) m.PartnerSet) pCreate {
	return pCreate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCreate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCreate{}

// Create returns a pointer to the Create Method.
func (c MethodsCollection) Create() pCreate {
	return pCreate{
		Method: c.MustGet("Create"),
	}
}

// pCreateCompany holds the metadata of the Partner.CreateCompany() method
type pCreateCompany struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pCreateCompany) Extend(fnct func(m.PartnerSet) bool) pCreateCompany {
	return pCreateCompany{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pCreateCompany) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pCreateCompany{}

// CreateCompany returns a pointer to the CreateCompany Method.
func (c MethodsCollection) CreateCompany() pCreateCompany {
	return pCreateCompany{
		Method: c.MustGet("CreateCompany"),
	}
}

// pDefaultGet holds the metadata of the Partner.DefaultGet() method
type pDefaultGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pDefaultGet) Extend(fnct func(m.PartnerSet) m.PartnerData) pDefaultGet {
	return pDefaultGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pDefaultGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pDefaultGet{}

// DefaultGet returns a pointer to the DefaultGet Method.
func (c MethodsCollection) DefaultGet() pDefaultGet {
	return pDefaultGet{
		Method: c.MustGet("DefaultGet"),
	}
}

// pDisplayAddress holds the metadata of the Partner.DisplayAddress() method
type pDisplayAddress struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pDisplayAddress) Extend(fnct func(m.PartnerSet, bool) string) pDisplayAddress {
	return pDisplayAddress{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pDisplayAddress) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pDisplayAddress{}

// DisplayAddress returns a pointer to the DisplayAddress Method.
func (c MethodsCollection) DisplayAddress() pDisplayAddress {
	return pDisplayAddress{
		Method: c.MustGet("DisplayAddress"),
	}
}

// pEnqueue holds the metadata of the Partner.Enqueue() method
type pEnqueue struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pEnqueue) Extend(fnct func(m.PartnerSet, string, models.Methoder, ...interface{}) m.QueueJobSet) pEnqueue {
	return pEnqueue{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pEnqueue) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pEnqueue{}

// Enqueue returns a pointer to the Enqueue Method.
func (c MethodsCollection) Enqueue() pEnqueue {
	return pEnqueue{
		Method: c.MustGet("Enqueue"),
	}
}

// pEquals holds the metadata of the Partner.Equals() method
type pEquals struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pEquals) Extend(fnct func(m.PartnerSet, m.PartnerSet) bool) pEquals {
	return pEquals{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pEquals) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pEquals{}

// Equals returns a pointer to the Equals Method.
func (c MethodsCollection) Equals() pEquals {
	return pEquals{
		Method: c.MustGet("Equals"),
	}
}

// pExecuteO2MActions holds the metadata of the Partner.ExecuteO2MActions() method
type pExecuteO2MActions struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pExecuteO2MActions) Extend(fnct func(m.PartnerSet, models.FieldName, *models.FieldInfo, interface{}) interface{}) pExecuteO2MActions {
	return pExecuteO2MActions{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pExecuteO2MActions) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pExecuteO2MActions{}

// ExecuteO2MActions returns a pointer to the ExecuteO2MActions Method.
func (c MethodsCollection) ExecuteO2MActions() pExecuteO2MActions {
	return pExecuteO2MActions{
		Method: c.MustGet("ExecuteO2MActions"),
	}
}

// pFetch holds the metadata of the Partner.Fetch() method
type pFetch struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFetch) Extend(fnct func(m.PartnerSet) m.PartnerSet) pFetch {
	return pFetch{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFetch) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFetch{}

// Fetch returns a pointer to the Fetch Method.
func (c MethodsCollection) Fetch() pFetch {
	return pFetch{
		Method: c.MustGet("Fetch"),
	}
}

// pFieldGet holds the metadata of the Partner.FieldGet() method
type pFieldGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldGet) Extend(fnct func(m.PartnerSet, models.FieldName) *models.FieldInfo) pFieldGet {
	return pFieldGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldGet{}

// FieldGet returns a pointer to the FieldGet Method.
func (c MethodsCollection) FieldGet() pFieldGet {
	return pFieldGet{
		Method: c.MustGet("FieldGet"),
	}
}

// pFieldsGet holds the metadata of the Partner.FieldsGet() method
type pFieldsGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldsGet) Extend(fnct func(m.PartnerSet, models.FieldsGetArgs) map[string]*models.FieldInfo) pFieldsGet {
	return pFieldsGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldsGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldsGet{}

// FieldsGet returns a pointer to the FieldsGet Method.
func (c MethodsCollection) FieldsGet() pFieldsGet {
	return pFieldsGet{
		Method: c.MustGet("FieldsGet"),
	}
}

// pFieldsSync holds the metadata of the Partner.FieldsSync() method
type pFieldsSync struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldsSync) Extend(fnct func(m.PartnerSet, m.PartnerData)) pFieldsSync {
	return pFieldsSync{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldsSync) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldsSync{}

// FieldsSync returns a pointer to the FieldsSync Method.
func (c MethodsCollection) FieldsSync() pFieldsSync {
	return pFieldsSync{
		Method: c.MustGet("FieldsSync"),
	}
}

// pFieldsViewGet holds the metadata of the Partner.FieldsViewGet() method
type pFieldsViewGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFieldsViewGet) Extend(fnct func(m.PartnerSet, webtypes.FieldsViewGetParams) *webtypes.FieldsViewData) pFieldsViewGet {
	return pFieldsViewGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFieldsViewGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFieldsViewGet{}

// FieldsViewGet returns a pointer to the FieldsViewGet Method.
func (c MethodsCollection) FieldsViewGet() pFieldsViewGet {
	return pFieldsViewGet{
		Method: c.MustGet("FieldsViewGet"),
	}
}

// pFiltered holds the metadata of the Partner.Filtered() method
type pFiltered struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFiltered) Extend(fnct func(m.PartnerSet, func(m.PartnerSet) bool) m.PartnerSet) pFiltered {
	return pFiltered{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFiltered) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFiltered{}

// Filtered returns a pointer to the Filtered Method.
func (c MethodsCollection) Filtered() pFiltered {
	return pFiltered{
		Method: c.MustGet("Filtered"),
	}
}

// pFindOrCreate holds the metadata of the Partner.FindOrCreate() method
type pFindOrCreate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFindOrCreate) Extend(fnct func(m.PartnerSet, string) m.PartnerSet) pFindOrCreate {
	return pFindOrCreate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFindOrCreate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFindOrCreate{}

// FindOrCreate returns a pointer to the FindOrCreate Method.
func (c MethodsCollection) FindOrCreate() pFindOrCreate {
	return pFindOrCreate{
		Method: c.MustGet("FindOrCreate"),
	}
}

// pFormatRelationFields holds the metadata of the Partner.FormatRelationFields() method
type pFormatRelationFields struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pFormatRelationFields) Extend(fnct func(m.PartnerSet, models.RecordData, map[string]*models.FieldInfo) models.RecordData) pFormatRelationFields {
	return pFormatRelationFields{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pFormatRelationFields) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pFormatRelationFields{}

// FormatRelationFields returns a pointer to the FormatRelationFields Method.
func (c MethodsCollection) FormatRelationFields() pFormatRelationFields {
	return pFormatRelationFields{
		Method: c.MustGet("FormatRelationFields"),
	}
}

// pGetDefaultImage holds the metadata of the Partner.GetDefaultImage() method
type pGetDefaultImage struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetDefaultImage) Extend(fnct func(m.PartnerSet, string, bool, m.PartnerSet) string) pGetDefaultImage {
	return pGetDefaultImage{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetDefaultImage) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetDefaultImage{}

// GetDefaultImage returns a pointer to the GetDefaultImage Method.
func (c MethodsCollection) GetDefaultImage() pGetDefaultImage {
	return pGetDefaultImage{
		Method: c.MustGet("GetDefaultImage"),
	}
}

// pGetFormviewAction holds the metadata of the Partner.GetFormviewAction() method
type pGetFormviewAction struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetFormviewAction) Extend(fnct func(m.PartnerSet) *actions.Action) pGetFormviewAction {
	return pGetFormviewAction{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetFormviewAction) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetFormviewAction{}

// GetFormviewAction returns a pointer to the GetFormviewAction Method.
func (c MethodsCollection) GetFormviewAction() pGetFormviewAction {
	return pGetFormviewAction{
		Method: c.MustGet("GetFormviewAction"),
	}
}

// pGetFormviewId holds the metadata of the Partner.GetFormviewId() method
type pGetFormviewId struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetFormviewId) Extend(fnct func(m.PartnerSet) string) pGetFormviewId {
	return pGetFormviewId{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetFormviewId) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetFormviewId{}

// GetFormviewId returns a pointer to the GetFormviewId Method.
func (c MethodsCollection) GetFormviewId() pGetFormviewId {
	return pGetFormviewId{
		Method: c.MustGet("GetFormviewId"),
	}
}

// pGetGravatarImage holds the metadata of the Partner.GetGravatarImage() method
type pGetGravatarImage struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetGravatarImage) Extend(fnct func(m.PartnerSet, string) string) pGetGravatarImage {
	return pGetGravatarImage{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetGravatarImage) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetGravatarImage{}

// GetGravatarImage returns a pointer to the GetGravatarImage Method.
func (c MethodsCollection) GetGravatarImage() pGetGravatarImage {
	return pGetGravatarImage{
		Method: c.MustGet("GetGravatarImage"),
	}
}

// pGetRecord holds the metadata of the Partner.GetRecord() method
type pGetRecord struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetRecord) Extend(fnct func(m.PartnerSet, string) m.PartnerSet) pGetRecord {
	return pGetRecord{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetRecord) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetRecord{}

// GetRecord returns a pointer to the GetRecord Method.
func (c MethodsCollection) GetRecord() pGetRecord {
	return pGetRecord{
		Method: c.MustGet("GetRecord"),
	}
}

// pGetToolbar holds the metadata of the Partner.GetToolbar() method
type pGetToolbar struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGetToolbar) Extend(fnct func(m.PartnerSet) webtypes.Toolbar) pGetToolbar {
	return pGetToolbar{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGetToolbar) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGetToolbar{}

// GetToolbar returns a pointer to the GetToolbar Method.
func (c MethodsCollection) GetToolbar() pGetToolbar {
	return pGetToolbar{
		Method: c.MustGet("GetToolbar"),
	}
}

// pGroupBy holds the metadata of the Partner.GroupBy() method
type pGroupBy struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pGroupBy) Extend(fnct func(m.PartnerSet, ...models.FieldName) m.PartnerSet) pGroupBy {
	return pGroupBy{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pGroupBy) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pGroupBy{}

// GroupBy returns a pointer to the GroupBy Method.
func (c MethodsCollection) GroupBy() pGroupBy {
	return pGroupBy{
		Method: c.MustGet("GroupBy"),
	}
}

// pHandleFirsrtContactCreation holds the metadata of the Partner.HandleFirsrtContactCreation() method
type pHandleFirsrtContactCreation struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pHandleFirsrtContactCreation) Extend(fnct func(m.PartnerSet)) pHandleFirsrtContactCreation {
	return pHandleFirsrtContactCreation{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pHandleFirsrtContactCreation) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pHandleFirsrtContactCreation{}

// HandleFirsrtContactCreation returns a pointer to the HandleFirsrtContactCreation Method.
func (c MethodsCollection) HandleFirsrtContactCreation() pHandleFirsrtContactCreation {
	return pHandleFirsrtContactCreation{
		Method: c.MustGet("HandleFirsrtContactCreation"),
	}
}

// pIntersect holds the metadata of the Partner.Intersect() method
type pIntersect struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pIntersect) Extend(fnct func(m.PartnerSet, m.PartnerSet) m.PartnerSet) pIntersect {
	return pIntersect{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pIntersect) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pIntersect{}

// Intersect returns a pointer to the Intersect Method.
func (c MethodsCollection) Intersect() pIntersect {
	return pIntersect{
		Method: c.MustGet("Intersect"),
	}
}

// pInverseCompanyType holds the metadata of the Partner.InverseCompanyType() method
type pInverseCompanyType struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pInverseCompanyType) Extend(fnct func(m.PartnerSet, string)) pInverseCompanyType {
	return pInverseCompanyType{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pInverseCompanyType) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pInverseCompanyType{}

// InverseCompanyType returns a pointer to the InverseCompanyType Method.
func (c MethodsCollection) InverseCompanyType() pInverseCompanyType {
	return pInverseCompanyType{
		Method: c.MustGet("InverseCompanyType"),
	}
}

// pLimit holds the metadata of the Partner.Limit() method
type pLimit struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pLimit) Extend(fnct func(m.PartnerSet, int) m.PartnerSet) pLimit {
	return pLimit{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pLimit) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pLimit{}

// Limit returns a pointer to the Limit Method.
func (c MethodsCollection) Limit() pLimit {
	return pLimit{
		Method: c.MustGet("Limit"),
	}
}

// pLoad holds the metadata of the Partner.Load() method
type pLoad struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pLoad) Extend(fnct func(m.PartnerSet, ...models.FieldName) m.PartnerSet) pLoad {
	return pLoad{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pLoad) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pLoad{}

// Load returns a pointer to the Load Method.
func (c MethodsCollection) Load() pLoad {
	return pLoad{
		Method: c.MustGet("Load"),
	}
}

// pLoadViews holds the metadata of the Partner.LoadViews() method
type pLoadViews struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pLoadViews) Extend(fnct func(m.PartnerSet, webtypes.LoadViewsArgs) *webtypes.LoadViewsData) pLoadViews {
	return pLoadViews{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pLoadViews) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pLoadViews{}

// LoadViews returns a pointer to the LoadViews Method.
func (c MethodsCollection) LoadViews() pLoadViews {
	return pLoadViews{
		Method: c.MustGet("LoadViews"),
	}
}

// pManageGroupsOnFields holds the metadata of the Partner.ManageGroupsOnFields() method
type pManageGroupsOnFields struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pManageGroupsOnFields) Extend(fnct func(m.PartnerSet, *etree.Document, map[string]*models.FieldInfo)) pManageGroupsOnFields {
	return pManageGroupsOnFields{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pManageGroupsOnFields) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pManageGroupsOnFields{}

// ManageGroupsOnFields returns a pointer to the ManageGroupsOnFields Method.
func (c MethodsCollection) ManageGroupsOnFields() pManageGroupsOnFields {
	return pManageGroupsOnFields{
		Method: c.MustGet("ManageGroupsOnFields"),
	}
}

// pNameCreate holds the metadata of the Partner.NameCreate() method
type pNameCreate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNameCreate) Extend(fnct func(m.PartnerSet, string) m.PartnerSet) pNameCreate {
	return pNameCreate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNameCreate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNameCreate{}

// NameCreate returns a pointer to the NameCreate Method.
func (c MethodsCollection) NameCreate() pNameCreate {
	return pNameCreate{
		Method: c.MustGet("NameCreate"),
	}
}

// pNameGet holds the metadata of the Partner.NameGet() method
type pNameGet struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNameGet) Extend(fnct func(m.PartnerSet) string) pNameGet {
	return pNameGet{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNameGet) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNameGet{}

// NameGet returns a pointer to the NameGet Method.
func (c MethodsCollection) NameGet() pNameGet {
	return pNameGet{
		Method: c.MustGet("NameGet"),
	}
}

// pNameSearch holds the metadata of the Partner.NameSearch() method
type pNameSearch struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNameSearch) Extend(fnct func(m.PartnerSet, webtypes.NameSearchParams) []webtypes.RecordIDWithName) pNameSearch {
	return pNameSearch{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNameSearch) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNameSearch{}

// NameSearch returns a pointer to the NameSearch Method.
func (c MethodsCollection) NameSearch() pNameSearch {
	return pNameSearch{
		Method: c.MustGet("NameSearch"),
	}
}

// pNew holds the metadata of the Partner.New() method
type pNew struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNew) Extend(fnct func(m.PartnerSet, m.PartnerData) m.PartnerSet) pNew {
	return pNew{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNew) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNew{}

// New returns a pointer to the New Method.
func (c MethodsCollection) New() pNew {
	return pNew{
		Method: c.MustGet("New"),
	}
}

// pNormalizeM2MData holds the metadata of the Partner.NormalizeM2MData() method
type pNormalizeM2MData struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pNormalizeM2MData) Extend(fnct func(m.PartnerSet, models.FieldName, *models.FieldInfo, interface{}) interface{}) pNormalizeM2MData {
	return pNormalizeM2MData{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pNormalizeM2MData) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pNormalizeM2MData{}

// NormalizeM2MData returns a pointer to the NormalizeM2MData Method.
func (c MethodsCollection) NormalizeM2MData() pNormalizeM2MData {
	return pNormalizeM2MData{
		Method: c.MustGet("NormalizeM2MData"),
	}
}

// pOffset holds the metadata of the Partner.Offset() method
type pOffset struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOffset) Extend(fnct func(m.PartnerSet, int) m.PartnerSet) pOffset {
	return pOffset{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOffset) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOffset{}

// Offset returns a pointer to the Offset Method.
func (c MethodsCollection) Offset() pOffset {
	return pOffset{
		Method: c.MustGet("Offset"),
	}
}

// pOnchange holds the metadata of the Partner.Onchange() method
type pOnchange struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchange) Extend(fnct func(m.PartnerSet, models.OnchangeParams) models.OnchangeResult) pOnchange {
	return pOnchange{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchange) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchange{}

// Onchange returns a pointer to the Onchange Method.
func (c MethodsCollection) Onchange() pOnchange {
	return pOnchange{
		Method: c.MustGet("Onchange"),
	}
}

// pOnchangeCompanyType holds the metadata of the Partner.OnchangeCompanyType() method
type pOnchangeCompanyType struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchangeCompanyType) Extend(fnct func(m.PartnerSet) m.PartnerData) pOnchangeCompanyType {
	return pOnchangeCompanyType{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchangeCompanyType) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchangeCompanyType{}

// OnchangeCompanyType returns a pointer to the OnchangeCompanyType Method.
func (c MethodsCollection) OnchangeCompanyType() pOnchangeCompanyType {
	return pOnchangeCompanyType{
		Method: c.MustGet("OnchangeCompanyType"),
	}
}

// pOnchangeCountryFilters holds the metadata of the Partner.OnchangeCountryFilters() method
type pOnchangeCountryFilters struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchangeCountryFilters) Extend(fnct func(m.PartnerSet) map[models.FieldName]models.Conditioner) pOnchangeCountryFilters {
	return pOnchangeCountryFilters{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchangeCountryFilters) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchangeCountryFilters{}

// OnchangeCountryFilters returns a pointer to the OnchangeCountryFilters Method.
func (c MethodsCollection) OnchangeCountryFilters() pOnchangeCountryFilters {
	return pOnchangeCountryFilters{
		Method: c.MustGet("OnchangeCountryFilters"),
	}
}

// pOnchangeEmail holds the metadata of the Partner.OnchangeEmail() method
type pOnchangeEmail struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchangeEmail) Extend(fnct func(m.PartnerSet) m.PartnerData) pOnchangeEmail {
	return pOnchangeEmail{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchangeEmail) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchangeEmail{}

// OnchangeEmail returns a pointer to the OnchangeEmail Method.
func (c MethodsCollection) OnchangeEmail() pOnchangeEmail {
	return pOnchangeEmail{
		Method: c.MustGet("OnchangeEmail"),
	}
}

// pOnchangeParent holds the metadata of the Partner.OnchangeParent() method
type pOnchangeParent struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchangeParent) Extend(fnct func(m.PartnerSet) m.PartnerData) pOnchangeParent {
	return pOnchangeParent{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchangeParent) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchangeParent{}

// OnchangeParent returns a pointer to the OnchangeParent Method.
func (c MethodsCollection) OnchangeParent() pOnchangeParent {
	return pOnchangeParent{
		Method: c.MustGet("OnchangeParent"),
	}
}

// pOnchangeParentWarning holds the metadata of the Partner.OnchangeParentWarning() method
type pOnchangeParentWarning struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOnchangeParentWarning) Extend(fnct func(m.PartnerSet) string) pOnchangeParentWarning {
	return pOnchangeParentWarning{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOnchangeParentWarning) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOnchangeParentWarning{}

// OnchangeParentWarning returns a pointer to the OnchangeParentWarning Method.
func (c MethodsCollection) OnchangeParentWarning() pOnchangeParentWarning {
	return pOnchangeParentWarning{
		Method: c.MustGet("OnchangeParentWarning"),
	}
}

// pOpenCommercialEntity holds the metadata of the Partner.OpenCommercialEntity() method
type pOpenCommercialEntity struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOpenCommercialEntity) Extend(fnct func(m.PartnerSet) *actions.Action) pOpenCommercialEntity {
	return pOpenCommercialEntity{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOpenCommercialEntity) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOpenCommercialEntity{}

// OpenCommercialEntity returns a pointer to the OpenCommercialEntity Method.
func (c MethodsCollection) OpenCommercialEntity() pOpenCommercialEntity {
	return pOpenCommercialEntity{
		Method: c.MustGet("OpenCommercialEntity"),
	}
}

// pOpenParent holds the metadata of the Partner.OpenParent() method
type pOpenParent struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOpenParent) Extend(fnct func(m.PartnerSet) *actions.Action) pOpenParent {
	return pOpenParent{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOpenParent) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOpenParent{}

// OpenParent returns a pointer to the OpenParent Method.
func (c MethodsCollection) OpenParent() pOpenParent {
	return pOpenParent{
		Method: c.MustGet("OpenParent"),
	}
}

// pOrderBy holds the metadata of the Partner.OrderBy() method
type pOrderBy struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pOrderBy) Extend(fnct func(m.PartnerSet, ...string) m.PartnerSet) pOrderBy {
	return pOrderBy{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pOrderBy) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pOrderBy{}

// OrderBy returns a pointer to the OrderBy Method.
func (c MethodsCollection) OrderBy() pOrderBy {
	return pOrderBy{
		Method: c.MustGet("OrderBy"),
	}
}

// pParsePartnerName holds the metadata of the Partner.ParsePartnerName() method
type pParsePartnerName struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pParsePartnerName) Extend(fnct func(m.PartnerSet, string) (string, string)) pParsePartnerName {
	return pParsePartnerName{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pParsePartnerName) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pParsePartnerName{}

// ParsePartnerName returns a pointer to the ParsePartnerName Method.
func (c MethodsCollection) ParsePartnerName() pParsePartnerName {
	return pParsePartnerName{
		Method: c.MustGet("ParsePartnerName"),
	}
}

// pPostProcessCreateValues holds the metadata of the Partner.PostProcessCreateValues() method
type pPostProcessCreateValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pPostProcessCreateValues) Extend(fnct func(m.PartnerSet, models.RecordData)) pPostProcessCreateValues {
	return pPostProcessCreateValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pPostProcessCreateValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pPostProcessCreateValues{}

// PostProcessCreateValues returns a pointer to the PostProcessCreateValues Method.
func (c MethodsCollection) PostProcessCreateValues() pPostProcessCreateValues {
	return pPostProcessCreateValues{
		Method: c.MustGet("PostProcessCreateValues"),
	}
}

// pPostProcessFilters holds the metadata of the Partner.PostProcessFilters() method
type pPostProcessFilters struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pPostProcessFilters) Extend(fnct func(m.PartnerSet, map[models.FieldName]models.Conditioner) map[string][]interface{}) pPostProcessFilters {
	return pPostProcessFilters{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pPostProcessFilters) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pPostProcessFilters{}

// PostProcessFilters returns a pointer to the PostProcessFilters Method.
func (c MethodsCollection) PostProcessFilters() pPostProcessFilters {
	return pPostProcessFilters{
		Method: c.MustGet("PostProcessFilters"),
	}
}

// pProcessCreateValues holds the metadata of the Partner.ProcessCreateValues() method
type pProcessCreateValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessCreateValues) Extend(fnct func(m.PartnerSet, models.RecordData) (models.RecordData, models.RecordData)) pProcessCreateValues {
	return pProcessCreateValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessCreateValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessCreateValues{}

// ProcessCreateValues returns a pointer to the ProcessCreateValues Method.
func (c MethodsCollection) ProcessCreateValues() pProcessCreateValues {
	return pProcessCreateValues{
		Method: c.MustGet("ProcessCreateValues"),
	}
}

// pProcessElementAttrs holds the metadata of the Partner.ProcessElementAttrs() method
type pProcessElementAttrs struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessElementAttrs) Extend(fnct func(m.PartnerSet, *etree.Element, map[string]*models.FieldInfo) map[string]interface{}) pProcessElementAttrs {
	return pProcessElementAttrs{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessElementAttrs) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessElementAttrs{}

// ProcessElementAttrs returns a pointer to the ProcessElementAttrs Method.
func (c MethodsCollection) ProcessElementAttrs() pProcessElementAttrs {
	return pProcessElementAttrs{
		Method: c.MustGet("ProcessElementAttrs"),
	}
}

// pProcessFieldElementModifiers holds the metadata of the Partner.ProcessFieldElementModifiers() method
type pProcessFieldElementModifiers struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessFieldElementModifiers) Extend(fnct func(m.PartnerSet, *etree.Element, map[string]*models.FieldInfo, map[string]interface{}) map[string]interface{}) pProcessFieldElementModifiers {
	return pProcessFieldElementModifiers{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessFieldElementModifiers) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessFieldElementModifiers{}

// ProcessFieldElementModifiers returns a pointer to the ProcessFieldElementModifiers Method.
func (c MethodsCollection) ProcessFieldElementModifiers() pProcessFieldElementModifiers {
	return pProcessFieldElementModifiers{
		Method: c.MustGet("ProcessFieldElementModifiers"),
	}
}

// pProcessView holds the metadata of the Partner.ProcessView() method
type pProcessView struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessView) Extend(fnct func(m.PartnerSet, *etree.Document, map[string]*models.FieldInfo) string) pProcessView {
	return pProcessView{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessView) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessView{}

// ProcessView returns a pointer to the ProcessView Method.
func (c MethodsCollection) ProcessView() pProcessView {
	return pProcessView{
		Method: c.MustGet("ProcessView"),
	}
}

// pProcessWriteValues holds the metadata of the Partner.ProcessWriteValues() method
type pProcessWriteValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pProcessWriteValues) Extend(fnct func(m.PartnerSet, models.RecordData) models.RecordData) pProcessWriteValues {
	return pProcessWriteValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pProcessWriteValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pProcessWriteValues{}

// ProcessWriteValues returns a pointer to the ProcessWriteValues Method.
func (c MethodsCollection) ProcessWriteValues() pProcessWriteValues {
	return pProcessWriteValues{
		Method: c.MustGet("ProcessWriteValues"),
	}
}

// pRead holds the metadata of the Partner.Read() method
type pRead struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pRead) Extend(fnct func(m.PartnerSet, models.FieldNames) []models.RecordData) pRead {
	return pRead{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pRead) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pRead{}

// Read returns a pointer to the Read Method.
func (c MethodsCollection) Read() pRead {
	return pRead{
		Method: c.MustGet("Read"),
	}
}

// pReadGroup holds the metadata of the Partner.ReadGroup() method
type pReadGroup struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pReadGroup) Extend(fnct func(m.PartnerSet, webtypes.ReadGroupParams) []models.FieldMap) pReadGroup {
	return pReadGroup{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pReadGroup) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pReadGroup{}

// ReadGroup returns a pointer to the ReadGroup Method.
func (c MethodsCollection) ReadGroup() pReadGroup {
	return pReadGroup{
		Method: c.MustGet("ReadGroup"),
	}
}

// pSQLFromCondition holds the metadata of the Partner.SQLFromCondition() method
type pSQLFromCondition struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSQLFromCondition) Extend(fnct func(m.PartnerSet, *models.Condition) (string, models.SQLParams)) pSQLFromCondition {
	return pSQLFromCondition{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSQLFromCondition) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSQLFromCondition{}

// SQLFromCondition returns a pointer to the SQLFromCondition Method.
func (c MethodsCollection) SQLFromCondition() pSQLFromCondition {
	return pSQLFromCondition{
		Method: c.MustGet("SQLFromCondition"),
	}
}

// pSearch holds the metadata of the Partner.Search() method
type pSearch struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearch) Extend(fnct func(m.PartnerSet, q.PartnerCondition) m.PartnerSet) pSearch {
	return pSearch{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearch) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearch{}

// Search returns a pointer to the Search Method.
func (c MethodsCollection) Search() pSearch {
	return pSearch{
		Method: c.MustGet("Search"),
	}
}

// pSearchAll holds the metadata of the Partner.SearchAll() method
type pSearchAll struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchAll) Extend(fnct func(m.PartnerSet) m.PartnerSet) pSearchAll {
	return pSearchAll{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchAll) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchAll{}

// SearchAll returns a pointer to the SearchAll Method.
func (c MethodsCollection) SearchAll() pSearchAll {
	return pSearchAll{
		Method: c.MustGet("SearchAll"),
	}
}

// pSearchByName holds the metadata of the Partner.SearchByName() method
type pSearchByName struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchByName) Extend(fnct func(m.PartnerSet, string, operator.Operator, q.PartnerCondition, int) m.PartnerSet) pSearchByName {
	return pSearchByName{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchByName) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchByName{}

// SearchByName returns a pointer to the SearchByName Method.
func (c MethodsCollection) SearchByName() pSearchByName {
	return pSearchByName{
		Method: c.MustGet("SearchByName"),
	}
}

// pSearchCount holds the metadata of the Partner.SearchCount() method
type pSearchCount struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchCount) Extend(fnct func(m.PartnerSet) int) pSearchCount {
	return pSearchCount{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchCount) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchCount{}

// SearchCount returns a pointer to the SearchCount Method.
func (c MethodsCollection) SearchCount() pSearchCount {
	return pSearchCount{
		Method: c.MustGet("SearchCount"),
	}
}

// pSearchDomain holds the metadata of the Partner.SearchDomain() method
type pSearchDomain struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchDomain) Extend(fnct func(m.PartnerSet, domains.Domain) m.CommonMixinSet) pSearchDomain {
	return pSearchDomain{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchDomain) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchDomain{}

// SearchDomain returns a pointer to the SearchDomain Method.
func (c MethodsCollection) SearchDomain() pSearchDomain {
	return pSearchDomain{
		Method: c.MustGet("SearchDomain"),
	}
}

// pSearchRead holds the metadata of the Partner.SearchRead() method
type pSearchRead struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSearchRead) Extend(fnct func(m.PartnerSet, webtypes.SearchParams) []models.RecordData) pSearchRead {
	return pSearchRead{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSearchRead) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSearchRead{}

// SearchRead returns a pointer to the SearchRead Method.
func (c MethodsCollection) SearchRead() pSearchRead {
	return pSearchRead{
		Method: c.MustGet("SearchRead"),
	}
}

// pSorted holds the metadata of the Partner.Sorted() method
type pSorted struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSorted) Extend(fnct func(m.PartnerSet, func(m.PartnerSet, m.PartnerSet) bool) m.PartnerSet) pSorted {
	return pSorted{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSorted) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSorted{}

// Sorted returns a pointer to the Sorted Method.
func (c MethodsCollection) Sorted() pSorted {
	return pSorted{
		Method: c.MustGet("Sorted"),
	}
}

// pSortedByField holds the metadata of the Partner.SortedByField() method
type pSortedByField struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSortedByField) Extend(fnct func(m.PartnerSet, models.FieldName, bool) m.PartnerSet) pSortedByField {
	return pSortedByField{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSortedByField) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSortedByField{}

// SortedByField returns a pointer to the SortedByField Method.
func (c MethodsCollection) SortedByField() pSortedByField {
	return pSortedByField{
		Method: c.MustGet("SortedByField"),
	}
}

// pSortedDefault holds the metadata of the Partner.SortedDefault() method
type pSortedDefault struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSortedDefault) Extend(fnct func(m.PartnerSet) m.PartnerSet) pSortedDefault {
	return pSortedDefault{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSortedDefault) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSortedDefault{}

// SortedDefault returns a pointer to the SortedDefault Method.
func (c MethodsCollection) SortedDefault() pSortedDefault {
	return pSortedDefault{
		Method: c.MustGet("SortedDefault"),
	}
}

// pSubtract holds the metadata of the Partner.Subtract() method
type pSubtract struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSubtract) Extend(fnct func(m.PartnerSet, m.PartnerSet) m.PartnerSet) pSubtract {
	return pSubtract{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSubtract) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSubtract{}

// Subtract returns a pointer to the Subtract Method.
func (c MethodsCollection) Subtract() pSubtract {
	return pSubtract{
		Method: c.MustGet("Subtract"),
	}
}

// pSudo holds the metadata of the Partner.Sudo() method
type pSudo struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pSudo) Extend(fnct func(m.PartnerSet, ...int64) m.PartnerSet) pSudo {
	return pSudo{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pSudo) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pSudo{}

// Sudo returns a pointer to the Sudo Method.
func (c MethodsCollection) Sudo() pSudo {
	return pSudo{
		Method: c.MustGet("Sudo"),
	}
}

// pToggleActive holds the metadata of the Partner.ToggleActive() method
type pToggleActive struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pToggleActive) Extend(fnct func(m.PartnerSet)) pToggleActive {
	return pToggleActive{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pToggleActive) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pToggleActive{}

// ToggleActive returns a pointer to the ToggleActive Method.
func (c MethodsCollection) ToggleActive() pToggleActive {
	return pToggleActive{
		Method: c.MustGet("ToggleActive"),
	}
}

// pUnion holds the metadata of the Partner.Union() method
type pUnion struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pUnion) Extend(fnct func(m.PartnerSet, m.PartnerSet) m.PartnerSet) pUnion {
	return pUnion{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pUnion) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pUnion{}

// Union returns a pointer to the Union Method.
func (c MethodsCollection) Union() pUnion {
	return pUnion{
		Method: c.MustGet("Union"),
	}
}

// pUnlink holds the metadata of the Partner.Unlink() method
type pUnlink struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pUnlink) Extend(fnct func(m.PartnerSet) int64) pUnlink {
	return pUnlink{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pUnlink) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pUnlink{}

// Unlink returns a pointer to the Unlink Method.
func (c MethodsCollection) Unlink() pUnlink {
	return pUnlink{
		Method: c.MustGet("Unlink"),
	}
}

// pUpdateAddress holds the metadata of the Partner.UpdateAddress() method
type pUpdateAddress struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pUpdateAddress) Extend(fnct func(m.PartnerSet, m.PartnerData) bool) pUpdateAddress {
	return pUpdateAddress{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pUpdateAddress) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pUpdateAddress{}

// UpdateAddress returns a pointer to the UpdateAddress Method.
func (c MethodsCollection) UpdateAddress() pUpdateAddress {
	return pUpdateAddress{
		Method: c.MustGet("UpdateAddress"),
	}
}

// pUpdateFieldValues holds the metadata of the Partner.UpdateFieldValues() method
type pUpdateFieldValues struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pUpdateFieldValues) Extend(fnct func(m.PartnerSet, ...models.FieldName) m.PartnerData) pUpdateFieldValues {
	return pUpdateFieldValues{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pUpdateFieldValues) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pUpdateFieldValues{}

// UpdateFieldValues returns a pointer to the UpdateFieldValues Method.
func (c MethodsCollection) UpdateFieldValues() pUpdateFieldValues {
	return pUpdateFieldValues{
		Method: c.MustGet("UpdateFieldValues"),
	}
}

// pWebReadGroup holds the metadata of the Partner.WebReadGroup() method
type pWebReadGroup struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWebReadGroup) Extend(fnct func(m.PartnerSet, webtypes.WebReadGroupParams) webtypes.WebReadGroupResult) pWebReadGroup {
	return pWebReadGroup{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWebReadGroup) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWebReadGroup{}

// WebReadGroup returns a pointer to the WebReadGroup Method.
func (c MethodsCollection) WebReadGroup() pWebReadGroup {
	return pWebReadGroup{
		Method: c.MustGet("WebReadGroup"),
	}
}

// pWebReadGroupPrivate holds the metadata of the Partner.WebReadGroupPrivate() method
type pWebReadGroupPrivate struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWebReadGroupPrivate) Extend(fnct func(m.PartnerSet, webtypes.WebReadGroupParams) []models.FieldMap) pWebReadGroupPrivate {
	return pWebReadGroupPrivate{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWebReadGroupPrivate) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWebReadGroupPrivate{}

// WebReadGroupPrivate returns a pointer to the WebReadGroupPrivate Method.
func (c MethodsCollection) WebReadGroupPrivate() pWebReadGroupPrivate {
	return pWebReadGroupPrivate{
		Method: c.MustGet("WebReadGroupPrivate"),
	}
}

// pWebSearchRead holds the metadata of the Partner.WebSearchRead() method
type pWebSearchRead struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWebSearchRead) Extend(fnct func(m.PartnerSet, webtypes.SearchParams) webtypes.SearchReadResult) pWebSearchRead {
	return pWebSearchRead{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWebSearchRead) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWebSearchRead{}

// WebSearchRead returns a pointer to the WebSearchRead Method.
func (c MethodsCollection) WebSearchRead() pWebSearchRead {
	return pWebSearchRead{
		Method: c.MustGet("WebSearchRead"),
	}
}

// pWithContext holds the metadata of the Partner.WithContext() method
type pWithContext struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWithContext) Extend(fnct func(m.PartnerSet, string, interface{}) m.PartnerSet) pWithContext {
	return pWithContext{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWithContext) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWithContext{}

// WithContext returns a pointer to the WithContext Method.
func (c MethodsCollection) WithContext() pWithContext {
	return pWithContext{
		Method: c.MustGet("WithContext"),
	}
}

// pWithEnv holds the metadata of the Partner.WithEnv() method
type pWithEnv struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWithEnv) Extend(fnct func(m.PartnerSet, models.Environment) m.PartnerSet) pWithEnv {
	return pWithEnv{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWithEnv) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWithEnv{}

// WithEnv returns a pointer to the WithEnv Method.
func (c MethodsCollection) WithEnv() pWithEnv {
	return pWithEnv{
		Method: c.MustGet("WithEnv"),
	}
}

// pWithNewContext holds the metadata of the Partner.WithNewContext() method
type pWithNewContext struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWithNewContext) Extend(fnct func(m.PartnerSet, *types.Context) m.PartnerSet) pWithNewContext {
	return pWithNewContext{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWithNewContext) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWithNewContext{}

// WithNewContext returns a pointer to the WithNewContext Method.
func (c MethodsCollection) WithNewContext() pWithNewContext {
	return pWithNewContext{
		Method: c.MustGet("WithNewContext"),
	}
}

// pWrite holds the metadata of the Partner.Write() method
type pWrite struct {
	*models.Method
}

// Extend adds the given fnct function as a new layer on this method.
func (m pWrite) Extend(fnct func(m.PartnerSet, m.PartnerData) bool) pWrite {
	return pWrite{
		Method: m.Method.Extend(fnct),
	}
}

// Underlying returns a pointer to the underlying Method data object.
func (m pWrite) Underlying() *models.Method {
	return m.Method
}

var _ models.Methoder = pWrite{}

// Write returns a pointer to the Write Method.
func (c MethodsCollection) Write() pWrite {
	return pWrite{
		Method: c.MustGet("Write"),
	}
}

// ------- DATA STRUCT ---------

// PartnerData is used to hold values of an Partner object instance
// when creating or updating a PartnerSet.
type PartnerData struct {
	*models.ModelData
}

// Set sets the given field with the given value.
// If the field already exists, then it is updated with value.
// Otherwise, a new entry is inserted.
//
// It returns the given PartnerData so that calls can be chained
func (d PartnerData) Set(field models.FieldName, value interface{}) m.PartnerData {
	return &PartnerData{
		d.ModelData.Set(field, value),
	}
}

// Unset removes the value of the given field if it exists.
//
// It returns the given ModelData so that calls can be chained
func (d PartnerData) Unset(field models.FieldName) m.PartnerData {
	return &PartnerData{
		d.ModelData.Unset(field),
	}
}

// Copy returns a copy of this PartnerData
func (d PartnerData) Copy() m.PartnerData {
	return &PartnerData{
		d.ModelData.Copy(),
	}
}

// MergeWith updates this PartnerData with the given other PartnerData
// If a field of the other PartnerData already exists here, the value is overridden,
// otherwise, the field is inserted.
func (d PartnerData) MergeWith(other m.PartnerData) {
	d.ModelData.MergeWith(other.Underlying())
}

// Active returns the value of the Active field.
// If this Active is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Active() bool {
	val := d.ModelData.Get(models.NewFieldName("Active", "active"))
	if !d.Has(models.NewFieldName("Active", "active")) {
		return *new(bool)
	}
	return val.(bool)
}

// HasActive returns true if Active is set in this PartnerData
func (d PartnerData) HasActive() bool {
	return d.ModelData.Has(models.NewFieldName("Active", "active"))
}

// SetActive sets the Active field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetActive(value bool) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Active", "active"), value)
	return d
}

// UnsetActive removes the value of the Active field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetActive() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Active", "active"))
	return d
}

// ActiveLangCount returns the value of the ActiveLangCount field.
// If this ActiveLangCount is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) ActiveLangCount() int {
	val := d.ModelData.Get(models.NewFieldName("ActiveLangCount", "active_lang_count"))
	if !d.Has(models.NewFieldName("ActiveLangCount", "active_lang_count")) {
		return *new(int)
	}
	return val.(int)
}

// HasActiveLangCount returns true if ActiveLangCount is set in this PartnerData
func (d PartnerData) HasActiveLangCount() bool {
	return d.ModelData.Has(models.NewFieldName("ActiveLangCount", "active_lang_count"))
}

// SetActiveLangCount sets the ActiveLangCount field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetActiveLangCount(value int) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("ActiveLangCount", "active_lang_count"), value)
	return d
}

// UnsetActiveLangCount removes the value of the ActiveLangCount field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetActiveLangCount() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("ActiveLangCount", "active_lang_count"))
	return d
}

// Banks returns the value of the Banks field.
// If this Banks is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Banks() m.BankAccountSet {
	val := d.ModelData.Get(models.NewFieldName("Banks", "banks_ids"))
	if !d.Has(models.NewFieldName("Banks", "banks_ids")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("BankAccount")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.BankAccountSet)
}

// HasBanks returns true if Banks is set in this PartnerData
func (d PartnerData) HasBanks() bool {
	return d.ModelData.Has(models.NewFieldName("Banks", "banks_ids"))
}

// SetBanks sets the Banks field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetBanks(value m.BankAccountSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Banks", "banks_ids"), value)
	return d
}

// UnsetBanks removes the value of the Banks field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetBanks() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Banks", "banks_ids"))
	return d
}

// CreateBanks stores the related BankAccountData to be used to create
// a related record on the fly for Banks.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateBanks(related m.BankAccountData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Banks", "banks_ids"), related.Underlying())
	return d
}

// Barcode returns the value of the Barcode field.
// If this Barcode is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Barcode() string {
	val := d.ModelData.Get(models.NewFieldName("Barcode", "barcode"))
	if !d.Has(models.NewFieldName("Barcode", "barcode")) {
		return *new(string)
	}
	return val.(string)
}

// HasBarcode returns true if Barcode is set in this PartnerData
func (d PartnerData) HasBarcode() bool {
	return d.ModelData.Has(models.NewFieldName("Barcode", "barcode"))
}

// SetBarcode sets the Barcode field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetBarcode(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Barcode", "barcode"), value)
	return d
}

// UnsetBarcode removes the value of the Barcode field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetBarcode() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Barcode", "barcode"))
	return d
}

// Categories returns the value of the Categories field.
// If this Categories is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Categories() m.PartnerCategorySet {
	val := d.ModelData.Get(models.NewFieldName("Categories", "category_ids"))
	if !d.Has(models.NewFieldName("Categories", "category_ids")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("PartnerCategory")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerCategorySet)
}

// HasCategories returns true if Categories is set in this PartnerData
func (d PartnerData) HasCategories() bool {
	return d.ModelData.Has(models.NewFieldName("Categories", "category_ids"))
}

// SetCategories sets the Categories field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCategories(value m.PartnerCategorySet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Categories", "category_ids"), value)
	return d
}

// UnsetCategories removes the value of the Categories field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCategories() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Categories", "category_ids"))
	return d
}

// CreateCategories stores the related PartnerCategoryData to be used to create
// a related record on the fly for Categories.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateCategories(related m.PartnerCategoryData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Categories", "category_ids"), related.Underlying())
	return d
}

// Children returns the value of the Children field.
// If this Children is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Children() m.PartnerSet {
	val := d.ModelData.Get(models.NewFieldName("Children", "children_ids"))
	if !d.Has(models.NewFieldName("Children", "children_ids")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("Partner")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerSet)
}

// HasChildren returns true if Children is set in this PartnerData
func (d PartnerData) HasChildren() bool {
	return d.ModelData.Has(models.NewFieldName("Children", "children_ids"))
}

// SetChildren sets the Children field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetChildren(value m.PartnerSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Children", "children_ids"), value)
	return d
}

// UnsetChildren removes the value of the Children field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetChildren() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Children", "children_ids"))
	return d
}

// CreateChildren stores the related PartnerData to be used to create
// a related record on the fly for Children.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateChildren(related m.PartnerData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Children", "children_ids"), related.Underlying())
	return d
}

// City returns the value of the City field.
// If this City is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) City() string {
	val := d.ModelData.Get(models.NewFieldName("City", "city"))
	if !d.Has(models.NewFieldName("City", "city")) {
		return *new(string)
	}
	return val.(string)
}

// HasCity returns true if City is set in this PartnerData
func (d PartnerData) HasCity() bool {
	return d.ModelData.Has(models.NewFieldName("City", "city"))
}

// SetCity sets the City field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCity(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("City", "city"), value)
	return d
}

// UnsetCity removes the value of the City field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCity() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("City", "city"))
	return d
}

// Color returns the value of the Color field.
// If this Color is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Color() int64 {
	val := d.ModelData.Get(models.NewFieldName("Color", "color"))
	if !d.Has(models.NewFieldName("Color", "color")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasColor returns true if Color is set in this PartnerData
func (d PartnerData) HasColor() bool {
	return d.ModelData.Has(models.NewFieldName("Color", "color"))
}

// SetColor sets the Color field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetColor(value int64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Color", "color"), value)
	return d
}

// UnsetColor removes the value of the Color field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetColor() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Color", "color"))
	return d
}

// Comment returns the value of the Comment field.
// If this Comment is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Comment() string {
	val := d.ModelData.Get(models.NewFieldName("Comment", "comment"))
	if !d.Has(models.NewFieldName("Comment", "comment")) {
		return *new(string)
	}
	return val.(string)
}

// HasComment returns true if Comment is set in this PartnerData
func (d PartnerData) HasComment() bool {
	return d.ModelData.Has(models.NewFieldName("Comment", "comment"))
}

// SetComment sets the Comment field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetComment(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Comment", "comment"), value)
	return d
}

// UnsetComment removes the value of the Comment field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetComment() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Comment", "comment"))
	return d
}

// CommercialCompanyName returns the value of the CommercialCompanyName field.
// If this CommercialCompanyName is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CommercialCompanyName() string {
	val := d.ModelData.Get(models.NewFieldName("CommercialCompanyName", "commercial_company_name"))
	if !d.Has(models.NewFieldName("CommercialCompanyName", "commercial_company_name")) {
		return *new(string)
	}
	return val.(string)
}

// HasCommercialCompanyName returns true if CommercialCompanyName is set in this PartnerData
func (d PartnerData) HasCommercialCompanyName() bool {
	return d.ModelData.Has(models.NewFieldName("CommercialCompanyName", "commercial_company_name"))
}

// SetCommercialCompanyName sets the CommercialCompanyName field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCommercialCompanyName(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CommercialCompanyName", "commercial_company_name"), value)
	return d
}

// UnsetCommercialCompanyName removes the value of the CommercialCompanyName field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCommercialCompanyName() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CommercialCompanyName", "commercial_company_name"))
	return d
}

// CommercialPartner returns the value of the CommercialPartner field.
// If this CommercialPartner is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CommercialPartner() m.PartnerSet {
	val := d.ModelData.Get(models.NewFieldName("CommercialPartner", "commercial_partner_id"))
	if !d.Has(models.NewFieldName("CommercialPartner", "commercial_partner_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("Partner")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerSet)
}

// HasCommercialPartner returns true if CommercialPartner is set in this PartnerData
func (d PartnerData) HasCommercialPartner() bool {
	return d.ModelData.Has(models.NewFieldName("CommercialPartner", "commercial_partner_id"))
}

// SetCommercialPartner sets the CommercialPartner field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCommercialPartner(value m.PartnerSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CommercialPartner", "commercial_partner_id"), value)
	return d
}

// UnsetCommercialPartner removes the value of the CommercialPartner field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCommercialPartner() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CommercialPartner", "commercial_partner_id"))
	return d
}

// CreateCommercialPartner stores the related PartnerData to be used to create
// a related record on the fly for CommercialPartner.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateCommercialPartner(related m.PartnerData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("CommercialPartner", "commercial_partner_id"), related.Underlying())
	return d
}

// Company returns the value of the Company field.
// If this Company is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Company() m.CompanySet {
	val := d.ModelData.Get(models.NewFieldName("Company", "company_id"))
	if !d.Has(models.NewFieldName("Company", "company_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("Company")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.CompanySet)
}

// HasCompany returns true if Company is set in this PartnerData
func (d PartnerData) HasCompany() bool {
	return d.ModelData.Has(models.NewFieldName("Company", "company_id"))
}

// SetCompany sets the Company field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCompany(value m.CompanySet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Company", "company_id"), value)
	return d
}

// UnsetCompany removes the value of the Company field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCompany() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Company", "company_id"))
	return d
}

// CreateCompany stores the related CompanyData to be used to create
// a related record on the fly for Company.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateCompany(related m.CompanyData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Company", "company_id"), related.Underlying())
	return d
}

// CompanyName returns the value of the CompanyName field.
// If this CompanyName is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CompanyName() string {
	val := d.ModelData.Get(models.NewFieldName("CompanyName", "company_name"))
	if !d.Has(models.NewFieldName("CompanyName", "company_name")) {
		return *new(string)
	}
	return val.(string)
}

// HasCompanyName returns true if CompanyName is set in this PartnerData
func (d PartnerData) HasCompanyName() bool {
	return d.ModelData.Has(models.NewFieldName("CompanyName", "company_name"))
}

// SetCompanyName sets the CompanyName field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCompanyName(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CompanyName", "company_name"), value)
	return d
}

// UnsetCompanyName removes the value of the CompanyName field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCompanyName() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CompanyName", "company_name"))
	return d
}

// CompanyType returns the value of the CompanyType field.
// If this CompanyType is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CompanyType() string {
	val := d.ModelData.Get(models.NewFieldName("CompanyType", "company_type"))
	if !d.Has(models.NewFieldName("CompanyType", "company_type")) {
		return *new(string)
	}
	return val.(string)
}

// HasCompanyType returns true if CompanyType is set in this PartnerData
func (d PartnerData) HasCompanyType() bool {
	return d.ModelData.Has(models.NewFieldName("CompanyType", "company_type"))
}

// SetCompanyType sets the CompanyType field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCompanyType(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CompanyType", "company_type"), value)
	return d
}

// UnsetCompanyType removes the value of the CompanyType field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCompanyType() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CompanyType", "company_type"))
	return d
}

// ContactAddress returns the value of the ContactAddress field.
// If this ContactAddress is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) ContactAddress() string {
	val := d.ModelData.Get(models.NewFieldName("ContactAddress", "contact_address"))
	if !d.Has(models.NewFieldName("ContactAddress", "contact_address")) {
		return *new(string)
	}
	return val.(string)
}

// HasContactAddress returns true if ContactAddress is set in this PartnerData
func (d PartnerData) HasContactAddress() bool {
	return d.ModelData.Has(models.NewFieldName("ContactAddress", "contact_address"))
}

// SetContactAddress sets the ContactAddress field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetContactAddress(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("ContactAddress", "contact_address"), value)
	return d
}

// UnsetContactAddress removes the value of the ContactAddress field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetContactAddress() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("ContactAddress", "contact_address"))
	return d
}

// Country returns the value of the Country field.
// If this Country is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Country() m.CountrySet {
	val := d.ModelData.Get(models.NewFieldName("Country", "country_id"))
	if !d.Has(models.NewFieldName("Country", "country_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("Country")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.CountrySet)
}

// HasCountry returns true if Country is set in this PartnerData
func (d PartnerData) HasCountry() bool {
	return d.ModelData.Has(models.NewFieldName("Country", "country_id"))
}

// SetCountry sets the Country field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCountry(value m.CountrySet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Country", "country_id"), value)
	return d
}

// UnsetCountry removes the value of the Country field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCountry() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Country", "country_id"))
	return d
}

// CreateCountry stores the related CountryData to be used to create
// a related record on the fly for Country.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateCountry(related m.CountryData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Country", "country_id"), related.Underlying())
	return d
}

// CreateDate returns the value of the CreateDate field.
// If this CreateDate is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CreateDate() dates.DateTime {
	val := d.ModelData.Get(models.NewFieldName("CreateDate", "create_date"))
	if !d.Has(models.NewFieldName("CreateDate", "create_date")) {
		return *new(dates.DateTime)
	}
	return val.(dates.DateTime)
}

// HasCreateDate returns true if CreateDate is set in this PartnerData
func (d PartnerData) HasCreateDate() bool {
	return d.ModelData.Has(models.NewFieldName("CreateDate", "create_date"))
}

// SetCreateDate sets the CreateDate field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCreateDate(value dates.DateTime) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CreateDate", "create_date"), value)
	return d
}

// UnsetCreateDate removes the value of the CreateDate field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCreateDate() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CreateDate", "create_date"))
	return d
}

// CreateUID returns the value of the CreateUID field.
// If this CreateUID is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CreateUID() int64 {
	val := d.ModelData.Get(models.NewFieldName("CreateUID", "create_uid"))
	if !d.Has(models.NewFieldName("CreateUID", "create_uid")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasCreateUID returns true if CreateUID is set in this PartnerData
func (d PartnerData) HasCreateUID() bool {
	return d.ModelData.Has(models.NewFieldName("CreateUID", "create_uid"))
}

// SetCreateUID sets the CreateUID field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCreateUID(value int64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CreateUID", "create_uid"), value)
	return d
}

// UnsetCreateUID removes the value of the CreateUID field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCreateUID() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CreateUID", "create_uid"))
	return d
}

// CreditLimit returns the value of the CreditLimit field.
// If this CreditLimit is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) CreditLimit() float64 {
	val := d.ModelData.Get(models.NewFieldName("CreditLimit", "credit_limit"))
	if !d.Has(models.NewFieldName("CreditLimit", "credit_limit")) {
		return *new(float64)
	}
	return val.(float64)
}

// HasCreditLimit returns true if CreditLimit is set in this PartnerData
func (d PartnerData) HasCreditLimit() bool {
	return d.ModelData.Has(models.NewFieldName("CreditLimit", "credit_limit"))
}

// SetCreditLimit sets the CreditLimit field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetCreditLimit(value float64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("CreditLimit", "credit_limit"), value)
	return d
}

// UnsetCreditLimit removes the value of the CreditLimit field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetCreditLimit() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("CreditLimit", "credit_limit"))
	return d
}

// Date returns the value of the Date field.
// If this Date is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Date() dates.Date {
	val := d.ModelData.Get(models.NewFieldName("Date", "date"))
	if !d.Has(models.NewFieldName("Date", "date")) {
		return *new(dates.Date)
	}
	return val.(dates.Date)
}

// HasDate returns true if Date is set in this PartnerData
func (d PartnerData) HasDate() bool {
	return d.ModelData.Has(models.NewFieldName("Date", "date"))
}

// SetDate sets the Date field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetDate(value dates.Date) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Date", "date"), value)
	return d
}

// UnsetDate removes the value of the Date field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetDate() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Date", "date"))
	return d
}

// DisplayName returns the value of the DisplayName field.
// If this DisplayName is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) DisplayName() string {
	val := d.ModelData.Get(models.NewFieldName("DisplayName", "display_name"))
	if !d.Has(models.NewFieldName("DisplayName", "display_name")) {
		return *new(string)
	}
	return val.(string)
}

// HasDisplayName returns true if DisplayName is set in this PartnerData
func (d PartnerData) HasDisplayName() bool {
	return d.ModelData.Has(models.NewFieldName("DisplayName", "display_name"))
}

// SetDisplayName sets the DisplayName field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetDisplayName(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("DisplayName", "display_name"), value)
	return d
}

// UnsetDisplayName removes the value of the DisplayName field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetDisplayName() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("DisplayName", "display_name"))
	return d
}

// Email returns the value of the Email field.
// If this Email is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Email() string {
	val := d.ModelData.Get(models.NewFieldName("Email", "email"))
	if !d.Has(models.NewFieldName("Email", "email")) {
		return *new(string)
	}
	return val.(string)
}

// HasEmail returns true if Email is set in this PartnerData
func (d PartnerData) HasEmail() bool {
	return d.ModelData.Has(models.NewFieldName("Email", "email"))
}

// SetEmail sets the Email field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetEmail(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Email", "email"), value)
	return d
}

// UnsetEmail removes the value of the Email field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetEmail() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Email", "email"))
	return d
}

// EmailFormatted returns the value of the EmailFormatted field.
// If this EmailFormatted is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) EmailFormatted() string {
	val := d.ModelData.Get(models.NewFieldName("EmailFormatted", "email_formatted"))
	if !d.Has(models.NewFieldName("EmailFormatted", "email_formatted")) {
		return *new(string)
	}
	return val.(string)
}

// HasEmailFormatted returns true if EmailFormatted is set in this PartnerData
func (d PartnerData) HasEmailFormatted() bool {
	return d.ModelData.Has(models.NewFieldName("EmailFormatted", "email_formatted"))
}

// SetEmailFormatted sets the EmailFormatted field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetEmailFormatted(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("EmailFormatted", "email_formatted"), value)
	return d
}

// UnsetEmailFormatted removes the value of the EmailFormatted field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetEmailFormatted() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("EmailFormatted", "email_formatted"))
	return d
}

// Employee returns the value of the Employee field.
// If this Employee is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Employee() bool {
	val := d.ModelData.Get(models.NewFieldName("Employee", "employee"))
	if !d.Has(models.NewFieldName("Employee", "employee")) {
		return *new(bool)
	}
	return val.(bool)
}

// HasEmployee returns true if Employee is set in this PartnerData
func (d PartnerData) HasEmployee() bool {
	return d.ModelData.Has(models.NewFieldName("Employee", "employee"))
}

// SetEmployee sets the Employee field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetEmployee(value bool) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Employee", "employee"), value)
	return d
}

// UnsetEmployee removes the value of the Employee field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetEmployee() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Employee", "employee"))
	return d
}

// Function returns the value of the Function field.
// If this Function is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Function() string {
	val := d.ModelData.Get(models.NewFieldName("Function", "function"))
	if !d.Has(models.NewFieldName("Function", "function")) {
		return *new(string)
	}
	return val.(string)
}

// HasFunction returns true if Function is set in this PartnerData
func (d PartnerData) HasFunction() bool {
	return d.ModelData.Has(models.NewFieldName("Function", "function"))
}

// SetFunction sets the Function field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetFunction(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Function", "function"), value)
	return d
}

// UnsetFunction removes the value of the Function field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetFunction() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Function", "function"))
	return d
}

// HexyaExternalID returns the value of the HexyaExternalID field.
// If this HexyaExternalID is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) HexyaExternalID() string {
	val := d.ModelData.Get(models.NewFieldName("HexyaExternalID", "hexya_external_id"))
	if !d.Has(models.NewFieldName("HexyaExternalID", "hexya_external_id")) {
		return *new(string)
	}
	return val.(string)
}

// HasHexyaExternalID returns true if HexyaExternalID is set in this PartnerData
func (d PartnerData) HasHexyaExternalID() bool {
	return d.ModelData.Has(models.NewFieldName("HexyaExternalID", "hexya_external_id"))
}

// SetHexyaExternalID sets the HexyaExternalID field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetHexyaExternalID(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("HexyaExternalID", "hexya_external_id"), value)
	return d
}

// UnsetHexyaExternalID removes the value of the HexyaExternalID field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetHexyaExternalID() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("HexyaExternalID", "hexya_external_id"))
	return d
}

// HexyaVersion returns the value of the HexyaVersion field.
// If this HexyaVersion is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) HexyaVersion() int {
	val := d.ModelData.Get(models.NewFieldName("HexyaVersion", "hexya_version"))
	if !d.Has(models.NewFieldName("HexyaVersion", "hexya_version")) {
		return *new(int)
	}
	return val.(int)
}

// HasHexyaVersion returns true if HexyaVersion is set in this PartnerData
func (d PartnerData) HasHexyaVersion() bool {
	return d.ModelData.Has(models.NewFieldName("HexyaVersion", "hexya_version"))
}

// SetHexyaVersion sets the HexyaVersion field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetHexyaVersion(value int) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("HexyaVersion", "hexya_version"), value)
	return d
}

// UnsetHexyaVersion removes the value of the HexyaVersion field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetHexyaVersion() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("HexyaVersion", "hexya_version"))
	return d
}

// ID returns the value of the ID field.
// If this ID is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) ID() int64 {
	val := d.ModelData.Get(models.NewFieldName("ID", "id"))
	if !d.Has(models.NewFieldName("ID", "id")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasID returns true if ID is set in this PartnerData
func (d PartnerData) HasID() bool {
	return d.ModelData.Has(models.NewFieldName("ID", "id"))
}

// SetID sets the ID field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetID(value int64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("ID", "id"), value)
	return d
}

// UnsetID removes the value of the ID field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetID() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("ID", "id"))
	return d
}

// Image returns the value of the Image field.
// If this Image is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Image() string {
	val := d.ModelData.Get(models.NewFieldName("Image", "image"))
	if !d.Has(models.NewFieldName("Image", "image")) {
		return *new(string)
	}
	return val.(string)
}

// HasImage returns true if Image is set in this PartnerData
func (d PartnerData) HasImage() bool {
	return d.ModelData.Has(models.NewFieldName("Image", "image"))
}

// SetImage sets the Image field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImage(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Image", "image"), value)
	return d
}

// UnsetImage removes the value of the Image field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImage() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Image", "image"))
	return d
}

// Image1024 returns the value of the Image1024 field.
// If this Image1024 is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Image1024() string {
	val := d.ModelData.Get(models.NewFieldName("Image1024", "image_1024"))
	if !d.Has(models.NewFieldName("Image1024", "image_1024")) {
		return *new(string)
	}
	return val.(string)
}

// HasImage1024 returns true if Image1024 is set in this PartnerData
func (d PartnerData) HasImage1024() bool {
	return d.ModelData.Has(models.NewFieldName("Image1024", "image_1024"))
}

// SetImage1024 sets the Image1024 field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImage1024(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Image1024", "image_1024"), value)
	return d
}

// UnsetImage1024 removes the value of the Image1024 field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImage1024() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Image1024", "image_1024"))
	return d
}

// Image128 returns the value of the Image128 field.
// If this Image128 is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Image128() string {
	val := d.ModelData.Get(models.NewFieldName("Image128", "image_128"))
	if !d.Has(models.NewFieldName("Image128", "image_128")) {
		return *new(string)
	}
	return val.(string)
}

// HasImage128 returns true if Image128 is set in this PartnerData
func (d PartnerData) HasImage128() bool {
	return d.ModelData.Has(models.NewFieldName("Image128", "image_128"))
}

// SetImage128 sets the Image128 field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImage128(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Image128", "image_128"), value)
	return d
}

// UnsetImage128 removes the value of the Image128 field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImage128() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Image128", "image_128"))
	return d
}

// Image1920 returns the value of the Image1920 field.
// If this Image1920 is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Image1920() string {
	val := d.ModelData.Get(models.NewFieldName("Image1920", "image_1920"))
	if !d.Has(models.NewFieldName("Image1920", "image_1920")) {
		return *new(string)
	}
	return val.(string)
}

// HasImage1920 returns true if Image1920 is set in this PartnerData
func (d PartnerData) HasImage1920() bool {
	return d.ModelData.Has(models.NewFieldName("Image1920", "image_1920"))
}

// SetImage1920 sets the Image1920 field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImage1920(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Image1920", "image_1920"), value)
	return d
}

// UnsetImage1920 removes the value of the Image1920 field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImage1920() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Image1920", "image_1920"))
	return d
}

// Image256 returns the value of the Image256 field.
// If this Image256 is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Image256() string {
	val := d.ModelData.Get(models.NewFieldName("Image256", "image_256"))
	if !d.Has(models.NewFieldName("Image256", "image_256")) {
		return *new(string)
	}
	return val.(string)
}

// HasImage256 returns true if Image256 is set in this PartnerData
func (d PartnerData) HasImage256() bool {
	return d.ModelData.Has(models.NewFieldName("Image256", "image_256"))
}

// SetImage256 sets the Image256 field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImage256(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Image256", "image_256"), value)
	return d
}

// UnsetImage256 removes the value of the Image256 field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImage256() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Image256", "image_256"))
	return d
}

// Image512 returns the value of the Image512 field.
// If this Image512 is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Image512() string {
	val := d.ModelData.Get(models.NewFieldName("Image512", "image_512"))
	if !d.Has(models.NewFieldName("Image512", "image_512")) {
		return *new(string)
	}
	return val.(string)
}

// HasImage512 returns true if Image512 is set in this PartnerData
func (d PartnerData) HasImage512() bool {
	return d.ModelData.Has(models.NewFieldName("Image512", "image_512"))
}

// SetImage512 sets the Image512 field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImage512(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Image512", "image_512"), value)
	return d
}

// UnsetImage512 removes the value of the Image512 field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImage512() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Image512", "image_512"))
	return d
}

// ImageMedium returns the value of the ImageMedium field.
// If this ImageMedium is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) ImageMedium() string {
	val := d.ModelData.Get(models.NewFieldName("ImageMedium", "image_medium"))
	if !d.Has(models.NewFieldName("ImageMedium", "image_medium")) {
		return *new(string)
	}
	return val.(string)
}

// HasImageMedium returns true if ImageMedium is set in this PartnerData
func (d PartnerData) HasImageMedium() bool {
	return d.ModelData.Has(models.NewFieldName("ImageMedium", "image_medium"))
}

// SetImageMedium sets the ImageMedium field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImageMedium(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("ImageMedium", "image_medium"), value)
	return d
}

// UnsetImageMedium removes the value of the ImageMedium field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImageMedium() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("ImageMedium", "image_medium"))
	return d
}

// ImageSmall returns the value of the ImageSmall field.
// If this ImageSmall is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) ImageSmall() string {
	val := d.ModelData.Get(models.NewFieldName("ImageSmall", "image_small"))
	if !d.Has(models.NewFieldName("ImageSmall", "image_small")) {
		return *new(string)
	}
	return val.(string)
}

// HasImageSmall returns true if ImageSmall is set in this PartnerData
func (d PartnerData) HasImageSmall() bool {
	return d.ModelData.Has(models.NewFieldName("ImageSmall", "image_small"))
}

// SetImageSmall sets the ImageSmall field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetImageSmall(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("ImageSmall", "image_small"), value)
	return d
}

// UnsetImageSmall removes the value of the ImageSmall field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetImageSmall() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("ImageSmall", "image_small"))
	return d
}

// Industry returns the value of the Industry field.
// If this Industry is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Industry() m.PartnerIndustrySet {
	val := d.ModelData.Get(models.NewFieldName("Industry", "industry_id"))
	if !d.Has(models.NewFieldName("Industry", "industry_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("PartnerIndustry")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerIndustrySet)
}

// HasIndustry returns true if Industry is set in this PartnerData
func (d PartnerData) HasIndustry() bool {
	return d.ModelData.Has(models.NewFieldName("Industry", "industry_id"))
}

// SetIndustry sets the Industry field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetIndustry(value m.PartnerIndustrySet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Industry", "industry_id"), value)
	return d
}

// UnsetIndustry removes the value of the Industry field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetIndustry() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Industry", "industry_id"))
	return d
}

// CreateIndustry stores the related PartnerIndustryData to be used to create
// a related record on the fly for Industry.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateIndustry(related m.PartnerIndustryData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Industry", "industry_id"), related.Underlying())
	return d
}

// IsCompany returns the value of the IsCompany field.
// If this IsCompany is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) IsCompany() bool {
	val := d.ModelData.Get(models.NewFieldName("IsCompany", "is_company"))
	if !d.Has(models.NewFieldName("IsCompany", "is_company")) {
		return *new(bool)
	}
	return val.(bool)
}

// HasIsCompany returns true if IsCompany is set in this PartnerData
func (d PartnerData) HasIsCompany() bool {
	return d.ModelData.Has(models.NewFieldName("IsCompany", "is_company"))
}

// SetIsCompany sets the IsCompany field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetIsCompany(value bool) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("IsCompany", "is_company"), value)
	return d
}

// UnsetIsCompany removes the value of the IsCompany field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetIsCompany() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("IsCompany", "is_company"))
	return d
}

// Lang returns the value of the Lang field.
// If this Lang is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Lang() string {
	val := d.ModelData.Get(models.NewFieldName("Lang", "lang"))
	if !d.Has(models.NewFieldName("Lang", "lang")) {
		return *new(string)
	}
	return val.(string)
}

// HasLang returns true if Lang is set in this PartnerData
func (d PartnerData) HasLang() bool {
	return d.ModelData.Has(models.NewFieldName("Lang", "lang"))
}

// SetLang sets the Lang field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetLang(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Lang", "lang"), value)
	return d
}

// UnsetLang removes the value of the Lang field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetLang() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Lang", "lang"))
	return d
}

// LastUpdate returns the value of the LastUpdate field.
// If this LastUpdate is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) LastUpdate() dates.DateTime {
	val := d.ModelData.Get(models.NewFieldName("LastUpdate", "__last_update"))
	if !d.Has(models.NewFieldName("LastUpdate", "__last_update")) {
		return *new(dates.DateTime)
	}
	return val.(dates.DateTime)
}

// HasLastUpdate returns true if LastUpdate is set in this PartnerData
func (d PartnerData) HasLastUpdate() bool {
	return d.ModelData.Has(models.NewFieldName("LastUpdate", "__last_update"))
}

// SetLastUpdate sets the LastUpdate field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetLastUpdate(value dates.DateTime) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("LastUpdate", "__last_update"), value)
	return d
}

// UnsetLastUpdate removes the value of the LastUpdate field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetLastUpdate() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("LastUpdate", "__last_update"))
	return d
}

// Latitude returns the value of the Latitude field.
// If this Latitude is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Latitude() float64 {
	val := d.ModelData.Get(models.NewFieldName("Latitude", "latitude"))
	if !d.Has(models.NewFieldName("Latitude", "latitude")) {
		return *new(float64)
	}
	return val.(float64)
}

// HasLatitude returns true if Latitude is set in this PartnerData
func (d PartnerData) HasLatitude() bool {
	return d.ModelData.Has(models.NewFieldName("Latitude", "latitude"))
}

// SetLatitude sets the Latitude field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetLatitude(value float64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Latitude", "latitude"), value)
	return d
}

// UnsetLatitude removes the value of the Latitude field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetLatitude() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Latitude", "latitude"))
	return d
}

// Longitude returns the value of the Longitude field.
// If this Longitude is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Longitude() float64 {
	val := d.ModelData.Get(models.NewFieldName("Longitude", "longitude"))
	if !d.Has(models.NewFieldName("Longitude", "longitude")) {
		return *new(float64)
	}
	return val.(float64)
}

// HasLongitude returns true if Longitude is set in this PartnerData
func (d PartnerData) HasLongitude() bool {
	return d.ModelData.Has(models.NewFieldName("Longitude", "longitude"))
}

// SetLongitude sets the Longitude field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetLongitude(value float64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Longitude", "longitude"), value)
	return d
}

// UnsetLongitude removes the value of the Longitude field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetLongitude() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Longitude", "longitude"))
	return d
}

// Mobile returns the value of the Mobile field.
// If this Mobile is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Mobile() string {
	val := d.ModelData.Get(models.NewFieldName("Mobile", "mobile"))
	if !d.Has(models.NewFieldName("Mobile", "mobile")) {
		return *new(string)
	}
	return val.(string)
}

// HasMobile returns true if Mobile is set in this PartnerData
func (d PartnerData) HasMobile() bool {
	return d.ModelData.Has(models.NewFieldName("Mobile", "mobile"))
}

// SetMobile sets the Mobile field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetMobile(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Mobile", "mobile"), value)
	return d
}

// UnsetMobile removes the value of the Mobile field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetMobile() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Mobile", "mobile"))
	return d
}

// Name returns the value of the Name field.
// If this Name is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Name() string {
	val := d.ModelData.Get(models.NewFieldName("Name", "name"))
	if !d.Has(models.NewFieldName("Name", "name")) {
		return *new(string)
	}
	return val.(string)
}

// HasName returns true if Name is set in this PartnerData
func (d PartnerData) HasName() bool {
	return d.ModelData.Has(models.NewFieldName("Name", "name"))
}

// SetName sets the Name field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetName(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Name", "name"), value)
	return d
}

// UnsetName removes the value of the Name field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetName() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Name", "name"))
	return d
}

// Parent returns the value of the Parent field.
// If this Parent is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Parent() m.PartnerSet {
	val := d.ModelData.Get(models.NewFieldName("Parent", "parent_id"))
	if !d.Has(models.NewFieldName("Parent", "parent_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("Partner")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerSet)
}

// HasParent returns true if Parent is set in this PartnerData
func (d PartnerData) HasParent() bool {
	return d.ModelData.Has(models.NewFieldName("Parent", "parent_id"))
}

// SetParent sets the Parent field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetParent(value m.PartnerSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Parent", "parent_id"), value)
	return d
}

// UnsetParent removes the value of the Parent field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetParent() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Parent", "parent_id"))
	return d
}

// CreateParent stores the related PartnerData to be used to create
// a related record on the fly for Parent.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateParent(related m.PartnerData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Parent", "parent_id"), related.Underlying())
	return d
}

// ParentName returns the value of the ParentName field.
// If this ParentName is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) ParentName() string {
	val := d.ModelData.Get(models.NewFieldName("ParentName", "parent_name"))
	if !d.Has(models.NewFieldName("ParentName", "parent_name")) {
		return *new(string)
	}
	return val.(string)
}

// HasParentName returns true if ParentName is set in this PartnerData
func (d PartnerData) HasParentName() bool {
	return d.ModelData.Has(models.NewFieldName("ParentName", "parent_name"))
}

// SetParentName sets the ParentName field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetParentName(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("ParentName", "parent_name"), value)
	return d
}

// UnsetParentName removes the value of the ParentName field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetParentName() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("ParentName", "parent_name"))
	return d
}

// PartnerShare returns the value of the PartnerShare field.
// If this PartnerShare is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) PartnerShare() bool {
	val := d.ModelData.Get(models.NewFieldName("PartnerShare", "partner_share"))
	if !d.Has(models.NewFieldName("PartnerShare", "partner_share")) {
		return *new(bool)
	}
	return val.(bool)
}

// HasPartnerShare returns true if PartnerShare is set in this PartnerData
func (d PartnerData) HasPartnerShare() bool {
	return d.ModelData.Has(models.NewFieldName("PartnerShare", "partner_share"))
}

// SetPartnerShare sets the PartnerShare field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetPartnerShare(value bool) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("PartnerShare", "partner_share"), value)
	return d
}

// UnsetPartnerShare removes the value of the PartnerShare field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetPartnerShare() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("PartnerShare", "partner_share"))
	return d
}

// Phone returns the value of the Phone field.
// If this Phone is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Phone() string {
	val := d.ModelData.Get(models.NewFieldName("Phone", "phone"))
	if !d.Has(models.NewFieldName("Phone", "phone")) {
		return *new(string)
	}
	return val.(string)
}

// HasPhone returns true if Phone is set in this PartnerData
func (d PartnerData) HasPhone() bool {
	return d.ModelData.Has(models.NewFieldName("Phone", "phone"))
}

// SetPhone sets the Phone field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetPhone(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Phone", "phone"), value)
	return d
}

// UnsetPhone removes the value of the Phone field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetPhone() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Phone", "phone"))
	return d
}

// Ref returns the value of the Ref field.
// If this Ref is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Ref() string {
	val := d.ModelData.Get(models.NewFieldName("Ref", "ref"))
	if !d.Has(models.NewFieldName("Ref", "ref")) {
		return *new(string)
	}
	return val.(string)
}

// HasRef returns true if Ref is set in this PartnerData
func (d PartnerData) HasRef() bool {
	return d.ModelData.Has(models.NewFieldName("Ref", "ref"))
}

// SetRef sets the Ref field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetRef(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Ref", "ref"), value)
	return d
}

// UnsetRef removes the value of the Ref field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetRef() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Ref", "ref"))
	return d
}

// SameVATPartner returns the value of the SameVATPartner field.
// If this SameVATPartner is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) SameVATPartner() m.PartnerSet {
	val := d.ModelData.Get(models.NewFieldName("SameVATPartner", "same_vat_partner_id"))
	if !d.Has(models.NewFieldName("SameVATPartner", "same_vat_partner_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("Partner")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerSet)
}

// HasSameVATPartner returns true if SameVATPartner is set in this PartnerData
func (d PartnerData) HasSameVATPartner() bool {
	return d.ModelData.Has(models.NewFieldName("SameVATPartner", "same_vat_partner_id"))
}

// SetSameVATPartner sets the SameVATPartner field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetSameVATPartner(value m.PartnerSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("SameVATPartner", "same_vat_partner_id"), value)
	return d
}

// UnsetSameVATPartner removes the value of the SameVATPartner field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetSameVATPartner() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("SameVATPartner", "same_vat_partner_id"))
	return d
}

// CreateSameVATPartner stores the related PartnerData to be used to create
// a related record on the fly for SameVATPartner.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateSameVATPartner(related m.PartnerData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("SameVATPartner", "same_vat_partner_id"), related.Underlying())
	return d
}

// State returns the value of the State field.
// If this State is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) State() m.CountryStateSet {
	val := d.ModelData.Get(models.NewFieldName("State", "state_id"))
	if !d.Has(models.NewFieldName("State", "state_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("CountryState")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.CountryStateSet)
}

// HasState returns true if State is set in this PartnerData
func (d PartnerData) HasState() bool {
	return d.ModelData.Has(models.NewFieldName("State", "state_id"))
}

// SetState sets the State field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetState(value m.CountryStateSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("State", "state_id"), value)
	return d
}

// UnsetState removes the value of the State field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetState() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("State", "state_id"))
	return d
}

// CreateState stores the related CountryStateData to be used to create
// a related record on the fly for State.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateState(related m.CountryStateData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("State", "state_id"), related.Underlying())
	return d
}

// Street returns the value of the Street field.
// If this Street is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Street() string {
	val := d.ModelData.Get(models.NewFieldName("Street", "street"))
	if !d.Has(models.NewFieldName("Street", "street")) {
		return *new(string)
	}
	return val.(string)
}

// HasStreet returns true if Street is set in this PartnerData
func (d PartnerData) HasStreet() bool {
	return d.ModelData.Has(models.NewFieldName("Street", "street"))
}

// SetStreet sets the Street field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetStreet(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Street", "street"), value)
	return d
}

// UnsetStreet removes the value of the Street field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetStreet() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Street", "street"))
	return d
}

// Street2 returns the value of the Street2 field.
// If this Street2 is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Street2() string {
	val := d.ModelData.Get(models.NewFieldName("Street2", "street2"))
	if !d.Has(models.NewFieldName("Street2", "street2")) {
		return *new(string)
	}
	return val.(string)
}

// HasStreet2 returns true if Street2 is set in this PartnerData
func (d PartnerData) HasStreet2() bool {
	return d.ModelData.Has(models.NewFieldName("Street2", "street2"))
}

// SetStreet2 sets the Street2 field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetStreet2(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Street2", "street2"), value)
	return d
}

// UnsetStreet2 removes the value of the Street2 field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetStreet2() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Street2", "street2"))
	return d
}

// TZ returns the value of the TZ field.
// If this TZ is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) TZ() string {
	val := d.ModelData.Get(models.NewFieldName("TZ", "tz"))
	if !d.Has(models.NewFieldName("TZ", "tz")) {
		return *new(string)
	}
	return val.(string)
}

// HasTZ returns true if TZ is set in this PartnerData
func (d PartnerData) HasTZ() bool {
	return d.ModelData.Has(models.NewFieldName("TZ", "tz"))
}

// SetTZ sets the TZ field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetTZ(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("TZ", "tz"), value)
	return d
}

// UnsetTZ removes the value of the TZ field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetTZ() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("TZ", "tz"))
	return d
}

// TZOffset returns the value of the TZOffset field.
// If this TZOffset is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) TZOffset() string {
	val := d.ModelData.Get(models.NewFieldName("TZOffset", "tz_offset"))
	if !d.Has(models.NewFieldName("TZOffset", "tz_offset")) {
		return *new(string)
	}
	return val.(string)
}

// HasTZOffset returns true if TZOffset is set in this PartnerData
func (d PartnerData) HasTZOffset() bool {
	return d.ModelData.Has(models.NewFieldName("TZOffset", "tz_offset"))
}

// SetTZOffset sets the TZOffset field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetTZOffset(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("TZOffset", "tz_offset"), value)
	return d
}

// UnsetTZOffset removes the value of the TZOffset field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetTZOffset() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("TZOffset", "tz_offset"))
	return d
}

// Title returns the value of the Title field.
// If this Title is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Title() m.PartnerTitleSet {
	val := d.ModelData.Get(models.NewFieldName("Title", "title_id"))
	if !d.Has(models.NewFieldName("Title", "title_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("PartnerTitle")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.PartnerTitleSet)
}

// HasTitle returns true if Title is set in this PartnerData
func (d PartnerData) HasTitle() bool {
	return d.ModelData.Has(models.NewFieldName("Title", "title_id"))
}

// SetTitle sets the Title field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetTitle(value m.PartnerTitleSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Title", "title_id"), value)
	return d
}

// UnsetTitle removes the value of the Title field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetTitle() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Title", "title_id"))
	return d
}

// CreateTitle stores the related PartnerTitleData to be used to create
// a related record on the fly for Title.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateTitle(related m.PartnerTitleData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Title", "title_id"), related.Underlying())
	return d
}

// Type returns the value of the Type field.
// If this Type is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Type() string {
	val := d.ModelData.Get(models.NewFieldName("Type", "type"))
	if !d.Has(models.NewFieldName("Type", "type")) {
		return *new(string)
	}
	return val.(string)
}

// HasType returns true if Type is set in this PartnerData
func (d PartnerData) HasType() bool {
	return d.ModelData.Has(models.NewFieldName("Type", "type"))
}

// SetType sets the Type field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetType(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Type", "type"), value)
	return d
}

// UnsetType removes the value of the Type field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetType() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Type", "type"))
	return d
}

// User returns the value of the User field.
// If this User is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) User() m.UserSet {
	val := d.ModelData.Get(models.NewFieldName("User", "user_id"))
	if !d.Has(models.NewFieldName("User", "user_id")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("User")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.UserSet)
}

// HasUser returns true if User is set in this PartnerData
func (d PartnerData) HasUser() bool {
	return d.ModelData.Has(models.NewFieldName("User", "user_id"))
}

// SetUser sets the User field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetUser(value m.UserSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("User", "user_id"), value)
	return d
}

// UnsetUser removes the value of the User field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetUser() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("User", "user_id"))
	return d
}

// CreateUser stores the related UserData to be used to create
// a related record on the fly for User.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateUser(related m.UserData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("User", "user_id"), related.Underlying())
	return d
}

// Users returns the value of the Users field.
// If this Users is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Users() m.UserSet {
	val := d.ModelData.Get(models.NewFieldName("Users", "user_ids"))
	if !d.Has(models.NewFieldName("Users", "user_ids")) || val == nil || val == (*interface{})(nil) {
		val = models.InvalidRecordCollection("User")
	}
	return val.(models.RecordSet).Collection().Wrap().(m.UserSet)
}

// HasUsers returns true if Users is set in this PartnerData
func (d PartnerData) HasUsers() bool {
	return d.ModelData.Has(models.NewFieldName("Users", "user_ids"))
}

// SetUsers sets the Users field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetUsers(value m.UserSet) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Users", "user_ids"), value)
	return d
}

// UnsetUsers removes the value of the Users field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetUsers() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Users", "user_ids"))
	return d
}

// CreateUsers stores the related UserData to be used to create
// a related record on the fly for Users.
//
// This method can be called multiple times to create multiple records
func (d PartnerData) CreateUsers(related m.UserData) m.PartnerData {
	d.ModelData.Create(models.NewFieldName("Users", "user_ids"), related.Underlying())
	return d
}

// VAT returns the value of the VAT field.
// If this VAT is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) VAT() string {
	val := d.ModelData.Get(models.NewFieldName("VAT", "vat"))
	if !d.Has(models.NewFieldName("VAT", "vat")) {
		return *new(string)
	}
	return val.(string)
}

// HasVAT returns true if VAT is set in this PartnerData
func (d PartnerData) HasVAT() bool {
	return d.ModelData.Has(models.NewFieldName("VAT", "vat"))
}

// SetVAT sets the VAT field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetVAT(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("VAT", "vat"), value)
	return d
}

// UnsetVAT removes the value of the VAT field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetVAT() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("VAT", "vat"))
	return d
}

// Website returns the value of the Website field.
// If this Website is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Website() string {
	val := d.ModelData.Get(models.NewFieldName("Website", "website"))
	if !d.Has(models.NewFieldName("Website", "website")) {
		return *new(string)
	}
	return val.(string)
}

// HasWebsite returns true if Website is set in this PartnerData
func (d PartnerData) HasWebsite() bool {
	return d.ModelData.Has(models.NewFieldName("Website", "website"))
}

// SetWebsite sets the Website field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetWebsite(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Website", "website"), value)
	return d
}

// UnsetWebsite removes the value of the Website field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetWebsite() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Website", "website"))
	return d
}

// WriteDate returns the value of the WriteDate field.
// If this WriteDate is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) WriteDate() dates.DateTime {
	val := d.ModelData.Get(models.NewFieldName("WriteDate", "write_date"))
	if !d.Has(models.NewFieldName("WriteDate", "write_date")) {
		return *new(dates.DateTime)
	}
	return val.(dates.DateTime)
}

// HasWriteDate returns true if WriteDate is set in this PartnerData
func (d PartnerData) HasWriteDate() bool {
	return d.ModelData.Has(models.NewFieldName("WriteDate", "write_date"))
}

// SetWriteDate sets the WriteDate field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetWriteDate(value dates.DateTime) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("WriteDate", "write_date"), value)
	return d
}

// UnsetWriteDate removes the value of the WriteDate field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetWriteDate() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("WriteDate", "write_date"))
	return d
}

// WriteUID returns the value of the WriteUID field.
// If this WriteUID is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) WriteUID() int64 {
	val := d.ModelData.Get(models.NewFieldName("WriteUID", "write_uid"))
	if !d.Has(models.NewFieldName("WriteUID", "write_uid")) {
		return *new(int64)
	}
	return val.(int64)
}

// HasWriteUID returns true if WriteUID is set in this PartnerData
func (d PartnerData) HasWriteUID() bool {
	return d.ModelData.Has(models.NewFieldName("WriteUID", "write_uid"))
}

// SetWriteUID sets the WriteUID field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetWriteUID(value int64) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("WriteUID", "write_uid"), value)
	return d
}

// UnsetWriteUID removes the value of the WriteUID field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetWriteUID() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("WriteUID", "write_uid"))
	return d
}

// Zip returns the value of the Zip field.
// If this Zip is not set in this PartnerData, then
// the Go zero value for the type is returned.
func (d PartnerData) Zip() string {
	val := d.ModelData.Get(models.NewFieldName("Zip", "zip"))
	if !d.Has(models.NewFieldName("Zip", "zip")) {
		return *new(string)
	}
	return val.(string)
}

// HasZip returns true if Zip is set in this PartnerData
func (d PartnerData) HasZip() bool {
	return d.ModelData.Has(models.NewFieldName("Zip", "zip"))
}

// SetZip sets the Zip field with the given value.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) SetZip(value string) m.PartnerData {
	d.ModelData.Set(models.NewFieldName("Zip", "zip"), value)
	return d
}

// UnsetZip removes the value of the Zip field if it exists.
// It returns this PartnerData so that calls can be chained.
func (d PartnerData) UnsetZip() m.PartnerData {
	d.ModelData.Unset(models.NewFieldName("Zip", "zip"))
	return d
}

var _ m.PartnerData = new(PartnerData)
var _ m.PartnerData = PartnerData{}

// ------ AGGREGATE ROW --------

// A PartnerGroupAggregateRow holds a row of results of a query with a group by clause
// - Values holds the values of the actual query
// - Count is the number of lines aggregated into this one
// - Condition can be used to query the aggregated rows separately if needed
type PartnerGroupAggregateRow struct {
	values    m.PartnerData
	count     int
	condition q.PartnerCondition
}

// Values returns the values of the actual query
func (a PartnerGroupAggregateRow) Values() m.PartnerData {
	return a.values
}

// Count returns the number of lines aggregated into this one
func (a PartnerGroupAggregateRow) Count() int {
	return a.count
}

// Condition can be used to query the aggregated rows separately if needed
func (a PartnerGroupAggregateRow) Condition() q.PartnerCondition {
	return a.condition
}

// ------- RECORD SET ---------

// PartnerSet is an autogenerated type to handle Partner objects.
type PartnerSet struct {
	*models.RecordCollection
}

var _ models.RecordSet = PartnerSet{}

// PartnerSetHexyaFunc is a dummy function to uniquely match interfaces.
func (s PartnerSet) PartnerSetHexyaFunc() {}

// IsValid returns true if this RecordSet has been initialized.
func (s PartnerSet) IsValid() bool {
	if s.RecordCollection == nil {
		return false
	}
	return s.RecordCollection.IsValid()
}

// ForceLoad reloads the cache for the given fields and updates the ids of this PartnerSet.
//
// If no fields are given, all DB columns of the Partner model are retrieved.
//
// It also returns this PartnerSet.
func (s PartnerSet) ForceLoad(fields ...models.FieldName) m.PartnerSet {
	s.RecordCollection.ForceLoad(fields...)
	return s
}

// Records returns a slice with all the records of this RecordSet, as singleton
// RecordSets
func (s PartnerSet) Records() []m.PartnerSet {
	recs := s.RecordCollection.Records()
	res := make([]m.PartnerSet, len(recs))
	for i, rec := range recs {
		res[i] = rec.Wrap("Partner").(m.PartnerSet)
	}
	return res
}

// CartesianProduct returns the cartesian product of this PartnerSet with others.
func (s PartnerSet) CartesianProduct(others ...m.PartnerSet) []m.PartnerSet {
	otherSet := make([]models.RecordSet, len(others))
	for i, o := range others {
		otherSet[i] = o
	}
	recs := s.RecordCollection.CartesianProduct(otherSet...)
	res := make([]m.PartnerSet, len(recs))
	for i, rec := range recs {
		res[i] = rec.Wrap("Partner").(m.PartnerSet)
	}
	return res
}

// First returns the values of the first Record of the RecordSet as a pointer to a PartnerData.
//
// If this RecordSet is empty, it returns an empty PartnerData.
func (s PartnerSet) First() m.PartnerData {
	return &PartnerData{
		s.RecordCollection.First(),
	}
}

// All returns the values of all Records of the RecordCollection as a slice of PartnerData pointers.
func (s PartnerSet) All() []m.PartnerData {
	allSlice := s.RecordCollection.All()
	res := make([]m.PartnerData, len(allSlice))
	for i, v := range allSlice {
		res[i] = &PartnerData{v}
	}
	return res
}

// Sorted returns a new PartnerSet sorted according to the given less function.
//
// The less function should return true if rs1 < rs2
func (s PartnerSet) Sorted(less func(rs1, rs2 m.PartnerSet) bool) m.PartnerSet {
	res := s.RecordCollection.Sorted(func(rc1 models.RecordSet, rc2 models.RecordSet) bool {
		return less(PartnerSet{RecordCollection: rc1.Collection()}, PartnerSet{RecordCollection: rc2.Collection()})
	})
	return res.Wrap("Partner").(m.PartnerSet)
}

// Filtered returns a new PartnerSet with only the elements of this record set
// for which test is true.
//
// Note that if this PartnerSet is not fully loaded, this function will call the database
// to load the fields before doing the filtering. In this case, it might be more efficient
// to search the database directly with the filter condition.
func (s PartnerSet) Filtered(test func(rs m.PartnerSet) bool) m.PartnerSet {
	res := s.RecordCollection.Filtered(func(rc models.RecordSet) bool {
		return test(PartnerSet{RecordCollection: rc.Collection()})
	})
	return res.Wrap("Partner").(m.PartnerSet)
}

// Active is a getter for the value of the "Active" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Active() bool {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Active", "active")).(bool)
	return res
}

// SetActive is a setter for the value of the "Active" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetActive panics if the RecordSet is empty.
func (s PartnerSet) SetActive(value bool) {
	s.RecordCollection.Set(models.NewFieldName("Active", "active"), value)
}

// ActiveLangCount is a getter for the value of the "ActiveLangCount" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) ActiveLangCount() int {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ActiveLangCount", "active_lang_count")).(int)
	return res
}

// SetActiveLangCount is a setter for the value of the "ActiveLangCount" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetActiveLangCount panics if the RecordSet is empty.
func (s PartnerSet) SetActiveLangCount(value int) {
	s.RecordCollection.Set(models.NewFieldName("ActiveLangCount", "active_lang_count"), value)
}

// Banks is a getter for the value of the "Banks" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Banks() m.BankAccountSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Banks", "banks_ids")).(models.RecordSet).Collection().Wrap("BankAccount").(m.BankAccountSet)
	return res
}

// SetBanks is a setter for the value of the "Banks" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetBanks panics if the RecordSet is empty.
func (s PartnerSet) SetBanks(value m.BankAccountSet) {
	s.RecordCollection.Set(models.NewFieldName("Banks", "banks_ids"), value)
}

// Barcode is a getter for the value of the "Barcode" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Barcode() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Barcode", "barcode")).(string)
	return res
}

// SetBarcode is a setter for the value of the "Barcode" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetBarcode panics if the RecordSet is empty.
func (s PartnerSet) SetBarcode(value string) {
	s.RecordCollection.Set(models.NewFieldName("Barcode", "barcode"), value)
}

// Categories is a getter for the value of the "Categories" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Categories() m.PartnerCategorySet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Categories", "category_ids")).(models.RecordSet).Collection().Wrap("PartnerCategory").(m.PartnerCategorySet)
	return res
}

// SetCategories is a setter for the value of the "Categories" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCategories panics if the RecordSet is empty.
func (s PartnerSet) SetCategories(value m.PartnerCategorySet) {
	s.RecordCollection.Set(models.NewFieldName("Categories", "category_ids"), value)
}

// Children is a getter for the value of the "Children" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Children() m.PartnerSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Children", "children_ids")).(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return res
}

// SetChildren is a setter for the value of the "Children" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetChildren panics if the RecordSet is empty.
func (s PartnerSet) SetChildren(value m.PartnerSet) {
	s.RecordCollection.Set(models.NewFieldName("Children", "children_ids"), value)
}

// City is a getter for the value of the "City" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) City() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("City", "city")).(string)
	return res
}

// SetCity is a setter for the value of the "City" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCity panics if the RecordSet is empty.
func (s PartnerSet) SetCity(value string) {
	s.RecordCollection.Set(models.NewFieldName("City", "city"), value)
}

// Color is a getter for the value of the "Color" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Color() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Color", "color")).(int64)
	return res
}

// SetColor is a setter for the value of the "Color" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetColor panics if the RecordSet is empty.
func (s PartnerSet) SetColor(value int64) {
	s.RecordCollection.Set(models.NewFieldName("Color", "color"), value)
}

// Comment is a getter for the value of the "Comment" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Comment() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Comment", "comment")).(string)
	return res
}

// SetComment is a setter for the value of the "Comment" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetComment panics if the RecordSet is empty.
func (s PartnerSet) SetComment(value string) {
	s.RecordCollection.Set(models.NewFieldName("Comment", "comment"), value)
}

// CommercialCompanyName is a getter for the value of the "CommercialCompanyName" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CommercialCompanyName() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CommercialCompanyName", "commercial_company_name")).(string)
	return res
}

// SetCommercialCompanyName is a setter for the value of the "CommercialCompanyName" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCommercialCompanyName panics if the RecordSet is empty.
func (s PartnerSet) SetCommercialCompanyName(value string) {
	s.RecordCollection.Set(models.NewFieldName("CommercialCompanyName", "commercial_company_name"), value)
}

// CommercialPartner is a getter for the value of the "CommercialPartner" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CommercialPartner() m.PartnerSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CommercialPartner", "commercial_partner_id")).(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return res
}

// SetCommercialPartner is a setter for the value of the "CommercialPartner" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCommercialPartner panics if the RecordSet is empty.
func (s PartnerSet) SetCommercialPartner(value m.PartnerSet) {
	s.RecordCollection.Set(models.NewFieldName("CommercialPartner", "commercial_partner_id"), value)
}

// Company is a getter for the value of the "Company" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Company() m.CompanySet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Company", "company_id")).(models.RecordSet).Collection().Wrap("Company").(m.CompanySet)
	return res
}

// SetCompany is a setter for the value of the "Company" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCompany panics if the RecordSet is empty.
func (s PartnerSet) SetCompany(value m.CompanySet) {
	s.RecordCollection.Set(models.NewFieldName("Company", "company_id"), value)
}

// CompanyName is a getter for the value of the "CompanyName" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CompanyName() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CompanyName", "company_name")).(string)
	return res
}

// SetCompanyName is a setter for the value of the "CompanyName" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCompanyName panics if the RecordSet is empty.
func (s PartnerSet) SetCompanyName(value string) {
	s.RecordCollection.Set(models.NewFieldName("CompanyName", "company_name"), value)
}

// CompanyType is a getter for the value of the "CompanyType" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CompanyType() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CompanyType", "company_type")).(string)
	return res
}

// SetCompanyType is a setter for the value of the "CompanyType" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCompanyType panics if the RecordSet is empty.
func (s PartnerSet) SetCompanyType(value string) {
	s.RecordCollection.Set(models.NewFieldName("CompanyType", "company_type"), value)
}

// ContactAddress is a getter for the value of the "ContactAddress" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) ContactAddress() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ContactAddress", "contact_address")).(string)
	return res
}

// SetContactAddress is a setter for the value of the "ContactAddress" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetContactAddress panics if the RecordSet is empty.
func (s PartnerSet) SetContactAddress(value string) {
	s.RecordCollection.Set(models.NewFieldName("ContactAddress", "contact_address"), value)
}

// Country is a getter for the value of the "Country" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Country() m.CountrySet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Country", "country_id")).(models.RecordSet).Collection().Wrap("Country").(m.CountrySet)
	return res
}

// SetCountry is a setter for the value of the "Country" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCountry panics if the RecordSet is empty.
func (s PartnerSet) SetCountry(value m.CountrySet) {
	s.RecordCollection.Set(models.NewFieldName("Country", "country_id"), value)
}

// CreateDate is a getter for the value of the "CreateDate" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CreateDate() dates.DateTime {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CreateDate", "create_date")).(dates.DateTime)
	return res
}

// SetCreateDate is a setter for the value of the "CreateDate" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCreateDate panics if the RecordSet is empty.
func (s PartnerSet) SetCreateDate(value dates.DateTime) {
	s.RecordCollection.Set(models.NewFieldName("CreateDate", "create_date"), value)
}

// CreateUID is a getter for the value of the "CreateUID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CreateUID() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CreateUID", "create_uid")).(int64)
	return res
}

// SetCreateUID is a setter for the value of the "CreateUID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCreateUID panics if the RecordSet is empty.
func (s PartnerSet) SetCreateUID(value int64) {
	s.RecordCollection.Set(models.NewFieldName("CreateUID", "create_uid"), value)
}

// CreditLimit is a getter for the value of the "CreditLimit" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) CreditLimit() float64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("CreditLimit", "credit_limit")).(float64)
	return res
}

// SetCreditLimit is a setter for the value of the "CreditLimit" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetCreditLimit panics if the RecordSet is empty.
func (s PartnerSet) SetCreditLimit(value float64) {
	s.RecordCollection.Set(models.NewFieldName("CreditLimit", "credit_limit"), value)
}

// Date is a getter for the value of the "Date" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Date() dates.Date {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Date", "date")).(dates.Date)
	return res
}

// SetDate is a setter for the value of the "Date" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetDate panics if the RecordSet is empty.
func (s PartnerSet) SetDate(value dates.Date) {
	s.RecordCollection.Set(models.NewFieldName("Date", "date"), value)
}

// DisplayName is a getter for the value of the "DisplayName" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) DisplayName() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("DisplayName", "display_name")).(string)
	return res
}

// SetDisplayName is a setter for the value of the "DisplayName" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetDisplayName panics if the RecordSet is empty.
func (s PartnerSet) SetDisplayName(value string) {
	s.RecordCollection.Set(models.NewFieldName("DisplayName", "display_name"), value)
}

// Email is a getter for the value of the "Email" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Email() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Email", "email")).(string)
	return res
}

// SetEmail is a setter for the value of the "Email" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetEmail panics if the RecordSet is empty.
func (s PartnerSet) SetEmail(value string) {
	s.RecordCollection.Set(models.NewFieldName("Email", "email"), value)
}

// EmailFormatted is a getter for the value of the "EmailFormatted" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) EmailFormatted() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("EmailFormatted", "email_formatted")).(string)
	return res
}

// SetEmailFormatted is a setter for the value of the "EmailFormatted" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetEmailFormatted panics if the RecordSet is empty.
func (s PartnerSet) SetEmailFormatted(value string) {
	s.RecordCollection.Set(models.NewFieldName("EmailFormatted", "email_formatted"), value)
}

// Employee is a getter for the value of the "Employee" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Employee() bool {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Employee", "employee")).(bool)
	return res
}

// SetEmployee is a setter for the value of the "Employee" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetEmployee panics if the RecordSet is empty.
func (s PartnerSet) SetEmployee(value bool) {
	s.RecordCollection.Set(models.NewFieldName("Employee", "employee"), value)
}

// Function is a getter for the value of the "Function" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Function() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Function", "function")).(string)
	return res
}

// SetFunction is a setter for the value of the "Function" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetFunction panics if the RecordSet is empty.
func (s PartnerSet) SetFunction(value string) {
	s.RecordCollection.Set(models.NewFieldName("Function", "function"), value)
}

// HexyaExternalID is a getter for the value of the "HexyaExternalID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) HexyaExternalID() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("HexyaExternalID", "hexya_external_id")).(string)
	return res
}

// SetHexyaExternalID is a setter for the value of the "HexyaExternalID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetHexyaExternalID panics if the RecordSet is empty.
func (s PartnerSet) SetHexyaExternalID(value string) {
	s.RecordCollection.Set(models.NewFieldName("HexyaExternalID", "hexya_external_id"), value)
}

// HexyaVersion is a getter for the value of the "HexyaVersion" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) HexyaVersion() int {
	res, _ := s.RecordCollection.Get(models.NewFieldName("HexyaVersion", "hexya_version")).(int)
	return res
}

// SetHexyaVersion is a setter for the value of the "HexyaVersion" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetHexyaVersion panics if the RecordSet is empty.
func (s PartnerSet) SetHexyaVersion(value int) {
	s.RecordCollection.Set(models.NewFieldName("HexyaVersion", "hexya_version"), value)
}

// ID is a getter for the value of the "ID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) ID() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ID", "id")).(int64)
	return res
}

// SetID is a setter for the value of the "ID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetID panics if the RecordSet is empty.
func (s PartnerSet) SetID(value int64) {
	s.RecordCollection.Set(models.NewFieldName("ID", "id"), value)
}

// Image is a getter for the value of the "Image" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Image() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Image", "image")).(string)
	return res
}

// SetImage is a setter for the value of the "Image" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImage panics if the RecordSet is empty.
func (s PartnerSet) SetImage(value string) {
	s.RecordCollection.Set(models.NewFieldName("Image", "image"), value)
}

// Image1024 is a getter for the value of the "Image1024" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Image1024() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Image1024", "image_1024")).(string)
	return res
}

// SetImage1024 is a setter for the value of the "Image1024" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImage1024 panics if the RecordSet is empty.
func (s PartnerSet) SetImage1024(value string) {
	s.RecordCollection.Set(models.NewFieldName("Image1024", "image_1024"), value)
}

// Image128 is a getter for the value of the "Image128" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Image128() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Image128", "image_128")).(string)
	return res
}

// SetImage128 is a setter for the value of the "Image128" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImage128 panics if the RecordSet is empty.
func (s PartnerSet) SetImage128(value string) {
	s.RecordCollection.Set(models.NewFieldName("Image128", "image_128"), value)
}

// Image1920 is a getter for the value of the "Image1920" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Image1920() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Image1920", "image_1920")).(string)
	return res
}

// SetImage1920 is a setter for the value of the "Image1920" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImage1920 panics if the RecordSet is empty.
func (s PartnerSet) SetImage1920(value string) {
	s.RecordCollection.Set(models.NewFieldName("Image1920", "image_1920"), value)
}

// Image256 is a getter for the value of the "Image256" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Image256() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Image256", "image_256")).(string)
	return res
}

// SetImage256 is a setter for the value of the "Image256" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImage256 panics if the RecordSet is empty.
func (s PartnerSet) SetImage256(value string) {
	s.RecordCollection.Set(models.NewFieldName("Image256", "image_256"), value)
}

// Image512 is a getter for the value of the "Image512" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Image512() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Image512", "image_512")).(string)
	return res
}

// SetImage512 is a setter for the value of the "Image512" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImage512 panics if the RecordSet is empty.
func (s PartnerSet) SetImage512(value string) {
	s.RecordCollection.Set(models.NewFieldName("Image512", "image_512"), value)
}

// ImageMedium is a getter for the value of the "ImageMedium" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) ImageMedium() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ImageMedium", "image_medium")).(string)
	return res
}

// SetImageMedium is a setter for the value of the "ImageMedium" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImageMedium panics if the RecordSet is empty.
func (s PartnerSet) SetImageMedium(value string) {
	s.RecordCollection.Set(models.NewFieldName("ImageMedium", "image_medium"), value)
}

// ImageSmall is a getter for the value of the "ImageSmall" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) ImageSmall() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ImageSmall", "image_small")).(string)
	return res
}

// SetImageSmall is a setter for the value of the "ImageSmall" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetImageSmall panics if the RecordSet is empty.
func (s PartnerSet) SetImageSmall(value string) {
	s.RecordCollection.Set(models.NewFieldName("ImageSmall", "image_small"), value)
}

// Industry is a getter for the value of the "Industry" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Industry() m.PartnerIndustrySet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Industry", "industry_id")).(models.RecordSet).Collection().Wrap("PartnerIndustry").(m.PartnerIndustrySet)
	return res
}

// SetIndustry is a setter for the value of the "Industry" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetIndustry panics if the RecordSet is empty.
func (s PartnerSet) SetIndustry(value m.PartnerIndustrySet) {
	s.RecordCollection.Set(models.NewFieldName("Industry", "industry_id"), value)
}

// IsCompany is a getter for the value of the "IsCompany" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) IsCompany() bool {
	res, _ := s.RecordCollection.Get(models.NewFieldName("IsCompany", "is_company")).(bool)
	return res
}

// SetIsCompany is a setter for the value of the "IsCompany" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetIsCompany panics if the RecordSet is empty.
func (s PartnerSet) SetIsCompany(value bool) {
	s.RecordCollection.Set(models.NewFieldName("IsCompany", "is_company"), value)
}

// Lang is a getter for the value of the "Lang" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Lang() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Lang", "lang")).(string)
	return res
}

// SetLang is a setter for the value of the "Lang" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetLang panics if the RecordSet is empty.
func (s PartnerSet) SetLang(value string) {
	s.RecordCollection.Set(models.NewFieldName("Lang", "lang"), value)
}

// LastUpdate is a getter for the value of the "LastUpdate" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) LastUpdate() dates.DateTime {
	res, _ := s.RecordCollection.Get(models.NewFieldName("LastUpdate", "__last_update")).(dates.DateTime)
	return res
}

// SetLastUpdate is a setter for the value of the "LastUpdate" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetLastUpdate panics if the RecordSet is empty.
func (s PartnerSet) SetLastUpdate(value dates.DateTime) {
	s.RecordCollection.Set(models.NewFieldName("LastUpdate", "__last_update"), value)
}

// Latitude is a getter for the value of the "Latitude" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Latitude() float64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Latitude", "latitude")).(float64)
	return res
}

// SetLatitude is a setter for the value of the "Latitude" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetLatitude panics if the RecordSet is empty.
func (s PartnerSet) SetLatitude(value float64) {
	s.RecordCollection.Set(models.NewFieldName("Latitude", "latitude"), value)
}

// Longitude is a getter for the value of the "Longitude" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Longitude() float64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Longitude", "longitude")).(float64)
	return res
}

// SetLongitude is a setter for the value of the "Longitude" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetLongitude panics if the RecordSet is empty.
func (s PartnerSet) SetLongitude(value float64) {
	s.RecordCollection.Set(models.NewFieldName("Longitude", "longitude"), value)
}

// Mobile is a getter for the value of the "Mobile" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Mobile() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Mobile", "mobile")).(string)
	return res
}

// SetMobile is a setter for the value of the "Mobile" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetMobile panics if the RecordSet is empty.
func (s PartnerSet) SetMobile(value string) {
	s.RecordCollection.Set(models.NewFieldName("Mobile", "mobile"), value)
}

// Name is a getter for the value of the "Name" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Name() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Name", "name")).(string)
	return res
}

// SetName is a setter for the value of the "Name" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetName panics if the RecordSet is empty.
func (s PartnerSet) SetName(value string) {
	s.RecordCollection.Set(models.NewFieldName("Name", "name"), value)
}

// Parent is a getter for the value of the "Parent" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Parent() m.PartnerSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Parent", "parent_id")).(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return res
}

// SetParent is a setter for the value of the "Parent" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetParent panics if the RecordSet is empty.
func (s PartnerSet) SetParent(value m.PartnerSet) {
	s.RecordCollection.Set(models.NewFieldName("Parent", "parent_id"), value)
}

// ParentName is a getter for the value of the "ParentName" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) ParentName() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("ParentName", "parent_name")).(string)
	return res
}

// SetParentName is a setter for the value of the "ParentName" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetParentName panics if the RecordSet is empty.
func (s PartnerSet) SetParentName(value string) {
	s.RecordCollection.Set(models.NewFieldName("ParentName", "parent_name"), value)
}

// PartnerShare is a getter for the value of the "PartnerShare" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) PartnerShare() bool {
	res, _ := s.RecordCollection.Get(models.NewFieldName("PartnerShare", "partner_share")).(bool)
	return res
}

// SetPartnerShare is a setter for the value of the "PartnerShare" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetPartnerShare panics if the RecordSet is empty.
func (s PartnerSet) SetPartnerShare(value bool) {
	s.RecordCollection.Set(models.NewFieldName("PartnerShare", "partner_share"), value)
}

// Phone is a getter for the value of the "Phone" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Phone() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Phone", "phone")).(string)
	return res
}

// SetPhone is a setter for the value of the "Phone" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetPhone panics if the RecordSet is empty.
func (s PartnerSet) SetPhone(value string) {
	s.RecordCollection.Set(models.NewFieldName("Phone", "phone"), value)
}

// Ref is a getter for the value of the "Ref" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Ref() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Ref", "ref")).(string)
	return res
}

// SetRef is a setter for the value of the "Ref" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetRef panics if the RecordSet is empty.
func (s PartnerSet) SetRef(value string) {
	s.RecordCollection.Set(models.NewFieldName("Ref", "ref"), value)
}

// SameVATPartner is a getter for the value of the "SameVATPartner" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) SameVATPartner() m.PartnerSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("SameVATPartner", "same_vat_partner_id")).(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return res
}

// SetSameVATPartner is a setter for the value of the "SameVATPartner" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetSameVATPartner panics if the RecordSet is empty.
func (s PartnerSet) SetSameVATPartner(value m.PartnerSet) {
	s.RecordCollection.Set(models.NewFieldName("SameVATPartner", "same_vat_partner_id"), value)
}

// State is a getter for the value of the "State" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) State() m.CountryStateSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("State", "state_id")).(models.RecordSet).Collection().Wrap("CountryState").(m.CountryStateSet)
	return res
}

// SetState is a setter for the value of the "State" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetState panics if the RecordSet is empty.
func (s PartnerSet) SetState(value m.CountryStateSet) {
	s.RecordCollection.Set(models.NewFieldName("State", "state_id"), value)
}

// Street is a getter for the value of the "Street" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Street() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Street", "street")).(string)
	return res
}

// SetStreet is a setter for the value of the "Street" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetStreet panics if the RecordSet is empty.
func (s PartnerSet) SetStreet(value string) {
	s.RecordCollection.Set(models.NewFieldName("Street", "street"), value)
}

// Street2 is a getter for the value of the "Street2" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Street2() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Street2", "street2")).(string)
	return res
}

// SetStreet2 is a setter for the value of the "Street2" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetStreet2 panics if the RecordSet is empty.
func (s PartnerSet) SetStreet2(value string) {
	s.RecordCollection.Set(models.NewFieldName("Street2", "street2"), value)
}

// TZ is a getter for the value of the "TZ" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) TZ() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("TZ", "tz")).(string)
	return res
}

// SetTZ is a setter for the value of the "TZ" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetTZ panics if the RecordSet is empty.
func (s PartnerSet) SetTZ(value string) {
	s.RecordCollection.Set(models.NewFieldName("TZ", "tz"), value)
}

// TZOffset is a getter for the value of the "TZOffset" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) TZOffset() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("TZOffset", "tz_offset")).(string)
	return res
}

// SetTZOffset is a setter for the value of the "TZOffset" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetTZOffset panics if the RecordSet is empty.
func (s PartnerSet) SetTZOffset(value string) {
	s.RecordCollection.Set(models.NewFieldName("TZOffset", "tz_offset"), value)
}

// Title is a getter for the value of the "Title" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Title() m.PartnerTitleSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Title", "title_id")).(models.RecordSet).Collection().Wrap("PartnerTitle").(m.PartnerTitleSet)
	return res
}

// SetTitle is a setter for the value of the "Title" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetTitle panics if the RecordSet is empty.
func (s PartnerSet) SetTitle(value m.PartnerTitleSet) {
	s.RecordCollection.Set(models.NewFieldName("Title", "title_id"), value)
}

// Type is a getter for the value of the "Type" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Type() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Type", "type")).(string)
	return res
}

// SetType is a setter for the value of the "Type" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetType panics if the RecordSet is empty.
func (s PartnerSet) SetType(value string) {
	s.RecordCollection.Set(models.NewFieldName("Type", "type"), value)
}

// User is a getter for the value of the "User" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) User() m.UserSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("User", "user_id")).(models.RecordSet).Collection().Wrap("User").(m.UserSet)
	return res
}

// SetUser is a setter for the value of the "User" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetUser panics if the RecordSet is empty.
func (s PartnerSet) SetUser(value m.UserSet) {
	s.RecordCollection.Set(models.NewFieldName("User", "user_id"), value)
}

// Users is a getter for the value of the "Users" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Users() m.UserSet {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Users", "user_ids")).(models.RecordSet).Collection().Wrap("User").(m.UserSet)
	return res
}

// SetUsers is a setter for the value of the "Users" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetUsers panics if the RecordSet is empty.
func (s PartnerSet) SetUsers(value m.UserSet) {
	s.RecordCollection.Set(models.NewFieldName("Users", "user_ids"), value)
}

// VAT is a getter for the value of the "VAT" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) VAT() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("VAT", "vat")).(string)
	return res
}

// SetVAT is a setter for the value of the "VAT" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetVAT panics if the RecordSet is empty.
func (s PartnerSet) SetVAT(value string) {
	s.RecordCollection.Set(models.NewFieldName("VAT", "vat"), value)
}

// Website is a getter for the value of the "Website" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Website() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Website", "website")).(string)
	return res
}

// SetWebsite is a setter for the value of the "Website" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetWebsite panics if the RecordSet is empty.
func (s PartnerSet) SetWebsite(value string) {
	s.RecordCollection.Set(models.NewFieldName("Website", "website"), value)
}

// WriteDate is a getter for the value of the "WriteDate" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) WriteDate() dates.DateTime {
	res, _ := s.RecordCollection.Get(models.NewFieldName("WriteDate", "write_date")).(dates.DateTime)
	return res
}

// SetWriteDate is a setter for the value of the "WriteDate" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetWriteDate panics if the RecordSet is empty.
func (s PartnerSet) SetWriteDate(value dates.DateTime) {
	s.RecordCollection.Set(models.NewFieldName("WriteDate", "write_date"), value)
}

// WriteUID is a getter for the value of the "WriteUID" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) WriteUID() int64 {
	res, _ := s.RecordCollection.Get(models.NewFieldName("WriteUID", "write_uid")).(int64)
	return res
}

// SetWriteUID is a setter for the value of the "WriteUID" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetWriteUID panics if the RecordSet is empty.
func (s PartnerSet) SetWriteUID(value int64) {
	s.RecordCollection.Set(models.NewFieldName("WriteUID", "write_uid"), value)
}

// Zip is a getter for the value of the "Zip" field of the first
// record in this RecordSet. It returns the Go zero value if the RecordSet is empty.
func (s PartnerSet) Zip() string {
	res, _ := s.RecordCollection.Get(models.NewFieldName("Zip", "zip")).(string)
	return res
}

// SetZip is a setter for the value of the "Zip" field of this
// RecordSet. All Records of this RecordSet will be updated. Each call to this
// method makes an update query in the database.
//
// SetZip panics if the RecordSet is empty.
func (s PartnerSet) SetZip(value string) {
	s.RecordCollection.Set(models.NewFieldName("Zip", "zip"), value)
}

// Super returns a RecordSet with a modified callstack so that call to the current
// method will execute the next method layer.
//
// This method is meant to be used inside a method layer function to call its parent,
// such as:
//
//    func (rs h.MyRecordSet) MyMethod() string {
//        res := rs.Super().MyMethod()
//        res += " ok!"
//        return res
//    }
//
// Calls to a different method than the current method will call its next layer only
// if the current method has been called from a layer of the other method. Otherwise,
// it will be the same as calling the other method directly.
func (s PartnerSet) Super() m.PartnerSet {
	return s.RecordCollection.Super().Wrap("Partner").(m.PartnerSet)
}

// ModelData returns a new PartnerData object populated with the values
// of the given FieldMap.
func (s PartnerSet) ModelData(fMap models.FieldMap) m.PartnerData {
	res := &PartnerData{
		models.NewModelData(models.Registry.MustGet("Partner")),
	}
	for k, v := range fMap {
		res.Set(models.Registry.MustGet("Partner").FieldName(k), v)
	}
	return res
}

// ActionArchive sets Active=false on a recordset, by calling ToggleActive to take the
// corresponding actions according to the model
func (s PartnerSet) ActionArchive() {
	s.Collection().Call("ActionArchive")
}

// ActionUnarchive sets Active=true on a recordset, by calling ToggleActive to take the
// corresponding actions according to the model
func (s PartnerSet) ActionUnarchive() {
	s.Collection().Call("ActionUnarchive")
}

// AddDomainLimitOffset adds the given domain, limit, offset
// and order to the current RecordSet query.
func (s PartnerSet) AddDomainLimitOffset(domain domains.Domain, limit int, offset int, order string) m.PartnerSet {
	res := s.Collection().Call("AddDomainLimitOffset", domain, limit, offset, order)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// AddModifiers adds the modifiers attribute nodes to given xml doc.
func (s PartnerSet) AddModifiers(doc *etree.Document, fieldInfos map[string]*models.FieldInfo) {
	s.Collection().Call("AddModifiers", doc, fieldInfos)
}

// AddNameToRelations returns the given RecordData after getting the name of all 2one relation ids
func (s PartnerSet) AddNamesToRelations(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData {
	res := s.Collection().Call("AddNamesToRelations", data, fInfos)
	resTyped, _ := res.(models.RecordData)
	return resTyped
}

// AddressFields returns the list of fields which are part of the address.
// These are used to automate behaviours on contact addresses.
func (s PartnerSet) AddressFields() []models.FieldName {
	res := s.Collection().Call("AddressFields")
	resTyped, _ := res.([]models.FieldName)
	return resTyped
}

// AddressGet finds contacts/addresses of the right type(s) by doing a depth-first-search
// through descendants within company boundaries (stop at entities flagged 'IsCompany')
// then continuing the search at the ancestors that are within the same company boundaries.
// Defaults to partners of type 'default' when the exact type is not found, or to the
// provided partner itself if no type 'default' is found either.
//
// Result map keys are the contact types, such as 'contact', 'delivery', etc.`,
func (s PartnerSet) AddressGet(addrTypes []string) map[string]m.PartnerSet {
	res := s.Collection().Call("AddressGet", addrTypes)
	resTyped, _ := res.(map[string]m.PartnerSet)
	return resTyped
}

// Aggregates returns the result of this RecordSet query, which must by a grouped query.
func (s PartnerSet) Aggregates(fieldNames ...models.FieldName) []m.PartnerGroupAggregateRow {
	res := s.Collection().Call("Aggregates", fieldNames)
	resTyped, _ := res.([]m.PartnerGroupAggregateRow)
	return resTyped
}

// Browse returns a new RecordSet with only the records with the given ids.
// Note that this function is just a shorcut for Search on a list of ids.
func (s PartnerSet) Browse(ids []int64) m.PartnerSet {
	res := s.Collection().Call("Browse", ids)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// BrowseOne returns a new RecordSet with only the record with the given id.
// Note that this function is just a shorcut for Search on a given id.
func (s PartnerSet) BrowseOne(id int64) m.PartnerSet {
	res := s.Collection().Call("BrowseOne", id)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// CheckAccessRights verifies that the operation given by "operation" is allowed for
// the current user according to the access rights.
//
// operation must be one of "read", "create", "unlink", "write".
func (s PartnerSet) CheckAccessRights(args webtypes.CheckAccessRightsArgs) bool {
	res := s.Collection().Call("CheckAccessRights", args)
	resTyped, _ := res.(bool)
	return resTyped
}

// CheckExecutionPermission panics if the current user is not allowed to execute the given method.
//
// If dontPanic is false, this function will panic, otherwise it returns true
// if the user has the execution permission and false otherwise.
func (s PartnerSet) CheckExecutionPermission(method *models.Method, dontPanic ...bool) bool {
	res := s.Collection().Call("CheckExecutionPermission", method, dontPanic)
	resTyped, _ := res.(bool)
	return resTyped
}

// CheckParent checks for recursion in the partners parenthood
func (s PartnerSet) CheckParent() {
	s.Collection().Call("CheckParent")
}

// CheckRecursion verifies that there is no loop in a hierarchical structure of records,
// by following the parent relationship using the 'Parent' field until a loop is detected or
// until a top-level record is found.
//
// It returns true if no loop was found, false otherwise`,
func (s PartnerSet) CheckRecursion() bool {
	res := s.Collection().Call("CheckRecursion")
	resTyped, _ := res.(bool)
	return resTyped
}

// CleanWebsite returns a cleaned website url including scheme.
func (s PartnerSet) CleanWebsite(website string) string {
	res := s.Collection().Call("CleanWebsite", website)
	resTyped, _ := res.(string)
	return resTyped
}

// CommercialFields returns the list of fields that are managed by the commercial entity
// to which a partner belongs. These fields are meant to be hidden on
// partners that aren't "commercial entities"" themselves, and will be
// delegated to the parent "commercial entity"". The list is meant to be
// extended by inheriting classes.
func (s PartnerSet) CommercialFields() []models.FieldName {
	res := s.Collection().Call("CommercialFields")
	resTyped, _ := res.([]models.FieldName)
	return resTyped
}

// CommercialSyncFromCompany handle sync of commercial fields when a new parent commercial entity is set,
// as if they were related fields.
func (s PartnerSet) CommercialSyncFromCompany() bool {
	res := s.Collection().Call("CommercialSyncFromCompany")
	resTyped, _ := res.(bool)
	return resTyped
}

// CommercialSyncToChildren handle sync of commercial fields to descendants
func (s PartnerSet) CommercialSyncToChildren() bool {
	res := s.Collection().Call("CommercialSyncToChildren")
	resTyped, _ := res.(bool)
	return resTyped
}

// ComputeActiveLangCount returns the number of installed languages
func (s PartnerSet) ComputeActiveLangCount() m.PartnerData {
	res := s.Collection().Call("ComputeActiveLangCount")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeCommercialCompanyName returns the name of the commercial partner company
func (s PartnerSet) ComputeCommercialCompanyName() m.PartnerData {
	res := s.Collection().Call("ComputeCommercialCompanyName")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeCommercialPartner computes the commercial partner, which is the first company ancestor or the top
// ancestor if none are companies`,
func (s PartnerSet) ComputeCommercialPartner() m.PartnerData {
	res := s.Collection().Call("ComputeCommercialPartner")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeIsCompany computes the IsCompany field from the selected CompanyType
func (s PartnerSet) ComputeCompanyType() m.PartnerData {
	res := s.Collection().Call("ComputeCompanyType")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeContactAddress computes the contact's address according to the contact's country standards
func (s PartnerSet) ComputeContactAddress() m.PartnerData {
	res := s.Collection().Call("ComputeContactAddress")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeDisplayName updates the DisplayName field with the result of NameGet
func (s PartnerSet) ComputeDisplayName() *models.ModelData {
	res := s.Collection().Call("ComputeDisplayName")
	resTyped, _ := res.(*models.ModelData)
	return resTyped
}

// ComputeEmailFormatted returns a 'Name <email@domain>' formatted string
func (s PartnerSet) ComputeEmailFormatted() m.PartnerData {
	res := s.Collection().Call("ComputeEmailFormatted")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeImages computes and store resized images
func (s PartnerSet) ComputeImages() m.ImageMixinData {
	res := s.Collection().Call("ComputeImages")
	resTyped, _ := res.(m.ImageMixinData)
	return resTyped
}

// ComputeLastUpdate returns the last datetime at which the record has been updated.
func (s PartnerSet) ComputeLastUpdate() *models.ModelData {
	res := s.Collection().Call("ComputeLastUpdate")
	resTyped, _ := res.(*models.ModelData)
	return resTyped
}

// ComputePartnerShare computes the PartnerShare field
func (s PartnerSet) ComputePartnerShare() m.PartnerData {
	res := s.Collection().Call("ComputePartnerShare")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeSameVATPartner searches for a partner not linked to this one, but with the same VAT.
func (s PartnerSet) ComputeSameVATPartner() m.PartnerData {
	res := s.Collection().Call("ComputeSameVATPartner")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// ComputeTZOffset computes the timezone offset
func (s PartnerSet) ComputeTZOffset() m.PartnerData {
	res := s.Collection().Call("ComputeTZOffset")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// Copy duplicates the given Partner record, overridding values with overrides.
func (s PartnerSet) Copy(overrides m.PartnerData) m.PartnerSet {
	res := s.Collection().Call("Copy", overrides)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// CopyData copies given record's data with all its fields values, overriding values with overrides.
func (s PartnerSet) CopyData(overrides m.PartnerData) m.PartnerData {
	res := s.Collection().Call("CopyData", overrides)
	resTyped, _ := res.(models.RecordData)
	return resTyped.Underlying().Wrap().(m.PartnerData)
}

// Create inserts a Partner record in the database from the given data.
// Returns the created PartnerSet.
func (s PartnerSet) Create(data m.PartnerData) m.PartnerSet {
	res := s.Collection().Call("Create", data)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// CreateCompany creates the parent company of this partner if it has been given a CompanyName.
func (s PartnerSet) CreateCompany() bool {
	res := s.Collection().Call("CreateCompany")
	resTyped, _ := res.(bool)
	return resTyped
}

// DefaultGet returns a PartnerData with the default values for the model.
func (s PartnerSet) DefaultGet() m.PartnerData {
	res := s.Collection().Call("DefaultGet")
	resTyped, _ := res.(models.RecordData)
	return resTyped.Underlying().Wrap().(m.PartnerData)
}

// DisplayAddress builds and returns an address formatted accordingly to the
// standards of the country where it belongs.`,
func (s PartnerSet) DisplayAddress(withoutCompany bool) string {
	res := s.Collection().Call("DisplayAddress", withoutCompany)
	resTyped, _ := res.(string)
	return resTyped
}

// Enqueue queues the execution of the given method with the given arguments on this recordset.
// description will be the name given to the job.
func (s PartnerSet) Enqueue(description string, method models.Methoder, arguments ...interface{}) m.QueueJobSet {
	res := s.Collection().Call("Enqueue", description, method, arguments)
	resTyped, _ := res.(m.QueueJobSet)
	return resTyped
}

// Equals returns true if this RecordSet is the same as other
// i.e. they are of the same model and have the same ids
func (s PartnerSet) Equals(other m.PartnerSet) bool {
	res := s.Collection().Call("Equals", other)
	resTyped, _ := res.(bool)
	return resTyped
}

// ExecuteO2MActions executes the actions on one2many fields given by
// the list of triplets received from the client
func (s PartnerSet) ExecuteO2MActions(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{} {
	res := s.Collection().Call("ExecuteO2MActions", fieldName, info, value)
	resTyped, _ := res.(interface{})
	return resTyped
}

// Fetch query the database with the current filter and returns a RecordSet
// with the queries ids.
//
// Fetch is lazy and only return ids. Use Load() instead if you want to fetch all fields.
func (s PartnerSet) Fetch() m.PartnerSet {
	res := s.Collection().Call("Fetch")
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// FieldGet returns the definition of the given field.
// The string, help, and selection (if present) attributes are translated.
func (s PartnerSet) FieldGet(field models.FieldName) *models.FieldInfo {
	res := s.Collection().Call("FieldGet", field)
	resTyped, _ := res.(*models.FieldInfo)
	return resTyped
}

// FieldsGet returns the definition of each field.
// The embedded fields are included.
// The string, help, and selection (if present) attributes are translated.
//
// The result map is indexed by the fields JSON names.
func (s PartnerSet) FieldsGet(args models.FieldsGetArgs) map[string]*models.FieldInfo {
	res := s.Collection().Call("FieldsGet", args)
	resTyped, _ := res.(map[string]*models.FieldInfo)
	return resTyped
}

// FieldsSync syncs commercial fields and address fields from company and to children after create/update,
// just as if those were all modeled as fields.related to the parent
func (s PartnerSet) FieldsSync(vals m.PartnerData) {
	s.Collection().Call("FieldsSync", vals)
}

// FieldsViewGet is the base implementation of the 'FieldsViewGet' method which
// gets the detailed composition of the requested view like fields, mixin,
// view architecture.
func (s PartnerSet) FieldsViewGet(args webtypes.FieldsViewGetParams) *webtypes.FieldsViewData {
	res := s.Collection().Call("FieldsViewGet", args)
	resTyped, _ := res.(*webtypes.FieldsViewData)
	return resTyped
}

// FindOrCreate finds a partner with the given 'email' or creates one.
// The given string should contain at least one email,
// e.g. "Raoul Grosbedon <r.g@grosbedon.fr>"
func (s PartnerSet) FindOrCreate(email string) m.PartnerSet {
	res := s.Collection().Call("FindOrCreate", email)
	resTyped, _ := res.(m.PartnerSet)
	return resTyped
}

// FormatRelationFields returns the given data with all relation fields converted to int64 or []int64
func (s PartnerSet) FormatRelationFields(data models.RecordData, fInfos map[string]*models.FieldInfo) models.RecordData {
	res := s.Collection().Call("FormatRelationFields", data, fInfos)
	resTyped, _ := res.(models.RecordData)
	return resTyped
}

// GetDefaultImage returns a default image for the partner (base64 encoded)
func (s PartnerSet) GetDefaultImage(partnerType string, isCompany bool, Parent m.PartnerSet) string {
	res := s.Collection().Call("GetDefaultImage", partnerType, isCompany, Parent)
	resTyped, _ := res.(string)
	return resTyped
}

// GetFormviewAction returns an action to open the document.
// This method is meant to be overridden in addons that want
// to give specific view ids for example.`,
func (s PartnerSet) GetFormviewAction() *actions.Action {
	res := s.Collection().Call("GetFormviewAction")
	resTyped, _ := res.(*actions.Action)
	return resTyped
}

// GetFormviewID returns an view id to open the document with.
// This method is meant to be overridden in addons that want
// to give specific view ids for example.
func (s PartnerSet) GetFormviewId() string {
	res := s.Collection().Call("GetFormviewId")
	resTyped, _ := res.(string)
	return resTyped
}

// GetGravatarImage returns the image from Gravatar associated with the given email.
// Image is returned as a base64 encoded string.
func (s PartnerSet) GetGravatarImage(email string) string {
	res := s.Collection().Call("GetGravatarImage", email)
	resTyped, _ := res.(string)
	return resTyped
}

// GetRecord returns the Recordset with the given externalID. It panics if the externalID does not exist.
func (s PartnerSet) GetRecord(externalID string) m.PartnerSet {
	res := s.Collection().Call("GetRecord", externalID)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// GetToolbar returns a toolbar populated with the actions linked to this model
func (s PartnerSet) GetToolbar() webtypes.Toolbar {
	res := s.Collection().Call("GetToolbar")
	resTyped, _ := res.(webtypes.Toolbar)
	return resTyped
}

// GroupBy returns a new RecordSet grouped with the given GROUP BY expressions.
func (s PartnerSet) GroupBy(exprs ...models.FieldName) m.PartnerSet {
	res := s.Collection().Call("GroupBy", exprs)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// HandleFirsrtContactCreation: on creation of first contact for a company (or root) that has no address,
// assume contact address was meant to be company address
func (s PartnerSet) HandleFirsrtContactCreation() {
	s.Collection().Call("HandleFirsrtContactCreation")
}

// Intersect returns a new RecordCollection with only the records that are both
// in this RecordCollection and in the other RecordSet.
func (s PartnerSet) Intersect(other m.PartnerSet) m.PartnerSet {
	res := s.Collection().Call("Intersect", other)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// InverseCompanyType sets the IsCompany field according to the given CompanyType
func (s PartnerSet) InverseCompanyType(companyType string) {
	s.Collection().Call("InverseCompanyType", companyType)
}

// Limit returns a new RecordSet with only the first 'limit' records.
func (s PartnerSet) Limit(limit int) m.PartnerSet {
	res := s.Collection().Call("Limit", limit)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// Load looks up cache for fields of the RecordCollection and
// query database for missing values.
// fields are the fields to retrieve in the expression format,
// i.e. "User.Profile.Age" or "user_id.profile_id.age".
// If no fields are given, all DB columns of the RecordCollection's
// model are retrieved.
func (s PartnerSet) Load(fields ...models.FieldName) m.PartnerSet {
	res := s.Collection().Call("Load", fields)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// LoadViews returns the data for all the views and filters required in the parameters.
func (s PartnerSet) LoadViews(args webtypes.LoadViewsArgs) *webtypes.LoadViewsData {
	res := s.Collection().Call("LoadViews", args)
	resTyped, _ := res.(*webtypes.LoadViewsData)
	return resTyped
}

// ManageGroupsOnFields adds the invisible attribute to fields nodes if the current
// user does not belong to one of the groups of the 'groups' attribute
func (s PartnerSet) ManageGroupsOnFields(doc *etree.Document, fieldInfos map[string]*models.FieldInfo) {
	s.Collection().Call("ManageGroupsOnFields", doc, fieldInfos)
}

// NameCreate creates a partner from a single string which may be a name and/or an email.
//
// If only an email address is received and that the regex cannot find
// a name, the name will have the email value.
// If 'force_email' key in context: must find the email address.
func (s PartnerSet) NameCreate(name string) m.PartnerSet {
	res := s.Collection().Call("NameCreate", name)
	resTyped, _ := res.(m.PartnerSet)
	return resTyped
}

// NameGet retrieves the human readable name of this record.`,
func (s PartnerSet) NameGet() string {
	res := s.Collection().Call("NameGet")
	resTyped, _ := res.(string)
	return resTyped
}

// NameSearch searches for records that have a display name matching the given
// "name" pattern when compared with the given "operator", while also
// matching the optional search domain ("args").
//
// This is used for example to provide suggestions based on a partial
// value for a relational field. Sometimes be seen as the inverse
// function of NameGet but it is not guaranteed to be.
func (s PartnerSet) NameSearch(params webtypes.NameSearchParams) []webtypes.RecordIDWithName {
	res := s.Collection().Call("NameSearch", params)
	resTyped, _ := res.([]webtypes.RecordIDWithName)
	return resTyped
}

// New creates a Partner record in memory from the given data.
// Such PartnerSet has a negative ID and cannot be reloaded from the database
func (s PartnerSet) New(data m.PartnerData) m.PartnerSet {
	res := s.Collection().Call("New", data)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// NormalizeM2MData converts the list of triplets received from the client into the final list of ids
// to keep in the Many2Many relationship of this model through the given field.
func (s PartnerSet) NormalizeM2MData(fieldName models.FieldName, info *models.FieldInfo, value interface{}) interface{} {
	res := s.Collection().Call("NormalizeM2MData", fieldName, info, value)
	resTyped, _ := res.(interface{})
	return resTyped
}

// Offset returns a new RecordSet with only the records starting at offset
func (s PartnerSet) Offset(offset int) m.PartnerSet {
	res := s.Collection().Call("Offset", offset)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// Onchange returns the values that must be modified according to each field's Onchange
// method in the pseudo-record given as params.Values`,
func (s PartnerSet) Onchange(params models.OnchangeParams) models.OnchangeResult {
	res := s.Collection().Call("Onchange", params)
	resTyped, _ := res.(models.OnchangeResult)
	return resTyped
}

// OnchangeCompanyType updates the IsCompany field according to the selected type
func (s PartnerSet) OnchangeCompanyType() m.PartnerData {
	res := s.Collection().Call("OnchangeCompanyType")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// OnchangeCountryFilters sets the filters on state when country is modified
func (s PartnerSet) OnchangeCountryFilters() map[models.FieldName]models.Conditioner {
	res := s.Collection().Call("OnchangeCountryFilters")
	resTyped, _ := res.(map[models.FieldName]models.Conditioner)
	return resTyped
}

// OnchangeEmail updates the user Gravatar image
func (s PartnerSet) OnchangeEmail() m.PartnerData {
	res := s.Collection().Call("OnchangeEmail")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// OnchangeParent updates the current partner data when its parent field
// is modified, in particular copies its parent's address.
func (s PartnerSet) OnchangeParent() m.PartnerData {
	res := s.Collection().Call("OnchangeParent")
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// OnchangeParentWarning issues a warning when trying to change a contact to another parent company
func (s PartnerSet) OnchangeParentWarning() string {
	res := s.Collection().Call("OnchangeParentWarning")
	resTyped, _ := res.(string)
	return resTyped
}

// OpenCommercialEntity is a utility method used to add an "Open Company" button in partner views
func (s PartnerSet) OpenCommercialEntity() *actions.Action {
	res := s.Collection().Call("OpenCommercialEntity")
	resTyped, _ := res.(*actions.Action)
	return resTyped
}

// OpenParent is a utility method used to add an "Open Parent" button in partner views
func (s PartnerSet) OpenParent() *actions.Action {
	res := s.Collection().Call("OpenParent")
	resTyped, _ := res.(*actions.Action)
	return resTyped
}

// OrderBy returns a new RecordSet ordered by the given ORDER BY expressions.
// Each expression contains a field name and optionally one of "asc" or "desc", such as:
//
// rs.OrderBy("Company", "Name desc")
func (s PartnerSet) OrderBy(exprs ...string) m.PartnerSet {
	res := s.Collection().Call("OrderBy", exprs)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// ParsePartnerName parses an email address to get the partner's name.
// It returns the name as first argument and the email as the second.
//
// Supported syntax:
// - 'Raoul <raoul@grosbedon.fr>': will find name and email address
// - otherwise: default, everything is set as the name (email is returned empty)
func (s PartnerSet) ParsePartnerName(email string) (string, string) {
	res := s.Collection().CallMulti("ParsePartnerName", email)
	resTyped0, _ := res[0].(string)
	resTyped1, _ := res[1].(string)
	return resTyped0, resTyped1
}

// PostProcessCreateValues updates FK of related records created at the same time.
//
// This method is meant to be called with the second returned value of ProcessCreateValues
// after record creation.
func (s PartnerSet) PostProcessCreateValues(data models.RecordData) {
	s.Collection().Call("PostProcessCreateValues", data)
}

// PostProcessFilters transforms a map[models.FieldName]models.Conditioner
// in a map[string][]interface{} which acts as a map of domains.
func (s PartnerSet) PostProcessFilters(in map[models.FieldName]models.Conditioner) map[string][]interface{} {
	res := s.Collection().Call("PostProcessFilters", in)
	resTyped, _ := res.(map[string][]interface{})
	return resTyped
}

// ProcessCreateValues updates the given data values for Create method to be
// compatible with the ORM, in particular for relation fields.
//
// It returns a first FieldMap to be used as argument to the Create method, and
// a second map to be used with a subsequent call to PostProcessCreateValues (for
// updating FKs pointing to the newly created record).
func (s PartnerSet) ProcessCreateValues(data models.RecordData) (models.RecordData, models.RecordData) {
	res := s.Collection().CallMulti("ProcessCreateValues", data)
	resTyped0, _ := res[0].(models.RecordData)
	resTyped1, _ := res[1].(models.RecordData)
	return resTyped0, resTyped1
}

// ProcessElementAttrs returns a modifiers map according to the domain
// in attrs of the given element
func (s PartnerSet) ProcessElementAttrs(element *etree.Element, fieldInfos map[string]*models.FieldInfo) map[string]interface{} {
	res := s.Collection().Call("ProcessElementAttrs", element, fieldInfos)
	resTyped, _ := res.(map[string]interface{})
	return resTyped
}

// ProcessFieldElementModifiers modifies the given modifiers map by taking into account:
// - 'invisible', 'readonly' and 'required' attributes in field tags
// - 'ReadOnly' and 'Required' parameters of the model's field'
// It returns the modified map.
func (s PartnerSet) ProcessFieldElementModifiers(element *etree.Element, fieldInfos map[string]*models.FieldInfo, modifiers map[string]interface{}) map[string]interface{} {
	res := s.Collection().Call("ProcessFieldElementModifiers", element, fieldInfos, modifiers)
	resTyped, _ := res.(map[string]interface{})
	return resTyped
}

// ProcessView makes all the necessary modifications to the view
// arch and returns the new xml string.`,
func (s PartnerSet) ProcessView(arch *etree.Document, fieldInfos map[string]*models.FieldInfo) string {
	res := s.Collection().Call("ProcessView", arch, fieldInfos)
	resTyped, _ := res.(string)
	return resTyped
}

// ProcessWriteValues updates the given data values for Write method to be
// compatible with the ORM, in particular for relation fields
func (s PartnerSet) ProcessWriteValues(data models.RecordData) models.RecordData {
	res := s.Collection().Call("ProcessWriteValues", data)
	resTyped, _ := res.(models.RecordData)
	return resTyped
}

// Read reads the database and returns a slice of FieldMap of the given model.
func (s PartnerSet) Read(fields models.FieldNames) []models.RecordData {
	res := s.Collection().Call("Read", fields)
	resTyped, _ := res.([]models.RecordData)
	return resTyped
}

// ReadGroup gets a list of record aggregates according to the given parameters.
func (s PartnerSet) ReadGroup(params webtypes.ReadGroupParams) []models.FieldMap {
	res := s.Collection().Call("ReadGroup", params)
	resTyped, _ := res.([]models.FieldMap)
	return resTyped
}

// SQLFromCondition returns the WHERE clause sql and arguments corresponding to
// the given condition.`,
func (s PartnerSet) SQLFromCondition(c *models.Condition) (string, models.SQLParams) {
	res := s.Collection().CallMulti("SQLFromCondition", c)
	resTyped0, _ := res[0].(string)
	resTyped1, _ := res[1].(models.SQLParams)
	return resTyped0, resTyped1
}

// Search returns a new PartnerSet filtering on the current one with the additional given Condition
func (s PartnerSet) Search(condition q.PartnerCondition) m.PartnerSet {
	res := s.Collection().Call("Search", condition)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// SearchAll returns a RecordSet with all items of the table, regardless of the
// current RecordSet query. It is mainly meant to be used on an empty RecordSet.
func (s PartnerSet) SearchAll() m.PartnerSet {
	res := s.Collection().Call("SearchAll")
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// SearchByName searches for Partner records that have a display name matching the given
// "name" pattern when compared with the given "op" operator, while also
// matching the optional search condition ("additionalCond").
//
// This is used for example to provide suggestions based on a partial
// value for a relational field. Sometimes be seen as the inverse
// function of NameGet but it is not guaranteed to be.
func (s PartnerSet) SearchByName(name string, op operator.Operator, additionalCond q.PartnerCondition, limit int) m.PartnerSet {
	res := s.Collection().Call("SearchByName", name, op, additionalCond, limit)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// SearchCount fetch from the database the number of records that match the RecordSet conditions.
func (s PartnerSet) SearchCount() int {
	res := s.Collection().Call("SearchCount")
	resTyped, _ := res.(int)
	return resTyped
}

// SearchDomain execute a search on the given domain.
func (s PartnerSet) SearchDomain(domain domains.Domain) m.CommonMixinSet {
	res := s.Collection().Call("SearchDomain", domain)
	resTyped, _ := res.(m.CommonMixinSet)
	return resTyped
}

// SearchRead retrieves database records according to the filters defined in params.
func (s PartnerSet) SearchRead(params webtypes.SearchParams) []models.RecordData {
	res := s.Collection().Call("SearchRead", params)
	resTyped, _ := res.([]models.RecordData)
	return resTyped
}

// SortedByField returns a new record set with the same records as rc but sorted by the given field.
// If reverse is true, the sort is done in reversed order
func (s PartnerSet) SortedByField(namer models.FieldName, reverse bool) m.PartnerSet {
	res := s.Collection().Call("SortedByField", namer, reverse)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// SortedDefault returns a new record set with the same records as rc but sorted according
// to the default order of this model
func (s PartnerSet) SortedDefault() m.PartnerSet {
	res := s.Collection().Call("SortedDefault")
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// Subtract returns a RecordSet with the Records that are in this
// RecordCollection but not in the given 'other' one.
// The result is guaranteed to be a set of unique records.
func (s PartnerSet) Subtract(other m.PartnerSet) m.PartnerSet {
	res := s.Collection().Call("Subtract", other)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// Sudo returns a new RecordSet with the given userID
// or the superuser ID if not specified
func (s PartnerSet) Sudo(userID ...int64) m.PartnerSet {
	res := s.Collection().Call("Sudo", userID)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// ToggleActive toggles the Active field of this object if it exists.
func (s PartnerSet) ToggleActive() {
	s.Collection().Call("ToggleActive")
}

// Union returns a new RecordSet that is the union of this RecordSet and the given
// "other" RecordSet. The result is guaranteed to be a set of unique records.
func (s PartnerSet) Union(other m.PartnerSet) m.PartnerSet {
	res := s.Collection().Call("Union", other)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// Unlink deletes the given records in the database.
func (s PartnerSet) Unlink() int64 {
	res := s.Collection().Call("Unlink")
	resTyped, _ := res.(int64)
	return resTyped
}

// UpdateAddress updates this PartnerSet only with the address fields of
// the given vals. Other values passed are discarded.
func (s PartnerSet) UpdateAddress(vals m.PartnerData) bool {
	res := s.Collection().Call("UpdateAddress", vals)
	resTyped, _ := res.(bool)
	return resTyped
}

// UpdateFieldValues returns a PartnerData struct with its values set to
// this partner's values on the given fields. The other fields are left to their
// Go default value. This method is used to update fields from a partner to its
// relatives.`,
func (s PartnerSet) UpdateFieldValues(fields ...models.FieldName) m.PartnerData {
	res := s.Collection().Call("UpdateFieldValues", fields)
	resTyped, _ := res.(m.PartnerData)
	return resTyped
}

// WebReadGroup returns the result of a read_group (and optionally search for and read records inside each
// group), and the total number of groups matching the search domain.
func (s PartnerSet) WebReadGroup(params webtypes.WebReadGroupParams) webtypes.WebReadGroupResult {
	res := s.Collection().Call("WebReadGroup", params)
	resTyped, _ := res.(webtypes.WebReadGroupResult)
	return resTyped
}

// WebReadGroupPrivate performs a read_group and optionally a web_search_read for each group.
func (s PartnerSet) WebReadGroupPrivate(params webtypes.WebReadGroupParams) []models.FieldMap {
	res := s.Collection().Call("WebReadGroupPrivate", params)
	resTyped, _ := res.([]models.FieldMap)
	return resTyped
}

// WebSearchRead performs a search_read and a search_count.
func (s PartnerSet) WebSearchRead(params webtypes.SearchParams) webtypes.SearchReadResult {
	res := s.Collection().Call("WebSearchRead", params)
	resTyped, _ := res.(webtypes.SearchReadResult)
	return resTyped
}

// WithContext returns a copy of the current RecordSet with
// its context extended by the given key and value.
func (s PartnerSet) WithContext(key string, value interface{}) m.PartnerSet {
	res := s.Collection().Call("WithContext", key, value)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// WithEnv returns a copy of the current RecordSet with the given Environment.
func (s PartnerSet) WithEnv(env models.Environment) m.PartnerSet {
	res := s.Collection().Call("WithEnv", env)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// WithNewContext returns a copy of the current RecordSet with its context
// replaced by the given one.
func (s PartnerSet) WithNewContext(context *types.Context) m.PartnerSet {
	res := s.Collection().Call("WithNewContext", context)
	resTyped := res.(models.RecordSet).Collection().Wrap("Partner").(m.PartnerSet)
	return resTyped
}

// Write is the base implementation of the 'Write' method which updates
// Partner records in the database with the given data.
func (s PartnerSet) Write(data m.PartnerData) bool {
	res := s.Collection().Call("Write", data)
	resTyped, _ := res.(bool)
	return resTyped
}

// Aggregates returns the result of this RecordSet query, which must by a grouped query.
func m_Partner_Aggregates(rs PartnerSet, fieldNames ...models.FieldName) []m.PartnerGroupAggregateRow {
	lines := rs.RecordCollection.Aggregates(fieldNames...)
	res := make([]m.PartnerGroupAggregateRow, len(lines))
	for i, l := range lines {
		res[i] = PartnerGroupAggregateRow{
			values: l.Values.Wrap().(m.PartnerData),
			count:  l.Count,
			condition: q.PartnerCondition{
				Condition: l.Condition,
			},
		}
	}
	return res
}

func init() {
	models.CreateModel("Partner", 0)
	models.Registry.MustGet("Partner").AddFields(map[string]models.FieldDefinition{
		"CreateDate":      models.DummyField{},
		"CreateUID":       models.DummyField{},
		"DisplayName":     models.DummyField{},
		"HexyaExternalID": models.DummyField{},
		"HexyaVersion":    models.DummyField{},
		"Image1024":       models.DummyField{},
		"Image128":        models.DummyField{},
		"Image1920":       models.DummyField{},
		"Image256":        models.DummyField{},
		"Image512":        models.DummyField{},
		"LastUpdate":      models.DummyField{},
		"WriteDate":       models.DummyField{},
		"WriteUID":        models.DummyField{},
	})
	models.Registry.MustGet("Partner").AddEmptyMethod("ActionArchive")
	models.Registry.MustGet("Partner").AddEmptyMethod("ActionUnarchive")
	models.Registry.MustGet("Partner").AddEmptyMethod("AddDomainLimitOffset")
	models.Registry.MustGet("Partner").AddEmptyMethod("AddModifiers")
	models.Registry.MustGet("Partner").AddEmptyMethod("AddNamesToRelations")
	models.Registry.MustGet("Partner").AddEmptyMethod("AddressFields")
	models.Registry.MustGet("Partner").AddEmptyMethod("AddressGet")
	models.Registry.MustGet("Partner").AddEmptyMethod("Browse")
	models.Registry.MustGet("Partner").AddEmptyMethod("BrowseOne")
	models.Registry.MustGet("Partner").AddEmptyMethod("CheckAccessRights")
	models.Registry.MustGet("Partner").AddEmptyMethod("CheckExecutionPermission")
	models.Registry.MustGet("Partner").AddEmptyMethod("CheckParent")
	models.Registry.MustGet("Partner").AddEmptyMethod("CheckRecursion")
	models.Registry.MustGet("Partner").AddEmptyMethod("CleanWebsite")
	models.Registry.MustGet("Partner").AddEmptyMethod("CommercialFields")
	models.Registry.MustGet("Partner").AddEmptyMethod("CommercialSyncFromCompany")
	models.Registry.MustGet("Partner").AddEmptyMethod("CommercialSyncToChildren")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeActiveLangCount")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeCommercialCompanyName")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeCommercialPartner")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeCompanyType")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeContactAddress")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeDisplayName")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeEmailFormatted")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeImages")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeLastUpdate")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputePartnerShare")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeSameVATPartner")
	models.Registry.MustGet("Partner").AddEmptyMethod("ComputeTZOffset")
	models.Registry.MustGet("Partner").AddEmptyMethod("Copy")
	models.Registry.MustGet("Partner").AddEmptyMethod("CopyData")
	models.Registry.MustGet("Partner").AddEmptyMethod("Create")
	models.Registry.MustGet("Partner").AddEmptyMethod("CreateCompany")
	models.Registry.MustGet("Partner").AddEmptyMethod("DefaultGet")
	models.Registry.MustGet("Partner").AddEmptyMethod("DisplayAddress")
	models.Registry.MustGet("Partner").AddEmptyMethod("Enqueue")
	models.Registry.MustGet("Partner").AddEmptyMethod("Equals")
	models.Registry.MustGet("Partner").AddEmptyMethod("ExecuteO2MActions")
	models.Registry.MustGet("Partner").AddEmptyMethod("Fetch")
	models.Registry.MustGet("Partner").AddEmptyMethod("FieldGet")
	models.Registry.MustGet("Partner").AddEmptyMethod("FieldsGet")
	models.Registry.MustGet("Partner").AddEmptyMethod("FieldsSync")
	models.Registry.MustGet("Partner").AddEmptyMethod("FieldsViewGet")
	models.Registry.MustGet("Partner").AddEmptyMethod("FindOrCreate")
	models.Registry.MustGet("Partner").AddEmptyMethod("FormatRelationFields")
	models.Registry.MustGet("Partner").AddEmptyMethod("GetDefaultImage")
	models.Registry.MustGet("Partner").AddEmptyMethod("GetFormviewAction")
	models.Registry.MustGet("Partner").AddEmptyMethod("GetFormviewId")
	models.Registry.MustGet("Partner").AddEmptyMethod("GetGravatarImage")
	models.Registry.MustGet("Partner").AddEmptyMethod("GetRecord")
	models.Registry.MustGet("Partner").AddEmptyMethod("GetToolbar")
	models.Registry.MustGet("Partner").AddEmptyMethod("GroupBy")
	models.Registry.MustGet("Partner").AddEmptyMethod("HandleFirsrtContactCreation")
	models.Registry.MustGet("Partner").AddEmptyMethod("Intersect")
	models.Registry.MustGet("Partner").AddEmptyMethod("InverseCompanyType")
	models.Registry.MustGet("Partner").AddEmptyMethod("Limit")
	models.Registry.MustGet("Partner").AddEmptyMethod("Load")
	models.Registry.MustGet("Partner").AddEmptyMethod("LoadViews")
	models.Registry.MustGet("Partner").AddEmptyMethod("ManageGroupsOnFields")
	models.Registry.MustGet("Partner").AddEmptyMethod("NameCreate")
	models.Registry.MustGet("Partner").AddEmptyMethod("NameGet")
	models.Registry.MustGet("Partner").AddEmptyMethod("NameSearch")
	models.Registry.MustGet("Partner").AddEmptyMethod("New")
	models.Registry.MustGet("Partner").AddEmptyMethod("NormalizeM2MData")
	models.Registry.MustGet("Partner").AddEmptyMethod("Offset")
	models.Registry.MustGet("Partner").AddEmptyMethod("Onchange")
	models.Registry.MustGet("Partner").AddEmptyMethod("OnchangeCompanyType")
	models.Registry.MustGet("Partner").AddEmptyMethod("OnchangeCountryFilters")
	models.Registry.MustGet("Partner").AddEmptyMethod("OnchangeEmail")
	models.Registry.MustGet("Partner").AddEmptyMethod("OnchangeParent")
	models.Registry.MustGet("Partner").AddEmptyMethod("OnchangeParentWarning")
	models.Registry.MustGet("Partner").AddEmptyMethod("OpenCommercialEntity")
	models.Registry.MustGet("Partner").AddEmptyMethod("OpenParent")
	models.Registry.MustGet("Partner").AddEmptyMethod("OrderBy")
	models.Registry.MustGet("Partner").AddEmptyMethod("ParsePartnerName")
	models.Registry.MustGet("Partner").AddEmptyMethod("PostProcessCreateValues")
	models.Registry.MustGet("Partner").AddEmptyMethod("PostProcessFilters")
	models.Registry.MustGet("Partner").AddEmptyMethod("ProcessCreateValues")
	models.Registry.MustGet("Partner").AddEmptyMethod("ProcessElementAttrs")
	models.Registry.MustGet("Partner").AddEmptyMethod("ProcessFieldElementModifiers")
	models.Registry.MustGet("Partner").AddEmptyMethod("ProcessView")
	models.Registry.MustGet("Partner").AddEmptyMethod("ProcessWriteValues")
	models.Registry.MustGet("Partner").AddEmptyMethod("Read")
	models.Registry.MustGet("Partner").AddEmptyMethod("ReadGroup")
	models.Registry.MustGet("Partner").AddEmptyMethod("SQLFromCondition")
	models.Registry.MustGet("Partner").AddEmptyMethod("Search")
	models.Registry.MustGet("Partner").AddEmptyMethod("SearchAll")
	models.Registry.MustGet("Partner").AddEmptyMethod("SearchByName")
	models.Registry.MustGet("Partner").AddEmptyMethod("SearchCount")
	models.Registry.MustGet("Partner").AddEmptyMethod("SearchDomain")
	models.Registry.MustGet("Partner").AddEmptyMethod("SearchRead")
	models.Registry.MustGet("Partner").AddEmptyMethod("SortedByField")
	models.Registry.MustGet("Partner").AddEmptyMethod("SortedDefault")
	models.Registry.MustGet("Partner").AddEmptyMethod("Subtract")
	models.Registry.MustGet("Partner").AddEmptyMethod("Sudo")
	models.Registry.MustGet("Partner").AddEmptyMethod("ToggleActive")
	models.Registry.MustGet("Partner").AddEmptyMethod("Union")
	models.Registry.MustGet("Partner").AddEmptyMethod("Unlink")
	models.Registry.MustGet("Partner").AddEmptyMethod("UpdateAddress")
	models.Registry.MustGet("Partner").AddEmptyMethod("UpdateFieldValues")
	models.Registry.MustGet("Partner").AddEmptyMethod("WebReadGroup")
	models.Registry.MustGet("Partner").AddEmptyMethod("WebReadGroupPrivate")
	models.Registry.MustGet("Partner").AddEmptyMethod("WebSearchRead")
	models.Registry.MustGet("Partner").AddEmptyMethod("WithContext")
	models.Registry.MustGet("Partner").AddEmptyMethod("WithEnv")
	models.Registry.MustGet("Partner").AddEmptyMethod("WithNewContext")
	models.Registry.MustGet("Partner").AddEmptyMethod("Write")
	models.Registry.MustGet("Partner").NewMethod("Aggregates", m_Partner_Aggregates)
	models.RegisterRecordSetWrapper("Partner", PartnerSet{})
	models.RegisterModelDataWrapper("Partner", PartnerData{})
}
