// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package partner

import (
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types/dates"
)

// ------- INTERFACES --------

type BankAccountCondition interface {
	models.Conditioner
	BankAccountConditionHexyaFunc()
}

type BankAccountSet interface {
	models.RecordSet
	BankAccountSetHexyaFunc()
}

type CompanyCondition interface {
	models.Conditioner
	CompanyConditionHexyaFunc()
}

type CompanySet interface {
	models.RecordSet
	CompanySetHexyaFunc()
}

type CountryCondition interface {
	models.Conditioner
	CountryConditionHexyaFunc()
}

type CountrySet interface {
	models.RecordSet
	CountrySetHexyaFunc()
}

type CountryStateCondition interface {
	models.Conditioner
	CountryStateConditionHexyaFunc()
}

type CountryStateSet interface {
	models.RecordSet
	CountryStateSetHexyaFunc()
}

type PartnerCondition interface {
	models.Conditioner
	PartnerConditionHexyaFunc()
}

type PartnerSet interface {
	models.RecordSet
	PartnerSetHexyaFunc()
}

type PartnerCategoryCondition interface {
	models.Conditioner
	PartnerCategoryConditionHexyaFunc()
}

type PartnerCategorySet interface {
	models.RecordSet
	PartnerCategorySetHexyaFunc()
}

type PartnerIndustryCondition interface {
	models.Conditioner
	PartnerIndustryConditionHexyaFunc()
}

type PartnerIndustrySet interface {
	models.RecordSet
	PartnerIndustrySetHexyaFunc()
}

type PartnerTitleCondition interface {
	models.Conditioner
	PartnerTitleConditionHexyaFunc()
}

type PartnerTitleSet interface {
	models.RecordSet
	PartnerTitleSetHexyaFunc()
}

type UserCondition interface {
	models.Conditioner
	UserConditionHexyaFunc()
}

type UserSet interface {
	models.RecordSet
	UserSetHexyaFunc()
}

// ------- CONDITION ---------

// A Condition is a type safe WHERE clause in an SQL query
type Condition struct {
	*models.Condition
}

// And completes the current condition with a simple And clause : c.And().nextCond => c And nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) And() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.And(),
	}
}

// AndCond completes the current condition with the given cond as an And clause
// between brackets : c.And(cond) => c And (cond)
func (c Condition) AndCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.AndCond(cond.Condition),
	}
}

// AndNot completes the current condition with a simple AndNot clause : c.AndNot().nextCond => c AndNot nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) AndNot() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.AndNot(),
	}
}

// AndNotCond completes the current condition with the given cond as an AndNot clause
// between brackets : c.AndNot(cond) => c AndNot (cond)
func (c Condition) AndNotCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.AndNotCond(cond.Condition),
	}
}

// Or completes the current condition with a simple Or clause : c.Or().nextCond => c Or nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) Or() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.Or(),
	}
}

// OrCond completes the current condition with the given cond as an Or clause
// between brackets : c.Or(cond) => c Or (cond)
func (c Condition) OrCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.OrCond(cond.Condition),
	}
}

// OrNot completes the current condition with a simple OrNot clause : c.OrNot().nextCond => c OrNot nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) OrNot() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.OrNot(),
	}
}

// OrNotCond completes the current condition with the given cond as an OrNot clause
// between brackets : c.OrNot(cond) => c OrNot (cond)
func (c Condition) OrNotCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.OrNotCond(cond.Condition),
	}
}

// Underlying returns the underlying models.Condition instance
func (c Condition) Underlying() *models.Condition {
	return c.Condition
}

// PartnerConditionHexyaFunc is a dummy function to uniquely match interfaces.
func (c Condition) PartnerConditionHexyaFunc() {}

var _ models.Conditioner = Condition{}

// ------- CONDITION START ---------

// A ConditionStart is an object representing a Condition when
// we just added a logical operator (AND, OR, ...) and we are
// about to add a predicate.
type ConditionStart struct {
	*models.ConditionStart
}

// NewCondition returns a valid empty Condition
func (cs ConditionStart) NewCondition() Condition {
	return Condition{
		Condition: &models.Condition{},
	}
}

// Active adds the "Active" field to the Condition
func (cs ConditionStart) Active() pBoolConditionField {
	return pBoolConditionField{
		ConditionField: cs.Field(models.NewFieldName("Active", "active")),
	}
}

// ActiveLangCount adds the "ActiveLangCount" field to the Condition
func (cs ConditionStart) ActiveLangCount() pIntConditionField {
	return pIntConditionField{
		ConditionField: cs.Field(models.NewFieldName("ActiveLangCount", "active_lang_count")),
	}
}

// Banks adds the "Banks" field to the Condition
func (cs ConditionStart) Banks() pMBankAccountSetConditionField {
	return pMBankAccountSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Banks", "banks_ids")),
	}
}

// BanksFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) BanksFilteredOn(cond BankAccountCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Banks", "banks_ids"), cond.Underlying()),
	}
}

// Barcode adds the "Barcode" field to the Condition
func (cs ConditionStart) Barcode() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Barcode", "barcode")),
	}
}

// Categories adds the "Categories" field to the Condition
func (cs ConditionStart) Categories() pMPartnerCategorySetConditionField {
	return pMPartnerCategorySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Categories", "category_ids")),
	}
}

// CategoriesFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) CategoriesFilteredOn(cond PartnerCategoryCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Categories", "category_ids"), cond.Underlying()),
	}
}

// Children adds the "Children" field to the Condition
func (cs ConditionStart) Children() pMPartnerSetConditionField {
	return pMPartnerSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Children", "children_ids")),
	}
}

// ChildrenFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) ChildrenFilteredOn(cond PartnerCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Children", "children_ids"), cond.Underlying()),
	}
}

// City adds the "City" field to the Condition
func (cs ConditionStart) City() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("City", "city")),
	}
}

// Color adds the "Color" field to the Condition
func (cs ConditionStart) Color() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("Color", "color")),
	}
}

// Comment adds the "Comment" field to the Condition
func (cs ConditionStart) Comment() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Comment", "comment")),
	}
}

// CommercialCompanyName adds the "CommercialCompanyName" field to the Condition
func (cs ConditionStart) CommercialCompanyName() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("CommercialCompanyName", "commercial_company_name")),
	}
}

// CommercialPartner adds the "CommercialPartner" field to the Condition
func (cs ConditionStart) CommercialPartner() pMPartnerSetConditionField {
	return pMPartnerSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("CommercialPartner", "commercial_partner_id")),
	}
}

// CommercialPartnerFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) CommercialPartnerFilteredOn(cond PartnerCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("CommercialPartner", "commercial_partner_id"), cond.Underlying()),
	}
}

// Company adds the "Company" field to the Condition
func (cs ConditionStart) Company() pMCompanySetConditionField {
	return pMCompanySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Company", "company_id")),
	}
}

// CompanyFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) CompanyFilteredOn(cond CompanyCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Company", "company_id"), cond.Underlying()),
	}
}

// CompanyName adds the "CompanyName" field to the Condition
func (cs ConditionStart) CompanyName() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("CompanyName", "company_name")),
	}
}

// CompanyType adds the "CompanyType" field to the Condition
func (cs ConditionStart) CompanyType() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("CompanyType", "company_type")),
	}
}

// ContactAddress adds the "ContactAddress" field to the Condition
func (cs ConditionStart) ContactAddress() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("ContactAddress", "contact_address")),
	}
}

// Country adds the "Country" field to the Condition
func (cs ConditionStart) Country() pMCountrySetConditionField {
	return pMCountrySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Country", "country_id")),
	}
}

// CountryFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) CountryFilteredOn(cond CountryCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Country", "country_id"), cond.Underlying()),
	}
}

// CreateDate adds the "CreateDate" field to the Condition
func (cs ConditionStart) CreateDate() pDatesDateTimeConditionField {
	return pDatesDateTimeConditionField{
		ConditionField: cs.Field(models.NewFieldName("CreateDate", "create_date")),
	}
}

// CreateUID adds the "CreateUID" field to the Condition
func (cs ConditionStart) CreateUID() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("CreateUID", "create_uid")),
	}
}

// CreditLimit adds the "CreditLimit" field to the Condition
func (cs ConditionStart) CreditLimit() pFloat64ConditionField {
	return pFloat64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("CreditLimit", "credit_limit")),
	}
}

// Date adds the "Date" field to the Condition
func (cs ConditionStart) Date() pDatesDateConditionField {
	return pDatesDateConditionField{
		ConditionField: cs.Field(models.NewFieldName("Date", "date")),
	}
}

// DisplayName adds the "DisplayName" field to the Condition
func (cs ConditionStart) DisplayName() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("DisplayName", "display_name")),
	}
}

// Email adds the "Email" field to the Condition
func (cs ConditionStart) Email() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Email", "email")),
	}
}

// EmailFormatted adds the "EmailFormatted" field to the Condition
func (cs ConditionStart) EmailFormatted() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("EmailFormatted", "email_formatted")),
	}
}

// Employee adds the "Employee" field to the Condition
func (cs ConditionStart) Employee() pBoolConditionField {
	return pBoolConditionField{
		ConditionField: cs.Field(models.NewFieldName("Employee", "employee")),
	}
}

// Function adds the "Function" field to the Condition
func (cs ConditionStart) Function() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Function", "function")),
	}
}

// HexyaExternalID adds the "HexyaExternalID" field to the Condition
func (cs ConditionStart) HexyaExternalID() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("HexyaExternalID", "hexya_external_id")),
	}
}

// HexyaVersion adds the "HexyaVersion" field to the Condition
func (cs ConditionStart) HexyaVersion() pIntConditionField {
	return pIntConditionField{
		ConditionField: cs.Field(models.NewFieldName("HexyaVersion", "hexya_version")),
	}
}

// ID adds the "ID" field to the Condition
func (cs ConditionStart) ID() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("ID", "id")),
	}
}

// Image adds the "Image" field to the Condition
func (cs ConditionStart) Image() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Image", "image")),
	}
}

// Image1024 adds the "Image1024" field to the Condition
func (cs ConditionStart) Image1024() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Image1024", "image_1024")),
	}
}

// Image128 adds the "Image128" field to the Condition
func (cs ConditionStart) Image128() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Image128", "image_128")),
	}
}

// Image1920 adds the "Image1920" field to the Condition
func (cs ConditionStart) Image1920() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Image1920", "image_1920")),
	}
}

// Image256 adds the "Image256" field to the Condition
func (cs ConditionStart) Image256() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Image256", "image_256")),
	}
}

// Image512 adds the "Image512" field to the Condition
func (cs ConditionStart) Image512() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Image512", "image_512")),
	}
}

// ImageMedium adds the "ImageMedium" field to the Condition
func (cs ConditionStart) ImageMedium() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("ImageMedium", "image_medium")),
	}
}

// ImageSmall adds the "ImageSmall" field to the Condition
func (cs ConditionStart) ImageSmall() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("ImageSmall", "image_small")),
	}
}

// Industry adds the "Industry" field to the Condition
func (cs ConditionStart) Industry() pMPartnerIndustrySetConditionField {
	return pMPartnerIndustrySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Industry", "industry_id")),
	}
}

// IndustryFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) IndustryFilteredOn(cond PartnerIndustryCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Industry", "industry_id"), cond.Underlying()),
	}
}

// IsCompany adds the "IsCompany" field to the Condition
func (cs ConditionStart) IsCompany() pBoolConditionField {
	return pBoolConditionField{
		ConditionField: cs.Field(models.NewFieldName("IsCompany", "is_company")),
	}
}

// Lang adds the "Lang" field to the Condition
func (cs ConditionStart) Lang() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Lang", "lang")),
	}
}

// LastUpdate adds the "LastUpdate" field to the Condition
func (cs ConditionStart) LastUpdate() pDatesDateTimeConditionField {
	return pDatesDateTimeConditionField{
		ConditionField: cs.Field(models.NewFieldName("LastUpdate", "__last_update")),
	}
}

// Latitude adds the "Latitude" field to the Condition
func (cs ConditionStart) Latitude() pFloat64ConditionField {
	return pFloat64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("Latitude", "latitude")),
	}
}

// Longitude adds the "Longitude" field to the Condition
func (cs ConditionStart) Longitude() pFloat64ConditionField {
	return pFloat64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("Longitude", "longitude")),
	}
}

// Mobile adds the "Mobile" field to the Condition
func (cs ConditionStart) Mobile() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Mobile", "mobile")),
	}
}

// Name adds the "Name" field to the Condition
func (cs ConditionStart) Name() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Name", "name")),
	}
}

// Parent adds the "Parent" field to the Condition
func (cs ConditionStart) Parent() pMPartnerSetConditionField {
	return pMPartnerSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Parent", "parent_id")),
	}
}

// ParentFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) ParentFilteredOn(cond PartnerCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Parent", "parent_id"), cond.Underlying()),
	}
}

// ParentName adds the "ParentName" field to the Condition
func (cs ConditionStart) ParentName() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("ParentName", "parent_name")),
	}
}

// PartnerShare adds the "PartnerShare" field to the Condition
func (cs ConditionStart) PartnerShare() pBoolConditionField {
	return pBoolConditionField{
		ConditionField: cs.Field(models.NewFieldName("PartnerShare", "partner_share")),
	}
}

// Phone adds the "Phone" field to the Condition
func (cs ConditionStart) Phone() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Phone", "phone")),
	}
}

// Ref adds the "Ref" field to the Condition
func (cs ConditionStart) Ref() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Ref", "ref")),
	}
}

// SameVATPartner adds the "SameVATPartner" field to the Condition
func (cs ConditionStart) SameVATPartner() pMPartnerSetConditionField {
	return pMPartnerSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("SameVATPartner", "same_vat_partner_id")),
	}
}

// SameVATPartnerFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) SameVATPartnerFilteredOn(cond PartnerCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("SameVATPartner", "same_vat_partner_id"), cond.Underlying()),
	}
}

// State adds the "State" field to the Condition
func (cs ConditionStart) State() pMCountryStateSetConditionField {
	return pMCountryStateSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("State", "state_id")),
	}
}

// StateFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) StateFilteredOn(cond CountryStateCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("State", "state_id"), cond.Underlying()),
	}
}

// Street adds the "Street" field to the Condition
func (cs ConditionStart) Street() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Street", "street")),
	}
}

// Street2 adds the "Street2" field to the Condition
func (cs ConditionStart) Street2() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Street2", "street2")),
	}
}

// TZ adds the "TZ" field to the Condition
func (cs ConditionStart) TZ() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("TZ", "tz")),
	}
}

// TZOffset adds the "TZOffset" field to the Condition
func (cs ConditionStart) TZOffset() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("TZOffset", "tz_offset")),
	}
}

// Title adds the "Title" field to the Condition
func (cs ConditionStart) Title() pMPartnerTitleSetConditionField {
	return pMPartnerTitleSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Title", "title_id")),
	}
}

// TitleFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) TitleFilteredOn(cond PartnerTitleCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Title", "title_id"), cond.Underlying()),
	}
}

// Type adds the "Type" field to the Condition
func (cs ConditionStart) Type() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Type", "type")),
	}
}

// User adds the "User" field to the Condition
func (cs ConditionStart) User() pMUserSetConditionField {
	return pMUserSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("User", "user_id")),
	}
}

// UserFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) UserFilteredOn(cond UserCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("User", "user_id"), cond.Underlying()),
	}
}

// Users adds the "Users" field to the Condition
func (cs ConditionStart) Users() pMUserSetConditionField {
	return pMUserSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Users", "user_ids")),
	}
}

// UsersFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) UsersFilteredOn(cond UserCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Users", "user_ids"), cond.Underlying()),
	}
}

// VAT adds the "VAT" field to the Condition
func (cs ConditionStart) VAT() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("VAT", "vat")),
	}
}

// Website adds the "Website" field to the Condition
func (cs ConditionStart) Website() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Website", "website")),
	}
}

// WriteDate adds the "WriteDate" field to the Condition
func (cs ConditionStart) WriteDate() pDatesDateTimeConditionField {
	return pDatesDateTimeConditionField{
		ConditionField: cs.Field(models.NewFieldName("WriteDate", "write_date")),
	}
}

// WriteUID adds the "WriteUID" field to the Condition
func (cs ConditionStart) WriteUID() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("WriteUID", "write_uid")),
	}
}

// Zip adds the "Zip" field to the Condition
func (cs ConditionStart) Zip() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Zip", "zip")),
	}
}

// ------- CONDITION FIELDS ----------

// A pMBankAccountSetConditionField is a partial Condition when
// we have selected a field of type BankAccountSet and expecting an operator.
type pMBankAccountSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) Equals(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) NotEquals(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) Greater(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) GreaterOrEqual(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) Lower(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) LowerOrEqual(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) Like(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) Contains(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) NotContains(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) IContains(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) NotIContains(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) ILike(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) In(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) NotIn(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMBankAccountSetConditionField) ChildOf(arg BankAccountSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMBankAccountSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMBankAccountSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMBankAccountSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMBankAccountSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMBankAccountSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMCompanySetConditionField is a partial Condition when
// we have selected a field of type CompanySet and expecting an operator.
type pMCompanySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Equals(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotEquals(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Greater(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) GreaterOrEqual(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Lower(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) LowerOrEqual(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Like(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Contains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotContains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) IContains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotIContains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) ILike(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) In(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotIn(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) ChildOf(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCompanySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCompanySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCompanySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMCountrySetConditionField is a partial Condition when
// we have selected a field of type CountrySet and expecting an operator.
type pMCountrySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Equals(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotEquals(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Greater(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) GreaterOrEqual(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Lower(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) LowerOrEqual(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Like(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Contains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotContains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) IContains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotIContains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) ILike(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) In(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotIn(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) ChildOf(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCountrySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCountrySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCountrySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMCountryStateSetConditionField is a partial Condition when
// we have selected a field of type CountryStateSet and expecting an operator.
type pMCountryStateSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Equals(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotEquals(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Greater(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) GreaterOrEqual(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Lower(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) LowerOrEqual(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Like(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Contains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotContains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) IContains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotIContains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) ILike(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) In(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotIn(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) ChildOf(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCountryStateSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCountryStateSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCountryStateSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMPartnerCategorySetConditionField is a partial Condition when
// we have selected a field of type PartnerCategorySet and expecting an operator.
type pMPartnerCategorySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) Equals(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) NotEquals(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) Greater(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) GreaterOrEqual(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) Lower(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) LowerOrEqual(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) Like(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) Contains(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) NotContains(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) IContains(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) NotIContains(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) ILike(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) In(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) NotIn(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMPartnerCategorySetConditionField) ChildOf(arg PartnerCategorySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerCategorySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerCategorySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMPartnerCategorySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMPartnerCategorySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMPartnerCategorySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMPartnerIndustrySetConditionField is a partial Condition when
// we have selected a field of type PartnerIndustrySet and expecting an operator.
type pMPartnerIndustrySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) Equals(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) NotEquals(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) Greater(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) GreaterOrEqual(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) Lower(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) LowerOrEqual(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) Like(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) Contains(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) NotContains(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) IContains(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) NotIContains(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) ILike(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) In(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) NotIn(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMPartnerIndustrySetConditionField) ChildOf(arg PartnerIndustrySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerIndustrySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerIndustrySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMPartnerIndustrySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMPartnerIndustrySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMPartnerIndustrySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMPartnerSetConditionField is a partial Condition when
// we have selected a field of type PartnerSet and expecting an operator.
type pMPartnerSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Equals(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotEquals(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Greater(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) GreaterOrEqual(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Lower(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) LowerOrEqual(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Like(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Contains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotContains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) IContains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotIContains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) ILike(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) In(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotIn(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) ChildOf(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMPartnerSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMPartnerSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMPartnerSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMPartnerTitleSetConditionField is a partial Condition when
// we have selected a field of type PartnerTitleSet and expecting an operator.
type pMPartnerTitleSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) Equals(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) NotEquals(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) Greater(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) GreaterOrEqual(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) Lower(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) LowerOrEqual(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) Like(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) Contains(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) NotContains(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) IContains(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) NotIContains(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) ILike(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) In(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) NotIn(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMPartnerTitleSetConditionField) ChildOf(arg PartnerTitleSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerTitleSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerTitleSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMPartnerTitleSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMPartnerTitleSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMPartnerTitleSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMUserSetConditionField is a partial Condition when
// we have selected a field of type UserSet and expecting an operator.
type pMUserSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Equals(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotEquals(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Greater(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMUserSetConditionField) GreaterOrEqual(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Lower(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMUserSetConditionField) LowerOrEqual(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Like(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Contains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotContains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) IContains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotIContains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMUserSetConditionField) ILike(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMUserSetConditionField) In(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotIn(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMUserSetConditionField) ChildOf(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMUserSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMUserSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMUserSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pBoolConditionField is a partial Condition when
// we have selected a field of type bool and expecting an operator.
type pBoolConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pBoolConditionField) Equals(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) EqualsFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pBoolConditionField) NotEquals(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) NotEqualsFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pBoolConditionField) Greater(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) GreaterFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pBoolConditionField) GreaterOrEqual(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pBoolConditionField) Lower(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) LowerFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pBoolConditionField) LowerOrEqual(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) LowerOrEqualFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pBoolConditionField) Like(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) LikeFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pBoolConditionField) Contains(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) ContainsFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pBoolConditionField) NotContains(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) NotContainsFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pBoolConditionField) IContains(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) IContainsFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pBoolConditionField) NotIContains(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) NotIContainsFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pBoolConditionField) ILike(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) ILikeFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pBoolConditionField) In(arg []bool) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) InFunc(arg func(models.RecordSet) []bool) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pBoolConditionField) NotIn(arg []bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) NotInFunc(arg func(models.RecordSet) []bool) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pBoolConditionField) ChildOf(arg bool) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pBoolConditionField) ChildOfFunc(arg func(models.RecordSet) bool) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pBoolConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pBoolConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pBoolConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pBoolConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pDatesDateConditionField is a partial Condition when
// we have selected a field of type dates.Date and expecting an operator.
type pDatesDateConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pDatesDateConditionField) Equals(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) EqualsFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pDatesDateConditionField) NotEquals(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) NotEqualsFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pDatesDateConditionField) Greater(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) GreaterFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pDatesDateConditionField) GreaterOrEqual(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pDatesDateConditionField) Lower(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) LowerFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pDatesDateConditionField) LowerOrEqual(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) LowerOrEqualFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pDatesDateConditionField) Like(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) LikeFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pDatesDateConditionField) Contains(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) ContainsFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pDatesDateConditionField) NotContains(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) NotContainsFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pDatesDateConditionField) IContains(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) IContainsFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pDatesDateConditionField) NotIContains(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) NotIContainsFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pDatesDateConditionField) ILike(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) ILikeFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pDatesDateConditionField) In(arg []dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) InFunc(arg func(models.RecordSet) []dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pDatesDateConditionField) NotIn(arg []dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) NotInFunc(arg func(models.RecordSet) []dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pDatesDateConditionField) ChildOf(arg dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateConditionField) ChildOfFunc(arg func(models.RecordSet) dates.Date) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pDatesDateConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pDatesDateConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pDatesDateConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pDatesDateTimeConditionField is a partial Condition when
// we have selected a field of type dates.DateTime and expecting an operator.
type pDatesDateTimeConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Equals(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) EqualsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotEquals(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotEqualsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Greater(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) GreaterFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) GreaterOrEqual(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Lower(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) LowerFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) LowerOrEqual(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) LowerOrEqualFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Like(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) LikeFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Contains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) ContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotContains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) IContains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) IContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotIContains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotIContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) ILike(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) ILikeFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) In(arg []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) InFunc(arg func(models.RecordSet) []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotIn(arg []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotInFunc(arg func(models.RecordSet) []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) ChildOf(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) ChildOfFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pDatesDateTimeConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pDatesDateTimeConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pDatesDateTimeConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pFloat64ConditionField is a partial Condition when
// we have selected a field of type float64 and expecting an operator.
type pFloat64ConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pFloat64ConditionField) Equals(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) EqualsFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pFloat64ConditionField) NotEquals(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) NotEqualsFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pFloat64ConditionField) Greater(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) GreaterFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pFloat64ConditionField) GreaterOrEqual(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pFloat64ConditionField) Lower(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) LowerFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pFloat64ConditionField) LowerOrEqual(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) LowerOrEqualFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pFloat64ConditionField) Like(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) LikeFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pFloat64ConditionField) Contains(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) ContainsFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pFloat64ConditionField) NotContains(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) NotContainsFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pFloat64ConditionField) IContains(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) IContainsFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pFloat64ConditionField) NotIContains(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) NotIContainsFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pFloat64ConditionField) ILike(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) ILikeFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pFloat64ConditionField) In(arg []float64) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) InFunc(arg func(models.RecordSet) []float64) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pFloat64ConditionField) NotIn(arg []float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) NotInFunc(arg func(models.RecordSet) []float64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pFloat64ConditionField) ChildOf(arg float64) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pFloat64ConditionField) ChildOfFunc(arg func(models.RecordSet) float64) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pFloat64ConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pFloat64ConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pFloat64ConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pFloat64ConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pIntConditionField is a partial Condition when
// we have selected a field of type int and expecting an operator.
type pIntConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pIntConditionField) Equals(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) EqualsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pIntConditionField) NotEquals(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotEqualsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pIntConditionField) Greater(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) GreaterFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pIntConditionField) GreaterOrEqual(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pIntConditionField) Lower(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) LowerFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pIntConditionField) LowerOrEqual(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) LowerOrEqualFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pIntConditionField) Like(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) LikeFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pIntConditionField) Contains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) ContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pIntConditionField) NotContains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pIntConditionField) IContains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) IContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pIntConditionField) NotIContains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotIContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pIntConditionField) ILike(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) ILikeFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pIntConditionField) In(arg []int) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) InFunc(arg func(models.RecordSet) []int) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pIntConditionField) NotIn(arg []int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotInFunc(arg func(models.RecordSet) []int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pIntConditionField) ChildOf(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) ChildOfFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pIntConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pIntConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pIntConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pInt64ConditionField is a partial Condition when
// we have selected a field of type int64 and expecting an operator.
type pInt64ConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pInt64ConditionField) Equals(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) EqualsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotEquals(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotEqualsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pInt64ConditionField) Greater(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) GreaterFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pInt64ConditionField) GreaterOrEqual(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pInt64ConditionField) Lower(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) LowerFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pInt64ConditionField) LowerOrEqual(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) LowerOrEqualFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pInt64ConditionField) Like(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) LikeFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pInt64ConditionField) Contains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) ContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotContains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pInt64ConditionField) IContains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) IContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotIContains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotIContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pInt64ConditionField) ILike(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) ILikeFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pInt64ConditionField) In(arg []int64) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) InFunc(arg func(models.RecordSet) []int64) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotIn(arg []int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotInFunc(arg func(models.RecordSet) []int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pInt64ConditionField) ChildOf(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) ChildOfFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pInt64ConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pInt64ConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pInt64ConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pStringConditionField is a partial Condition when
// we have selected a field of type string and expecting an operator.
type pStringConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pStringConditionField) Equals(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) EqualsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pStringConditionField) NotEquals(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotEqualsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pStringConditionField) Greater(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) GreaterFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pStringConditionField) GreaterOrEqual(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pStringConditionField) Lower(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) LowerFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pStringConditionField) LowerOrEqual(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) LowerOrEqualFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pStringConditionField) Like(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) LikeFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pStringConditionField) Contains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) ContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pStringConditionField) NotContains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pStringConditionField) IContains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) IContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pStringConditionField) NotIContains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotIContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pStringConditionField) ILike(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) ILikeFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pStringConditionField) In(arg []string) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) InFunc(arg func(models.RecordSet) []string) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pStringConditionField) NotIn(arg []string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotInFunc(arg func(models.RecordSet) []string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pStringConditionField) ChildOf(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) ChildOfFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pStringConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pStringConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pStringConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}
