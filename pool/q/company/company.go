// This file is autogenerated by hexya-generate
// DO NOT MODIFY THIS FILE - ANY CHANGES WILL BE OVERWRITTEN

package company

import (
	"github.com/hexya-erp/hexya/src/models"
	"github.com/hexya-erp/hexya/src/models/operator"
	"github.com/hexya-erp/hexya/src/models/types/dates"
)

// ------- INTERFACES --------

type CompanyCondition interface {
	models.Conditioner
	CompanyConditionHexyaFunc()
}

type CompanySet interface {
	models.RecordSet
	CompanySetHexyaFunc()
}

type CountryCondition interface {
	models.Conditioner
	CountryConditionHexyaFunc()
}

type CountrySet interface {
	models.RecordSet
	CountrySetHexyaFunc()
}

type CountryStateCondition interface {
	models.Conditioner
	CountryStateConditionHexyaFunc()
}

type CountryStateSet interface {
	models.RecordSet
	CountryStateSetHexyaFunc()
}

type CurrencyCondition interface {
	models.Conditioner
	CurrencyConditionHexyaFunc()
}

type CurrencySet interface {
	models.RecordSet
	CurrencySetHexyaFunc()
}

type PartnerCondition interface {
	models.Conditioner
	PartnerConditionHexyaFunc()
}

type PartnerSet interface {
	models.RecordSet
	PartnerSetHexyaFunc()
}

type UserCondition interface {
	models.Conditioner
	UserConditionHexyaFunc()
}

type UserSet interface {
	models.RecordSet
	UserSetHexyaFunc()
}

// ------- CONDITION ---------

// A Condition is a type safe WHERE clause in an SQL query
type Condition struct {
	*models.Condition
}

// And completes the current condition with a simple And clause : c.And().nextCond => c And nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) And() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.And(),
	}
}

// AndCond completes the current condition with the given cond as an And clause
// between brackets : c.And(cond) => c And (cond)
func (c Condition) AndCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.AndCond(cond.Condition),
	}
}

// AndNot completes the current condition with a simple AndNot clause : c.AndNot().nextCond => c AndNot nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) AndNot() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.AndNot(),
	}
}

// AndNotCond completes the current condition with the given cond as an AndNot clause
// between brackets : c.AndNot(cond) => c AndNot (cond)
func (c Condition) AndNotCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.AndNotCond(cond.Condition),
	}
}

// Or completes the current condition with a simple Or clause : c.Or().nextCond => c Or nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) Or() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.Or(),
	}
}

// OrCond completes the current condition with the given cond as an Or clause
// between brackets : c.Or(cond) => c Or (cond)
func (c Condition) OrCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.OrCond(cond.Condition),
	}
}

// OrNot completes the current condition with a simple OrNot clause : c.OrNot().nextCond => c OrNot nextCond
//
// No brackets are added so AND precedence over OR applies.
func (c Condition) OrNot() ConditionStart {
	return ConditionStart{
		ConditionStart: c.Condition.OrNot(),
	}
}

// OrNotCond completes the current condition with the given cond as an OrNot clause
// between brackets : c.OrNot(cond) => c OrNot (cond)
func (c Condition) OrNotCond(cond Condition) Condition {
	return Condition{
		Condition: c.Condition.OrNotCond(cond.Condition),
	}
}

// Underlying returns the underlying models.Condition instance
func (c Condition) Underlying() *models.Condition {
	return c.Condition
}

// CompanyConditionHexyaFunc is a dummy function to uniquely match interfaces.
func (c Condition) CompanyConditionHexyaFunc() {}

var _ models.Conditioner = Condition{}

// ------- CONDITION START ---------

// A ConditionStart is an object representing a Condition when
// we just added a logical operator (AND, OR, ...) and we are
// about to add a predicate.
type ConditionStart struct {
	*models.ConditionStart
}

// NewCondition returns a valid empty Condition
func (cs ConditionStart) NewCondition() Condition {
	return Condition{
		Condition: &models.Condition{},
	}
}

// Children adds the "Children" field to the Condition
func (cs ConditionStart) Children() pMCompanySetConditionField {
	return pMCompanySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Children", "children_ids")),
	}
}

// ChildrenFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) ChildrenFilteredOn(cond CompanyCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Children", "children_ids"), cond.Underlying()),
	}
}

// City adds the "City" field to the Condition
func (cs ConditionStart) City() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("City", "city")),
	}
}

// CompanyRegistry adds the "CompanyRegistry" field to the Condition
func (cs ConditionStart) CompanyRegistry() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("CompanyRegistry", "company_registry")),
	}
}

// Country adds the "Country" field to the Condition
func (cs ConditionStart) Country() pMCountrySetConditionField {
	return pMCountrySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Country", "country_id")),
	}
}

// CountryFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) CountryFilteredOn(cond CountryCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Country", "country_id"), cond.Underlying()),
	}
}

// CreateDate adds the "CreateDate" field to the Condition
func (cs ConditionStart) CreateDate() pDatesDateTimeConditionField {
	return pDatesDateTimeConditionField{
		ConditionField: cs.Field(models.NewFieldName("CreateDate", "create_date")),
	}
}

// CreateUID adds the "CreateUID" field to the Condition
func (cs ConditionStart) CreateUID() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("CreateUID", "create_uid")),
	}
}

// Currency adds the "Currency" field to the Condition
func (cs ConditionStart) Currency() pMCurrencySetConditionField {
	return pMCurrencySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Currency", "currency_id")),
	}
}

// CurrencyFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) CurrencyFilteredOn(cond CurrencyCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Currency", "currency_id"), cond.Underlying()),
	}
}

// DashboardBackground adds the "DashboardBackground" field to the Condition
func (cs ConditionStart) DashboardBackground() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("DashboardBackground", "dashboard_background")),
	}
}

// DisplayName adds the "DisplayName" field to the Condition
func (cs ConditionStart) DisplayName() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("DisplayName", "display_name")),
	}
}

// Email adds the "Email" field to the Condition
func (cs ConditionStart) Email() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Email", "email")),
	}
}

// Favicon adds the "Favicon" field to the Condition
func (cs ConditionStart) Favicon() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Favicon", "favicon")),
	}
}

// HexyaExternalID adds the "HexyaExternalID" field to the Condition
func (cs ConditionStart) HexyaExternalID() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("HexyaExternalID", "hexya_external_id")),
	}
}

// HexyaVersion adds the "HexyaVersion" field to the Condition
func (cs ConditionStart) HexyaVersion() pIntConditionField {
	return pIntConditionField{
		ConditionField: cs.Field(models.NewFieldName("HexyaVersion", "hexya_version")),
	}
}

// ID adds the "ID" field to the Condition
func (cs ConditionStart) ID() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("ID", "id")),
	}
}

// LastUpdate adds the "LastUpdate" field to the Condition
func (cs ConditionStart) LastUpdate() pDatesDateTimeConditionField {
	return pDatesDateTimeConditionField{
		ConditionField: cs.Field(models.NewFieldName("LastUpdate", "__last_update")),
	}
}

// Logo adds the "Logo" field to the Condition
func (cs ConditionStart) Logo() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Logo", "logo")),
	}
}

// LogoWeb adds the "LogoWeb" field to the Condition
func (cs ConditionStart) LogoWeb() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("LogoWeb", "logo_web")),
	}
}

// Name adds the "Name" field to the Condition
func (cs ConditionStart) Name() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Name", "name")),
	}
}

// Parent adds the "Parent" field to the Condition
func (cs ConditionStart) Parent() pMCompanySetConditionField {
	return pMCompanySetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Parent", "parent_id")),
	}
}

// ParentFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) ParentFilteredOn(cond CompanyCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Parent", "parent_id"), cond.Underlying()),
	}
}

// Partner adds the "Partner" field to the Condition
func (cs ConditionStart) Partner() pMPartnerSetConditionField {
	return pMPartnerSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Partner", "partner_id")),
	}
}

// PartnerFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) PartnerFilteredOn(cond PartnerCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Partner", "partner_id"), cond.Underlying()),
	}
}

// Phone adds the "Phone" field to the Condition
func (cs ConditionStart) Phone() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Phone", "phone")),
	}
}

// Sequence adds the "Sequence" field to the Condition
func (cs ConditionStart) Sequence() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("Sequence", "sequence")),
	}
}

// State adds the "State" field to the Condition
func (cs ConditionStart) State() pMCountryStateSetConditionField {
	return pMCountryStateSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("State", "state_id")),
	}
}

// StateFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) StateFilteredOn(cond CountryStateCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("State", "state_id"), cond.Underlying()),
	}
}

// Street adds the "Street" field to the Condition
func (cs ConditionStart) Street() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Street", "street")),
	}
}

// Street2 adds the "Street2" field to the Condition
func (cs ConditionStart) Street2() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Street2", "street2")),
	}
}

// Users adds the "Users" field to the Condition
func (cs ConditionStart) Users() pMUserSetConditionField {
	return pMUserSetConditionField{
		ConditionField: cs.Field(models.NewFieldName("Users", "users_ids")),
	}
}

// UsersFilteredOn adds a condition with a table join on the given field and
// filters the result with the given condition
func (cs ConditionStart) UsersFilteredOn(cond UserCondition) Condition {
	return Condition{
		Condition: cs.FilteredOn(models.NewFieldName("Users", "users_ids"), cond.Underlying()),
	}
}

// VAT adds the "VAT" field to the Condition
func (cs ConditionStart) VAT() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("VAT", "vat")),
	}
}

// Website adds the "Website" field to the Condition
func (cs ConditionStart) Website() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Website", "website")),
	}
}

// WriteDate adds the "WriteDate" field to the Condition
func (cs ConditionStart) WriteDate() pDatesDateTimeConditionField {
	return pDatesDateTimeConditionField{
		ConditionField: cs.Field(models.NewFieldName("WriteDate", "write_date")),
	}
}

// WriteUID adds the "WriteUID" field to the Condition
func (cs ConditionStart) WriteUID() pInt64ConditionField {
	return pInt64ConditionField{
		ConditionField: cs.Field(models.NewFieldName("WriteUID", "write_uid")),
	}
}

// Zip adds the "Zip" field to the Condition
func (cs ConditionStart) Zip() pStringConditionField {
	return pStringConditionField{
		ConditionField: cs.Field(models.NewFieldName("Zip", "zip")),
	}
}

// ------- CONDITION FIELDS ----------

// A pMCompanySetConditionField is a partial Condition when
// we have selected a field of type CompanySet and expecting an operator.
type pMCompanySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Equals(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotEquals(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Greater(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) GreaterOrEqual(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Lower(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) LowerOrEqual(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Like(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) Contains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotContains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) IContains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotIContains(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) ILike(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) In(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) NotIn(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCompanySetConditionField) ChildOf(arg CompanySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCompanySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCompanySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCompanySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCompanySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCompanySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMCountrySetConditionField is a partial Condition when
// we have selected a field of type CountrySet and expecting an operator.
type pMCountrySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Equals(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotEquals(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Greater(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) GreaterOrEqual(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Lower(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) LowerOrEqual(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Like(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) Contains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotContains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) IContains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotIContains(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) ILike(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) In(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) NotIn(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCountrySetConditionField) ChildOf(arg CountrySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountrySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountrySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCountrySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCountrySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCountrySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMCountryStateSetConditionField is a partial Condition when
// we have selected a field of type CountryStateSet and expecting an operator.
type pMCountryStateSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Equals(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotEquals(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Greater(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) GreaterOrEqual(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Lower(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) LowerOrEqual(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Like(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) Contains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotContains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) IContains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotIContains(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) ILike(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) In(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) NotIn(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCountryStateSetConditionField) ChildOf(arg CountryStateSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCountryStateSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCountryStateSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCountryStateSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCountryStateSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCountryStateSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMCurrencySetConditionField is a partial Condition when
// we have selected a field of type CurrencySet and expecting an operator.
type pMCurrencySetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) Equals(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) NotEquals(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) Greater(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) GreaterOrEqual(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) Lower(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) LowerOrEqual(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) Like(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) Contains(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) NotContains(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) IContains(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) NotIContains(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) ILike(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) In(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) NotIn(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMCurrencySetConditionField) ChildOf(arg CurrencySet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMCurrencySetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMCurrencySetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMCurrencySetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMCurrencySetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMCurrencySetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMPartnerSetConditionField is a partial Condition when
// we have selected a field of type PartnerSet and expecting an operator.
type pMPartnerSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Equals(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotEquals(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Greater(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) GreaterOrEqual(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Lower(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) LowerOrEqual(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Like(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) Contains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotContains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) IContains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotIContains(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) ILike(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) In(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) NotIn(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMPartnerSetConditionField) ChildOf(arg PartnerSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMPartnerSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMPartnerSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMPartnerSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMPartnerSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMPartnerSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pMUserSetConditionField is a partial Condition when
// we have selected a field of type UserSet and expecting an operator.
type pMUserSetConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Equals(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) EqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotEquals(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotEqualsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Greater(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) GreaterFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pMUserSetConditionField) GreaterOrEqual(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Lower(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) LowerFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pMUserSetConditionField) LowerOrEqual(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) LowerOrEqualFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Like(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) LikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) Contains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) ContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotContains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) IContains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) IContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotIContains(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotIContainsFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pMUserSetConditionField) ILike(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) ILikeFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pMUserSetConditionField) In(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) InFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pMUserSetConditionField) NotIn(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) NotInFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pMUserSetConditionField) ChildOf(arg UserSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pMUserSetConditionField) ChildOfFunc(arg func(models.RecordSet) models.RecordSet) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pMUserSetConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pMUserSetConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pMUserSetConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pMUserSetConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pDatesDateTimeConditionField is a partial Condition when
// we have selected a field of type dates.DateTime and expecting an operator.
type pDatesDateTimeConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Equals(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) EqualsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotEquals(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotEqualsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Greater(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) GreaterFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) GreaterOrEqual(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Lower(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) LowerFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) LowerOrEqual(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) LowerOrEqualFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Like(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) LikeFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) Contains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) ContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotContains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) IContains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) IContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotIContains(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotIContainsFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) ILike(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) ILikeFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) In(arg []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) InFunc(arg func(models.RecordSet) []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) NotIn(arg []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) NotInFunc(arg func(models.RecordSet) []dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pDatesDateTimeConditionField) ChildOf(arg dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pDatesDateTimeConditionField) ChildOfFunc(arg func(models.RecordSet) dates.DateTime) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pDatesDateTimeConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pDatesDateTimeConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pDatesDateTimeConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pDatesDateTimeConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pIntConditionField is a partial Condition when
// we have selected a field of type int and expecting an operator.
type pIntConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pIntConditionField) Equals(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) EqualsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pIntConditionField) NotEquals(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotEqualsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pIntConditionField) Greater(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) GreaterFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pIntConditionField) GreaterOrEqual(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pIntConditionField) Lower(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) LowerFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pIntConditionField) LowerOrEqual(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) LowerOrEqualFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pIntConditionField) Like(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) LikeFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pIntConditionField) Contains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) ContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pIntConditionField) NotContains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pIntConditionField) IContains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) IContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pIntConditionField) NotIContains(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotIContainsFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pIntConditionField) ILike(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) ILikeFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pIntConditionField) In(arg []int) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) InFunc(arg func(models.RecordSet) []int) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pIntConditionField) NotIn(arg []int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) NotInFunc(arg func(models.RecordSet) []int) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pIntConditionField) ChildOf(arg int) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pIntConditionField) ChildOfFunc(arg func(models.RecordSet) int) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pIntConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pIntConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pIntConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pIntConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pInt64ConditionField is a partial Condition when
// we have selected a field of type int64 and expecting an operator.
type pInt64ConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pInt64ConditionField) Equals(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) EqualsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotEquals(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotEqualsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pInt64ConditionField) Greater(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) GreaterFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pInt64ConditionField) GreaterOrEqual(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pInt64ConditionField) Lower(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) LowerFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pInt64ConditionField) LowerOrEqual(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) LowerOrEqualFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pInt64ConditionField) Like(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) LikeFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pInt64ConditionField) Contains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) ContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotContains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pInt64ConditionField) IContains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) IContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotIContains(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotIContainsFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pInt64ConditionField) ILike(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) ILikeFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pInt64ConditionField) In(arg []int64) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) InFunc(arg func(models.RecordSet) []int64) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pInt64ConditionField) NotIn(arg []int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) NotInFunc(arg func(models.RecordSet) []int64) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pInt64ConditionField) ChildOf(arg int64) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pInt64ConditionField) ChildOfFunc(arg func(models.RecordSet) int64) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pInt64ConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pInt64ConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pInt64ConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pInt64ConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}

// A pStringConditionField is a partial Condition when
// we have selected a field of type string and expecting an operator.
type pStringConditionField struct {
	*models.ConditionField
}

// Equals adds a condition value to the ConditionPath
func (c pStringConditionField) Equals(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) EqualsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(arg),
	}
}

// EqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) EqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Equals(models.ClientEvaluatedString(expression)),
	}
}

// NotEquals adds a condition value to the ConditionPath
func (c pStringConditionField) NotEquals(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotEqualsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(arg),
	}
}

// NotEqualsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotEqualsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotEquals(models.ClientEvaluatedString(expression)),
	}
}

// Greater adds a condition value to the ConditionPath
func (c pStringConditionField) Greater(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) GreaterFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(arg),
	}
}

// GreaterEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) GreaterEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Greater(models.ClientEvaluatedString(expression)),
	}
}

// GreaterOrEqual adds a condition value to the ConditionPath
func (c pStringConditionField) GreaterOrEqual(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) GreaterOrEqualFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(arg),
	}
}

// GreaterOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) GreaterOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.GreaterOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Lower adds a condition value to the ConditionPath
func (c pStringConditionField) Lower(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) LowerFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(arg),
	}
}

// LowerEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) LowerEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Lower(models.ClientEvaluatedString(expression)),
	}
}

// LowerOrEqual adds a condition value to the ConditionPath
func (c pStringConditionField) LowerOrEqual(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) LowerOrEqualFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(arg),
	}
}

// LowerOrEqualEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) LowerOrEqualEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.LowerOrEqual(models.ClientEvaluatedString(expression)),
	}
}

// Like adds a condition value to the ConditionPath
func (c pStringConditionField) Like(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) LikeFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(arg),
	}
}

// LikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) LikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Like(models.ClientEvaluatedString(expression)),
	}
}

// Contains adds a condition value to the ConditionPath
func (c pStringConditionField) Contains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) ContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(arg),
	}
}

// ContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) ContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.Contains(models.ClientEvaluatedString(expression)),
	}
}

// NotContains adds a condition value to the ConditionPath
func (c pStringConditionField) NotContains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(arg),
	}
}

// NotContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotContains(models.ClientEvaluatedString(expression)),
	}
}

// IContains adds a condition value to the ConditionPath
func (c pStringConditionField) IContains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) IContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(arg),
	}
}

// IContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) IContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.IContains(models.ClientEvaluatedString(expression)),
	}
}

// NotIContains adds a condition value to the ConditionPath
func (c pStringConditionField) NotIContains(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotIContainsFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(arg),
	}
}

// NotIContainsEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotIContainsEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIContains(models.ClientEvaluatedString(expression)),
	}
}

// ILike adds a condition value to the ConditionPath
func (c pStringConditionField) ILike(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) ILikeFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(arg),
	}
}

// ILikeEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) ILikeEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ILike(models.ClientEvaluatedString(expression)),
	}
}

// In adds a condition value to the ConditionPath
func (c pStringConditionField) In(arg []string) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) InFunc(arg func(models.RecordSet) []string) Condition {
	return Condition{
		Condition: c.ConditionField.In(arg),
	}
}

// InEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) InEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.In(models.ClientEvaluatedString(expression)),
	}
}

// NotIn adds a condition value to the ConditionPath
func (c pStringConditionField) NotIn(arg []string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) NotInFunc(arg func(models.RecordSet) []string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(arg),
	}
}

// NotInEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) NotInEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.NotIn(models.ClientEvaluatedString(expression)),
	}
}

// ChildOf adds a condition value to the ConditionPath
func (c pStringConditionField) ChildOf(arg string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfFunc adds a function value to the ConditionPath.
// The function will be evaluated when the query is performed and
// it will be given the RecordSet on which the query is made as parameter
func (c pStringConditionField) ChildOfFunc(arg func(models.RecordSet) string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(arg),
	}
}

// ChildOfEval adds an expression value to the ConditionPath.
// The expression value will be evaluated by the client with the
// corresponding execution context. The resulting Condition cannot
// be used server-side.
func (c pStringConditionField) ChildOfEval(expression string) Condition {
	return Condition{
		Condition: c.ConditionField.ChildOf(models.ClientEvaluatedString(expression)),
	}
}

// IsNull checks if the current condition field is null
func (c pStringConditionField) IsNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNull(),
	}
}

// IsNotNull checks if the current condition field is not null
func (c pStringConditionField) IsNotNull() Condition {
	return Condition{
		Condition: c.ConditionField.IsNotNull(),
	}
}

// AddOperator adds a condition value to the condition with the given operator and data
// If multi is true, a recordset will be converted into a slice of int64
// otherwise, it will return an int64 and panic if the recordset is not a singleton.
//
// This method is low level and should be avoided. Use operator methods such as Equals() instead.
func (c pStringConditionField) AddOperator(op operator.Operator, data interface{}) Condition {
	return Condition{
		Condition: c.ConditionField.AddOperator(op, data),
	}
}
